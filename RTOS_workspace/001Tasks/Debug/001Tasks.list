
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bb8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08007db8  08007db8  00008db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f6c  08007f6c  00009070  2**0
                  CONTENTS
  4 .ARM          00000008  08007f6c  08007f6c  00008f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f74  08007f74  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f74  08007f74  00008f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f78  08007f78  00008f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007f7c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d1d8  20000070  08007fec  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d248  08007fec  00009248  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c05  00000000  00000000  0000909e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000325e  00000000  00000000  0001eca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  00021f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fe4  00000000  00000000  000233c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c35b  00000000  00000000  000243a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018875  00000000  00000000  000506ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113f51  00000000  00000000  00068f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017cec5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005eb8  00000000  00000000  0017cf08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009c  00000000  00000000  00182dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08007da0 	.word	0x08007da0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08007da0 	.word	0x08007da0

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	2000bb24 	.word	0x2000bb24
	...

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b088      	sub	sp, #32
 8000674:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000676:	f000 fb6e 	bl	8000d56 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800067a:	f000 f857 	bl	800072c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800067e:	f000 f8b1 	bl	80007e4 <MX_GPIO_Init>

	// Enable CYCCNT
	DWT_CTRL |= (1 << 0);
 8000682:	4b23      	ldr	r3, [pc, #140]	@ (8000710 <main+0xa0>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a22      	ldr	r2, [pc, #136]	@ (8000710 <main+0xa0>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6013      	str	r3, [r2, #0]

	SEGGER_SYSVIEW_Conf();
 800068e:	f004 fa63 	bl	8004b58 <SEGGER_SYSVIEW_Conf>

	SEGGER_SYSVIEW_Start();
 8000692:	f005 fdcf 	bl	8006234 <SEGGER_SYSVIEW_Start>

	status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	9301      	str	r3, [sp, #4]
 800069c:	2302      	movs	r3, #2
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000714 <main+0xa4>)
 80006a2:	22c8      	movs	r2, #200	@ 0xc8
 80006a4:	491c      	ldr	r1, [pc, #112]	@ (8000718 <main+0xa8>)
 80006a6:	481d      	ldr	r0, [pc, #116]	@ (800071c <main+0xac>)
 80006a8:	f002 fa6d 	bl	8002b86 <xTaskCreate>
 80006ac:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d00d      	beq.n	80006d0 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80006b4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80006b8:	b672      	cpsid	i
 80006ba:	f383 8811 	msr	BASEPRI, r3
 80006be:	f3bf 8f6f 	isb	sy
 80006c2:	f3bf 8f4f 	dsb	sy
 80006c6:	b662      	cpsie	i
 80006c8:	613b      	str	r3, [r7, #16]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006ca:	bf00      	nop
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <main+0x5c>
	status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	9301      	str	r3, [sp, #4]
 80006d4:	2302      	movs	r3, #2
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <main+0xb0>)
 80006da:	22c8      	movs	r2, #200	@ 0xc8
 80006dc:	4911      	ldr	r1, [pc, #68]	@ (8000724 <main+0xb4>)
 80006de:	4812      	ldr	r0, [pc, #72]	@ (8000728 <main+0xb8>)
 80006e0:	f002 fa51 	bl	8002b86 <xTaskCreate>
 80006e4:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d00d      	beq.n	8000708 <main+0x98>
        __asm volatile
 80006ec:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80006f0:	b672      	cpsid	i
 80006f2:	f383 8811 	msr	BASEPRI, r3
 80006f6:	f3bf 8f6f 	isb	sy
 80006fa:	f3bf 8f4f 	dsb	sy
 80006fe:	b662      	cpsie	i
 8000700:	60fb      	str	r3, [r7, #12]
    }
 8000702:	bf00      	nop
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <main+0x94>


	// start the FreeRTOS Scheduler

	vTaskStartScheduler();
 8000708:	f002 fbbe 	bl	8002e88 <vTaskStartScheduler>



	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <main+0x9c>
 8000710:	e0001000 	.word	0xe0001000
 8000714:	08007db8 	.word	0x08007db8
 8000718:	08007dd0 	.word	0x08007dd0
 800071c:	08000a11 	.word	0x08000a11
 8000720:	08007dd8 	.word	0x08007dd8
 8000724:	08007df0 	.word	0x08007df0
 8000728:	08000a4d 	.word	0x08000a4d

0800072c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b094      	sub	sp, #80	@ 0x50
 8000730:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	2234      	movs	r2, #52	@ 0x34
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f006 fd42 	bl	80071c4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000750:	4b22      	ldr	r3, [pc, #136]	@ (80007dc <SystemClock_Config+0xb0>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000754:	4a21      	ldr	r2, [pc, #132]	@ (80007dc <SystemClock_Config+0xb0>)
 8000756:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800075a:	6413      	str	r3, [r2, #64]	@ 0x40
 800075c:	4b1f      	ldr	r3, [pc, #124]	@ (80007dc <SystemClock_Config+0xb0>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000768:	4b1d      	ldr	r3, [pc, #116]	@ (80007e0 <SystemClock_Config+0xb4>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000770:	4a1b      	ldr	r2, [pc, #108]	@ (80007e0 <SystemClock_Config+0xb4>)
 8000772:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	4b19      	ldr	r3, [pc, #100]	@ (80007e0 <SystemClock_Config+0xb4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000784:	2302      	movs	r3, #2
 8000786:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000788:	2301      	movs	r3, #1
 800078a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078c:	2310      	movs	r3, #16
 800078e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000790:	2300      	movs	r3, #0
 8000792:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 031c 	add.w	r3, r7, #28
 8000798:	4618      	mov	r0, r3
 800079a:	f000 fdb1 	bl	8001300 <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x7c>
	{
		Error_Handler();
 80007a4:	f000 f980 	bl	8000aa8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	230f      	movs	r3, #15
 80007aa:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007be:	f107 0308 	add.w	r3, r7, #8
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f001 f849 	bl	800185c <HAL_RCC_ClockConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0xa8>
	{
		Error_Handler();
 80007d0:	f000 f96a 	bl	8000aa8 <Error_Handler>
	}
}
 80007d4:	bf00      	nop
 80007d6:	3750      	adds	r7, #80	@ 0x50
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40007000 	.word	0x40007000

080007e4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08c      	sub	sp, #48	@ 0x30
 80007e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	4b7f      	ldr	r3, [pc, #508]	@ (80009f8 <MX_GPIO_Init+0x214>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a7e      	ldr	r2, [pc, #504]	@ (80009f8 <MX_GPIO_Init+0x214>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b7c      	ldr	r3, [pc, #496]	@ (80009f8 <MX_GPIO_Init+0x214>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	61bb      	str	r3, [r7, #24]
 8000810:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000812:	4b79      	ldr	r3, [pc, #484]	@ (80009f8 <MX_GPIO_Init+0x214>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a78      	ldr	r2, [pc, #480]	@ (80009f8 <MX_GPIO_Init+0x214>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b76      	ldr	r3, [pc, #472]	@ (80009f8 <MX_GPIO_Init+0x214>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	4b73      	ldr	r3, [pc, #460]	@ (80009f8 <MX_GPIO_Init+0x214>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a72      	ldr	r2, [pc, #456]	@ (80009f8 <MX_GPIO_Init+0x214>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b70      	ldr	r3, [pc, #448]	@ (80009f8 <MX_GPIO_Init+0x214>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	4b6d      	ldr	r3, [pc, #436]	@ (80009f8 <MX_GPIO_Init+0x214>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a6c      	ldr	r2, [pc, #432]	@ (80009f8 <MX_GPIO_Init+0x214>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b6a      	ldr	r3, [pc, #424]	@ (80009f8 <MX_GPIO_Init+0x214>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800085a:	4b67      	ldr	r3, [pc, #412]	@ (80009f8 <MX_GPIO_Init+0x214>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a66      	ldr	r2, [pc, #408]	@ (80009f8 <MX_GPIO_Init+0x214>)
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b64      	ldr	r3, [pc, #400]	@ (80009f8 <MX_GPIO_Init+0x214>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0308 	and.w	r3, r3, #8
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000872:	4b61      	ldr	r3, [pc, #388]	@ (80009f8 <MX_GPIO_Init+0x214>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a60      	ldr	r2, [pc, #384]	@ (80009f8 <MX_GPIO_Init+0x214>)
 8000878:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b5e      	ldr	r3, [pc, #376]	@ (80009f8 <MX_GPIO_Init+0x214>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000890:	485a      	ldr	r0, [pc, #360]	@ (80009fc <MX_GPIO_Init+0x218>)
 8000892:	f000 fd1b 	bl	80012cc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2140      	movs	r1, #64	@ 0x40
 800089a:	4859      	ldr	r0, [pc, #356]	@ (8000a00 <MX_GPIO_Init+0x21c>)
 800089c:	f000 fd16 	bl	80012cc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008a4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008aa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4853      	ldr	r0, [pc, #332]	@ (8000a04 <MX_GPIO_Init+0x220>)
 80008b8:	f000 fb5c 	bl	8000f74 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008bc:	2332      	movs	r3, #50	@ 0x32
 80008be:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c8:	2303      	movs	r3, #3
 80008ca:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008cc:	230b      	movs	r3, #11
 80008ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	484b      	ldr	r0, [pc, #300]	@ (8000a04 <MX_GPIO_Init+0x220>)
 80008d8:	f000 fb4c 	bl	8000f74 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008dc:	2386      	movs	r3, #134	@ 0x86
 80008de:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e8:	2303      	movs	r3, #3
 80008ea:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008ec:	230b      	movs	r3, #11
 80008ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4844      	ldr	r0, [pc, #272]	@ (8000a08 <MX_GPIO_Init+0x224>)
 80008f8:	f000 fb3c 	bl	8000f74 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008fc:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000900:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	4839      	ldr	r0, [pc, #228]	@ (80009fc <MX_GPIO_Init+0x218>)
 8000916:	f000 fb2d 	bl	8000f74 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800091a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800091e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000928:	2303      	movs	r3, #3
 800092a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800092c:	230b      	movs	r3, #11
 800092e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4831      	ldr	r0, [pc, #196]	@ (80009fc <MX_GPIO_Init+0x218>)
 8000938:	f000 fb1c 	bl	8000f74 <HAL_GPIO_Init>

	/*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
	GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800093c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000940:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094a:	2303      	movs	r3, #3
 800094c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800094e:	2307      	movs	r3, #7
 8000950:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	482c      	ldr	r0, [pc, #176]	@ (8000a0c <MX_GPIO_Init+0x228>)
 800095a:	f000 fb0b 	bl	8000f74 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800095e:	2340      	movs	r3, #64	@ 0x40
 8000960:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4822      	ldr	r0, [pc, #136]	@ (8000a00 <MX_GPIO_Init+0x21c>)
 8000976:	f000 fafd 	bl	8000f74 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800097a:	2380      	movs	r3, #128	@ 0x80
 800097c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	481c      	ldr	r0, [pc, #112]	@ (8000a00 <MX_GPIO_Init+0x21c>)
 800098e:	f000 faf1 	bl	8000f74 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000992:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000996:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000998:	2302      	movs	r3, #2
 800099a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a0:	2303      	movs	r3, #3
 80009a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009a4:	230a      	movs	r3, #10
 80009a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4816      	ldr	r0, [pc, #88]	@ (8000a08 <MX_GPIO_Init+0x224>)
 80009b0:	f000 fae0 	bl	8000f74 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009b8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ba:	2300      	movs	r3, #0
 80009bc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	480f      	ldr	r0, [pc, #60]	@ (8000a08 <MX_GPIO_Init+0x224>)
 80009ca:	f000 fad3 	bl	8000f74 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009ce:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80009d2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009dc:	2303      	movs	r3, #3
 80009de:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009e0:	230b      	movs	r3, #11
 80009e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <MX_GPIO_Init+0x21c>)
 80009ec:	f000 fac2 	bl	8000f74 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80009f0:	bf00      	nop
 80009f2:	3730      	adds	r7, #48	@ 0x30
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020400 	.word	0x40020400
 8000a00:	40021800 	.word	0x40021800
 8000a04:	40020800 	.word	0x40020800
 8000a08:	40020000 	.word	0x40020000
 8000a0c:	40020c00 	.word	0x40020c00

08000a10 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b09c      	sub	sp, #112	@ 0x70
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000a18:	f107 000c 	add.w	r0, r7, #12
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a09      	ldr	r2, [pc, #36]	@ (8000a44 <task1_handler+0x34>)
 8000a20:	2164      	movs	r1, #100	@ 0x64
 8000a22:	f006 fab3 	bl	8006f8c <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f006 f90c 	bl	8006c48 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000a30:	4b05      	ldr	r3, [pc, #20]	@ (8000a48 <task1_handler+0x38>)
 8000a32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	f3bf 8f4f 	dsb	sy
 8000a3c:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000a40:	bf00      	nop
 8000a42:	e7e9      	b.n	8000a18 <task1_handler+0x8>
 8000a44:	08007df8 	.word	0x08007df8
 8000a48:	e000ed04 	.word	0xe000ed04

08000a4c <task2_handler>:
	}
}

static void task2_handler(void* parameters)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b09c      	sub	sp, #112	@ 0x70
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000a54:	f107 000c 	add.w	r0, r7, #12
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a08      	ldr	r2, [pc, #32]	@ (8000a7c <task2_handler+0x30>)
 8000a5c:	2164      	movs	r1, #100	@ 0x64
 8000a5e:	f006 fa95 	bl	8006f8c <sniprintf>
		printf("%s\n", (char*)parameters);
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f006 fa8a 	bl	8006f7c <puts>
		taskYIELD();
 8000a68:	4b05      	ldr	r3, [pc, #20]	@ (8000a80 <task2_handler+0x34>)
 8000a6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	f3bf 8f4f 	dsb	sy
 8000a74:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000a78:	bf00      	nop
 8000a7a:	e7eb      	b.n	8000a54 <task2_handler+0x8>
 8000a7c:	08007df8 	.word	0x08007df8
 8000a80:	e000ed04 	.word	0xe000ed04

08000a84 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a04      	ldr	r2, [pc, #16]	@ (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d101      	bne.n	8000a9a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000a96:	f000 f96b 	bl	8000d70 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40001000 	.word	0x40001000

08000aa8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <Error_Handler+0x8>

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <HAL_MspInit+0x44>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abe:	4a0e      	ldr	r2, [pc, #56]	@ (8000af8 <HAL_MspInit+0x44>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <HAL_MspInit+0x44>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <HAL_MspInit+0x44>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad6:	4a08      	ldr	r2, [pc, #32]	@ (8000af8 <HAL_MspInit+0x44>)
 8000ad8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ade:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <HAL_MspInit+0x44>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000aea:	f003 fc7d 	bl	80043e8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800

08000afc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08e      	sub	sp, #56	@ 0x38
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b0c:	4b33      	ldr	r3, [pc, #204]	@ (8000bdc <HAL_InitTick+0xe0>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b10:	4a32      	ldr	r2, [pc, #200]	@ (8000bdc <HAL_InitTick+0xe0>)
 8000b12:	f043 0310 	orr.w	r3, r3, #16
 8000b16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b18:	4b30      	ldr	r3, [pc, #192]	@ (8000bdc <HAL_InitTick+0xe0>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1c:	f003 0310 	and.w	r3, r3, #16
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b24:	f107 0210 	add.w	r2, r7, #16
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f001 f8a4 	bl	8001c7c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b34:	6a3b      	ldr	r3, [r7, #32]
 8000b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d103      	bne.n	8000b46 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b3e:	f001 f889 	bl	8001c54 <HAL_RCC_GetPCLK1Freq>
 8000b42:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b44:	e004      	b.n	8000b50 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b46:	f001 f885 	bl	8001c54 <HAL_RCC_GetPCLK1Freq>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b52:	4a23      	ldr	r2, [pc, #140]	@ (8000be0 <HAL_InitTick+0xe4>)
 8000b54:	fba2 2303 	umull	r2, r3, r2, r3
 8000b58:	0c9b      	lsrs	r3, r3, #18
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b5e:	4b21      	ldr	r3, [pc, #132]	@ (8000be4 <HAL_InitTick+0xe8>)
 8000b60:	4a21      	ldr	r2, [pc, #132]	@ (8000be8 <HAL_InitTick+0xec>)
 8000b62:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b64:	4b1f      	ldr	r3, [pc, #124]	@ (8000be4 <HAL_InitTick+0xe8>)
 8000b66:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b6a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000be4 <HAL_InitTick+0xe8>)
 8000b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b70:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b72:	4b1c      	ldr	r3, [pc, #112]	@ (8000be4 <HAL_InitTick+0xe8>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b78:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <HAL_InitTick+0xe8>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7e:	4b19      	ldr	r3, [pc, #100]	@ (8000be4 <HAL_InitTick+0xe8>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b84:	4817      	ldr	r0, [pc, #92]	@ (8000be4 <HAL_InitTick+0xe8>)
 8000b86:	f001 f8ab 	bl	8001ce0 <HAL_TIM_Base_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d11b      	bne.n	8000bd0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b98:	4812      	ldr	r0, [pc, #72]	@ (8000be4 <HAL_InitTick+0xe8>)
 8000b9a:	f001 f903 	bl	8001da4 <HAL_TIM_Base_Start_IT>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000ba4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d111      	bne.n	8000bd0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bac:	2036      	movs	r0, #54	@ 0x36
 8000bae:	f000 f9d3 	bl	8000f58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b0f      	cmp	r3, #15
 8000bb6:	d808      	bhi.n	8000bca <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	2036      	movs	r0, #54	@ 0x36
 8000bbe:	f000 f9af 	bl	8000f20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bec <HAL_InitTick+0xf0>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	e002      	b.n	8000bd0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bd0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3738      	adds	r7, #56	@ 0x38
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	431bde83 	.word	0x431bde83
 8000be4:	2000008c 	.word	0x2000008c
 8000be8:	40001000 	.word	0x40001000
 8000bec:	20000004 	.word	0x20000004

08000bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <NMI_Handler+0x4>

08000bf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <MemManage_Handler+0x4>

08000c08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c2c:	4802      	ldr	r0, [pc, #8]	@ (8000c38 <TIM6_DAC_IRQHandler+0x10>)
 8000c2e:	f001 f931 	bl	8001e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2000008c 	.word	0x2000008c

08000c3c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	e00a      	b.n	8000c64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c4e:	f3af 8000 	nop.w
 8000c52:	4601      	mov	r1, r0
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	1c5a      	adds	r2, r3, #1
 8000c58:	60ba      	str	r2, [r7, #8]
 8000c5a:	b2ca      	uxtb	r2, r1
 8000c5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	3301      	adds	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	dbf0      	blt.n	8000c4e <_read+0x12>
  }

  return len;
 8000c6c:	687b      	ldr	r3, [r7, #4]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c9e:	605a      	str	r2, [r3, #4]
  return 0;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <_isatty>:

int _isatty(int file)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cb6:	2301      	movs	r3, #1
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
	...

08000ce0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce4:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <SystemInit+0x20>)
 8000ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cea:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <SystemInit+0x20>)
 8000cec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d08:	480d      	ldr	r0, [pc, #52]	@ (8000d40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d0a:	490e      	ldr	r1, [pc, #56]	@ (8000d44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d0c:	4a0e      	ldr	r2, [pc, #56]	@ (8000d48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d10:	e002      	b.n	8000d18 <LoopCopyDataInit>

08000d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d16:	3304      	adds	r3, #4

08000d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d1c:	d3f9      	bcc.n	8000d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d20:	4c0b      	ldr	r4, [pc, #44]	@ (8000d50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d24:	e001      	b.n	8000d2a <LoopFillZerobss>

08000d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d28:	3204      	adds	r2, #4

08000d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d2c:	d3fb      	bcc.n	8000d26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d2e:	f7ff ffd7 	bl	8000ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d32:	f006 fa83 	bl	800723c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d36:	f7ff fc9b 	bl	8000670 <main>
  bx  lr    
 8000d3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d3c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d44:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d48:	08007f7c 	.word	0x08007f7c
  ldr r2, =_sbss
 8000d4c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d50:	2000d248 	.word	0x2000d248

08000d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d54:	e7fe      	b.n	8000d54 <ADC_IRQHandler>

08000d56 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d5a:	2003      	movs	r0, #3
 8000d5c:	f000 f8d5 	bl	8000f0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d60:	200f      	movs	r0, #15
 8000d62:	f7ff fecb 	bl	8000afc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d66:	f7ff fea5 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d74:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <HAL_IncTick+0x20>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <HAL_IncTick+0x24>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a04      	ldr	r2, [pc, #16]	@ (8000d94 <HAL_IncTick+0x24>)
 8000d82:	6013      	str	r3, [r2, #0]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000008 	.word	0x20000008
 8000d94:	200000d8 	.word	0x200000d8

08000d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d9c:	4b03      	ldr	r3, [pc, #12]	@ (8000dac <HAL_GetTick+0x14>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	200000d8 	.word	0x200000d8

08000db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <__NVIC_SetPriorityGrouping+0x40>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dde:	4a04      	ldr	r2, [pc, #16]	@ (8000df0 <__NVIC_SetPriorityGrouping+0x40>)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	60d3      	str	r3, [r2, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00
 8000df4:	05fa0000 	.word	0x05fa0000

08000df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dfc:	4b04      	ldr	r3, [pc, #16]	@ (8000e10 <__NVIC_GetPriorityGrouping+0x18>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	0a1b      	lsrs	r3, r3, #8
 8000e02:	f003 0307 	and.w	r3, r3, #7
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	db0b      	blt.n	8000e3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	f003 021f 	and.w	r2, r3, #31
 8000e2c:	4907      	ldr	r1, [pc, #28]	@ (8000e4c <__NVIC_EnableIRQ+0x38>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	095b      	lsrs	r3, r3, #5
 8000e34:	2001      	movs	r0, #1
 8000e36:	fa00 f202 	lsl.w	r2, r0, r2
 8000e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000e100 	.word	0xe000e100

08000e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	6039      	str	r1, [r7, #0]
 8000e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	db0a      	blt.n	8000e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	490c      	ldr	r1, [pc, #48]	@ (8000e9c <__NVIC_SetPriority+0x4c>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	0112      	lsls	r2, r2, #4
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	440b      	add	r3, r1
 8000e74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e78:	e00a      	b.n	8000e90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4908      	ldr	r1, [pc, #32]	@ (8000ea0 <__NVIC_SetPriority+0x50>)
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	f003 030f 	and.w	r3, r3, #15
 8000e86:	3b04      	subs	r3, #4
 8000e88:	0112      	lsls	r2, r2, #4
 8000e8a:	b2d2      	uxtb	r2, r2
 8000e8c:	440b      	add	r3, r1
 8000e8e:	761a      	strb	r2, [r3, #24]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000e100 	.word	0xe000e100
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b089      	sub	sp, #36	@ 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f1c3 0307 	rsb	r3, r3, #7
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	bf28      	it	cs
 8000ec2:	2304      	movcs	r3, #4
 8000ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3304      	adds	r3, #4
 8000eca:	2b06      	cmp	r3, #6
 8000ecc:	d902      	bls.n	8000ed4 <NVIC_EncodePriority+0x30>
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3b03      	subs	r3, #3
 8000ed2:	e000      	b.n	8000ed6 <NVIC_EncodePriority+0x32>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43da      	mvns	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef6:	43d9      	mvns	r1, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	4313      	orrs	r3, r2
         );
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3724      	adds	r7, #36	@ 0x24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff ff4c 	bl	8000db0 <__NVIC_SetPriorityGrouping>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
 8000f2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f32:	f7ff ff61 	bl	8000df8 <__NVIC_GetPriorityGrouping>
 8000f36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	68b9      	ldr	r1, [r7, #8]
 8000f3c:	6978      	ldr	r0, [r7, #20]
 8000f3e:	f7ff ffb1 	bl	8000ea4 <NVIC_EncodePriority>
 8000f42:	4602      	mov	r2, r0
 8000f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f48:	4611      	mov	r1, r2
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ff80 	bl	8000e50 <__NVIC_SetPriority>
}
 8000f50:	bf00      	nop
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ff54 	bl	8000e14 <__NVIC_EnableIRQ>
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	@ 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	e175      	b.n	8001280 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f94:	2201      	movs	r2, #1
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	f040 8164 	bne.w	800127a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d005      	beq.n	8000fca <HAL_GPIO_Init+0x56>
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d130      	bne.n	800102c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	68da      	ldr	r2, [r3, #12]
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001000:	2201      	movs	r2, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	091b      	lsrs	r3, r3, #4
 8001016:	f003 0201 	and.w	r2, r3, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b03      	cmp	r3, #3
 8001036:	d017      	beq.n	8001068 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	2203      	movs	r2, #3
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d123      	bne.n	80010bc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	08da      	lsrs	r2, r3, #3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3208      	adds	r2, #8
 800107c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	f003 0307 	and.w	r3, r3, #7
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	220f      	movs	r2, #15
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	691a      	ldr	r2, [r3, #16]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	08da      	lsrs	r2, r3, #3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3208      	adds	r2, #8
 80010b6:	69b9      	ldr	r1, [r7, #24]
 80010b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0203 	and.w	r2, r3, #3
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f000 80be 	beq.w	800127a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	4b66      	ldr	r3, [pc, #408]	@ (8001298 <HAL_GPIO_Init+0x324>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001102:	4a65      	ldr	r2, [pc, #404]	@ (8001298 <HAL_GPIO_Init+0x324>)
 8001104:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001108:	6453      	str	r3, [r2, #68]	@ 0x44
 800110a:	4b63      	ldr	r3, [pc, #396]	@ (8001298 <HAL_GPIO_Init+0x324>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001116:	4a61      	ldr	r2, [pc, #388]	@ (800129c <HAL_GPIO_Init+0x328>)
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	3302      	adds	r3, #2
 800111e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	220f      	movs	r2, #15
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a58      	ldr	r2, [pc, #352]	@ (80012a0 <HAL_GPIO_Init+0x32c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d037      	beq.n	80011b2 <HAL_GPIO_Init+0x23e>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a57      	ldr	r2, [pc, #348]	@ (80012a4 <HAL_GPIO_Init+0x330>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d031      	beq.n	80011ae <HAL_GPIO_Init+0x23a>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a56      	ldr	r2, [pc, #344]	@ (80012a8 <HAL_GPIO_Init+0x334>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d02b      	beq.n	80011aa <HAL_GPIO_Init+0x236>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a55      	ldr	r2, [pc, #340]	@ (80012ac <HAL_GPIO_Init+0x338>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d025      	beq.n	80011a6 <HAL_GPIO_Init+0x232>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a54      	ldr	r2, [pc, #336]	@ (80012b0 <HAL_GPIO_Init+0x33c>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d01f      	beq.n	80011a2 <HAL_GPIO_Init+0x22e>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a53      	ldr	r2, [pc, #332]	@ (80012b4 <HAL_GPIO_Init+0x340>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d019      	beq.n	800119e <HAL_GPIO_Init+0x22a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a52      	ldr	r2, [pc, #328]	@ (80012b8 <HAL_GPIO_Init+0x344>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d013      	beq.n	800119a <HAL_GPIO_Init+0x226>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a51      	ldr	r2, [pc, #324]	@ (80012bc <HAL_GPIO_Init+0x348>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d00d      	beq.n	8001196 <HAL_GPIO_Init+0x222>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a50      	ldr	r2, [pc, #320]	@ (80012c0 <HAL_GPIO_Init+0x34c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d007      	beq.n	8001192 <HAL_GPIO_Init+0x21e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4f      	ldr	r2, [pc, #316]	@ (80012c4 <HAL_GPIO_Init+0x350>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d101      	bne.n	800118e <HAL_GPIO_Init+0x21a>
 800118a:	2309      	movs	r3, #9
 800118c:	e012      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 800118e:	230a      	movs	r3, #10
 8001190:	e010      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 8001192:	2308      	movs	r3, #8
 8001194:	e00e      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 8001196:	2307      	movs	r3, #7
 8001198:	e00c      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 800119a:	2306      	movs	r3, #6
 800119c:	e00a      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 800119e:	2305      	movs	r3, #5
 80011a0:	e008      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 80011a2:	2304      	movs	r3, #4
 80011a4:	e006      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 80011a6:	2303      	movs	r3, #3
 80011a8:	e004      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 80011aa:	2302      	movs	r3, #2
 80011ac:	e002      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 80011ae:	2301      	movs	r3, #1
 80011b0:	e000      	b.n	80011b4 <HAL_GPIO_Init+0x240>
 80011b2:	2300      	movs	r3, #0
 80011b4:	69fa      	ldr	r2, [r7, #28]
 80011b6:	f002 0203 	and.w	r2, r2, #3
 80011ba:	0092      	lsls	r2, r2, #2
 80011bc:	4093      	lsls	r3, r2
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80011c4:	4935      	ldr	r1, [pc, #212]	@ (800129c <HAL_GPIO_Init+0x328>)
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	089b      	lsrs	r3, r3, #2
 80011ca:	3302      	adds	r3, #2
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011d2:	4b3d      	ldr	r3, [pc, #244]	@ (80012c8 <HAL_GPIO_Init+0x354>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011f6:	4a34      	ldr	r2, [pc, #208]	@ (80012c8 <HAL_GPIO_Init+0x354>)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011fc:	4b32      	ldr	r3, [pc, #200]	@ (80012c8 <HAL_GPIO_Init+0x354>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001220:	4a29      	ldr	r2, [pc, #164]	@ (80012c8 <HAL_GPIO_Init+0x354>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001226:	4b28      	ldr	r3, [pc, #160]	@ (80012c8 <HAL_GPIO_Init+0x354>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800124a:	4a1f      	ldr	r2, [pc, #124]	@ (80012c8 <HAL_GPIO_Init+0x354>)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001250:	4b1d      	ldr	r3, [pc, #116]	@ (80012c8 <HAL_GPIO_Init+0x354>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001274:	4a14      	ldr	r2, [pc, #80]	@ (80012c8 <HAL_GPIO_Init+0x354>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3301      	adds	r3, #1
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	2b0f      	cmp	r3, #15
 8001284:	f67f ae86 	bls.w	8000f94 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3724      	adds	r7, #36	@ 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800
 800129c:	40013800 	.word	0x40013800
 80012a0:	40020000 	.word	0x40020000
 80012a4:	40020400 	.word	0x40020400
 80012a8:	40020800 	.word	0x40020800
 80012ac:	40020c00 	.word	0x40020c00
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40021400 	.word	0x40021400
 80012b8:	40021800 	.word	0x40021800
 80012bc:	40021c00 	.word	0x40021c00
 80012c0:	40022000 	.word	0x40022000
 80012c4:	40022400 	.word	0x40022400
 80012c8:	40013c00 	.word	0x40013c00

080012cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
 80012d8:	4613      	mov	r3, r2
 80012da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012dc:	787b      	ldrb	r3, [r7, #1]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012e2:	887a      	ldrh	r2, [r7, #2]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80012e8:	e003      	b.n	80012f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80012ea:	887b      	ldrh	r3, [r7, #2]
 80012ec:	041a      	lsls	r2, r3, #16
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	619a      	str	r2, [r3, #24]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001308:	2300      	movs	r3, #0
 800130a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e29b      	b.n	800184e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b00      	cmp	r3, #0
 8001320:	f000 8087 	beq.w	8001432 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001324:	4b96      	ldr	r3, [pc, #600]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 030c 	and.w	r3, r3, #12
 800132c:	2b04      	cmp	r3, #4
 800132e:	d00c      	beq.n	800134a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001330:	4b93      	ldr	r3, [pc, #588]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 030c 	and.w	r3, r3, #12
 8001338:	2b08      	cmp	r3, #8
 800133a:	d112      	bne.n	8001362 <HAL_RCC_OscConfig+0x62>
 800133c:	4b90      	ldr	r3, [pc, #576]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001344:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001348:	d10b      	bne.n	8001362 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134a:	4b8d      	ldr	r3, [pc, #564]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d06c      	beq.n	8001430 <HAL_RCC_OscConfig+0x130>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d168      	bne.n	8001430 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e275      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800136a:	d106      	bne.n	800137a <HAL_RCC_OscConfig+0x7a>
 800136c:	4b84      	ldr	r3, [pc, #528]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a83      	ldr	r2, [pc, #524]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 8001372:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	e02e      	b.n	80013d8 <HAL_RCC_OscConfig+0xd8>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10c      	bne.n	800139c <HAL_RCC_OscConfig+0x9c>
 8001382:	4b7f      	ldr	r3, [pc, #508]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a7e      	ldr	r2, [pc, #504]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 8001388:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	4b7c      	ldr	r3, [pc, #496]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a7b      	ldr	r2, [pc, #492]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 8001394:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e01d      	b.n	80013d8 <HAL_RCC_OscConfig+0xd8>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013a4:	d10c      	bne.n	80013c0 <HAL_RCC_OscConfig+0xc0>
 80013a6:	4b76      	ldr	r3, [pc, #472]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a75      	ldr	r2, [pc, #468]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 80013ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	4b73      	ldr	r3, [pc, #460]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a72      	ldr	r2, [pc, #456]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 80013b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	e00b      	b.n	80013d8 <HAL_RCC_OscConfig+0xd8>
 80013c0:	4b6f      	ldr	r3, [pc, #444]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a6e      	ldr	r2, [pc, #440]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 80013c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	4b6c      	ldr	r3, [pc, #432]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a6b      	ldr	r2, [pc, #428]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 80013d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d013      	beq.n	8001408 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e0:	f7ff fcda 	bl	8000d98 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e8:	f7ff fcd6 	bl	8000d98 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b64      	cmp	r3, #100	@ 0x64
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e229      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fa:	4b61      	ldr	r3, [pc, #388]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f0      	beq.n	80013e8 <HAL_RCC_OscConfig+0xe8>
 8001406:	e014      	b.n	8001432 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001408:	f7ff fcc6 	bl	8000d98 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001410:	f7ff fcc2 	bl	8000d98 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b64      	cmp	r3, #100	@ 0x64
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e215      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001422:	4b57      	ldr	r3, [pc, #348]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0x110>
 800142e:	e000      	b.n	8001432 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d069      	beq.n	8001512 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800143e:	4b50      	ldr	r3, [pc, #320]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00b      	beq.n	8001462 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800144a:	4b4d      	ldr	r3, [pc, #308]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	2b08      	cmp	r3, #8
 8001454:	d11c      	bne.n	8001490 <HAL_RCC_OscConfig+0x190>
 8001456:	4b4a      	ldr	r3, [pc, #296]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d116      	bne.n	8001490 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001462:	4b47      	ldr	r3, [pc, #284]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d005      	beq.n	800147a <HAL_RCC_OscConfig+0x17a>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d001      	beq.n	800147a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e1e9      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147a:	4b41      	ldr	r3, [pc, #260]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	493d      	ldr	r1, [pc, #244]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 800148a:	4313      	orrs	r3, r2
 800148c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800148e:	e040      	b.n	8001512 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d023      	beq.n	80014e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001498:	4b39      	ldr	r3, [pc, #228]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a38      	ldr	r2, [pc, #224]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a4:	f7ff fc78 	bl	8000d98 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ac:	f7ff fc74 	bl	8000d98 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e1c7      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014be:	4b30      	ldr	r3, [pc, #192]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	4929      	ldr	r1, [pc, #164]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	600b      	str	r3, [r1, #0]
 80014de:	e018      	b.n	8001512 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014e0:	4b27      	ldr	r3, [pc, #156]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a26      	ldr	r2, [pc, #152]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 80014e6:	f023 0301 	bic.w	r3, r3, #1
 80014ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ec:	f7ff fc54 	bl	8000d98 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f4:	f7ff fc50 	bl	8000d98 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e1a3      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001506:	4b1e      	ldr	r3, [pc, #120]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	2b00      	cmp	r3, #0
 800151c:	d038      	beq.n	8001590 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d019      	beq.n	800155a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001526:	4b16      	ldr	r3, [pc, #88]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 8001528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800152a:	4a15      	ldr	r2, [pc, #84]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001532:	f7ff fc31 	bl	8000d98 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800153a:	f7ff fc2d 	bl	8000d98 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e180      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154c:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 800154e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x23a>
 8001558:	e01a      	b.n	8001590 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800155a:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 800155c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800155e:	4a08      	ldr	r2, [pc, #32]	@ (8001580 <HAL_RCC_OscConfig+0x280>)
 8001560:	f023 0301 	bic.w	r3, r3, #1
 8001564:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001566:	f7ff fc17 	bl	8000d98 <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800156c:	e00a      	b.n	8001584 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800156e:	f7ff fc13 	bl	8000d98 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d903      	bls.n	8001584 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e166      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
 8001580:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001584:	4b92      	ldr	r3, [pc, #584]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001586:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1ee      	bne.n	800156e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80a4 	beq.w	80016e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800159e:	4b8c      	ldr	r3, [pc, #560]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10d      	bne.n	80015c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	4b89      	ldr	r3, [pc, #548]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	4a88      	ldr	r2, [pc, #544]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b6:	4b86      	ldr	r3, [pc, #536]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015c2:	2301      	movs	r3, #1
 80015c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015c6:	4b83      	ldr	r3, [pc, #524]	@ (80017d4 <HAL_RCC_OscConfig+0x4d4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d118      	bne.n	8001604 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80015d2:	4b80      	ldr	r3, [pc, #512]	@ (80017d4 <HAL_RCC_OscConfig+0x4d4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a7f      	ldr	r2, [pc, #508]	@ (80017d4 <HAL_RCC_OscConfig+0x4d4>)
 80015d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015de:	f7ff fbdb 	bl	8000d98 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015e6:	f7ff fbd7 	bl	8000d98 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b64      	cmp	r3, #100	@ 0x64
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e12a      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015f8:	4b76      	ldr	r3, [pc, #472]	@ (80017d4 <HAL_RCC_OscConfig+0x4d4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d106      	bne.n	800161a <HAL_RCC_OscConfig+0x31a>
 800160c:	4b70      	ldr	r3, [pc, #448]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 800160e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001610:	4a6f      	ldr	r2, [pc, #444]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	6713      	str	r3, [r2, #112]	@ 0x70
 8001618:	e02d      	b.n	8001676 <HAL_RCC_OscConfig+0x376>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10c      	bne.n	800163c <HAL_RCC_OscConfig+0x33c>
 8001622:	4b6b      	ldr	r3, [pc, #428]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001626:	4a6a      	ldr	r2, [pc, #424]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001628:	f023 0301 	bic.w	r3, r3, #1
 800162c:	6713      	str	r3, [r2, #112]	@ 0x70
 800162e:	4b68      	ldr	r3, [pc, #416]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001632:	4a67      	ldr	r2, [pc, #412]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001634:	f023 0304 	bic.w	r3, r3, #4
 8001638:	6713      	str	r3, [r2, #112]	@ 0x70
 800163a:	e01c      	b.n	8001676 <HAL_RCC_OscConfig+0x376>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b05      	cmp	r3, #5
 8001642:	d10c      	bne.n	800165e <HAL_RCC_OscConfig+0x35e>
 8001644:	4b62      	ldr	r3, [pc, #392]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001648:	4a61      	ldr	r2, [pc, #388]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 800164a:	f043 0304 	orr.w	r3, r3, #4
 800164e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001650:	4b5f      	ldr	r3, [pc, #380]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001654:	4a5e      	ldr	r2, [pc, #376]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6713      	str	r3, [r2, #112]	@ 0x70
 800165c:	e00b      	b.n	8001676 <HAL_RCC_OscConfig+0x376>
 800165e:	4b5c      	ldr	r3, [pc, #368]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001662:	4a5b      	ldr	r2, [pc, #364]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001664:	f023 0301 	bic.w	r3, r3, #1
 8001668:	6713      	str	r3, [r2, #112]	@ 0x70
 800166a:	4b59      	ldr	r3, [pc, #356]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 800166c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800166e:	4a58      	ldr	r2, [pc, #352]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001670:	f023 0304 	bic.w	r3, r3, #4
 8001674:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d015      	beq.n	80016aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167e:	f7ff fb8b 	bl	8000d98 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001684:	e00a      	b.n	800169c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001686:	f7ff fb87 	bl	8000d98 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001694:	4293      	cmp	r3, r2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e0d8      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169c:	4b4c      	ldr	r3, [pc, #304]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 800169e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0ee      	beq.n	8001686 <HAL_RCC_OscConfig+0x386>
 80016a8:	e014      	b.n	80016d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016aa:	f7ff fb75 	bl	8000d98 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b0:	e00a      	b.n	80016c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b2:	f7ff fb71 	bl	8000d98 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e0c2      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c8:	4b41      	ldr	r3, [pc, #260]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 80016ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1ee      	bne.n	80016b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016d4:	7dfb      	ldrb	r3, [r7, #23]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d105      	bne.n	80016e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016da:	4b3d      	ldr	r3, [pc, #244]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	4a3c      	ldr	r2, [pc, #240]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 80016e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016e4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 80ae 	beq.w	800184c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016f0:	4b37      	ldr	r3, [pc, #220]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 030c 	and.w	r3, r3, #12
 80016f8:	2b08      	cmp	r3, #8
 80016fa:	d06d      	beq.n	80017d8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	2b02      	cmp	r3, #2
 8001702:	d14b      	bne.n	800179c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001704:	4b32      	ldr	r3, [pc, #200]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a31      	ldr	r2, [pc, #196]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 800170a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800170e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001710:	f7ff fb42 	bl	8000d98 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001718:	f7ff fb3e 	bl	8000d98 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e091      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800172a:	4b29      	ldr	r3, [pc, #164]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69da      	ldr	r2, [r3, #28]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001744:	019b      	lsls	r3, r3, #6
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174c:	085b      	lsrs	r3, r3, #1
 800174e:	3b01      	subs	r3, #1
 8001750:	041b      	lsls	r3, r3, #16
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001758:	061b      	lsls	r3, r3, #24
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001760:	071b      	lsls	r3, r3, #28
 8001762:	491b      	ldr	r1, [pc, #108]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001768:	4b19      	ldr	r3, [pc, #100]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a18      	ldr	r2, [pc, #96]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 800176e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001774:	f7ff fb10 	bl	8000d98 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177c:	f7ff fb0c 	bl	8000d98 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e05f      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178e:	4b10      	ldr	r3, [pc, #64]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0x47c>
 800179a:	e057      	b.n	800184c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179c:	4b0c      	ldr	r3, [pc, #48]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0b      	ldr	r2, [pc, #44]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 80017a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff faf6 	bl	8000d98 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b0:	f7ff faf2 	bl	8000d98 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e045      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c2:	4b03      	ldr	r3, [pc, #12]	@ (80017d0 <HAL_RCC_OscConfig+0x4d0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x4b0>
 80017ce:	e03d      	b.n	800184c <HAL_RCC_OscConfig+0x54c>
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80017d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001858 <HAL_RCC_OscConfig+0x558>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d030      	beq.n	8001848 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d129      	bne.n	8001848 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fe:	429a      	cmp	r2, r3
 8001800:	d122      	bne.n	8001848 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001808:	4013      	ands	r3, r2
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800180e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001810:	4293      	cmp	r3, r2
 8001812:	d119      	bne.n	8001848 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800181e:	085b      	lsrs	r3, r3, #1
 8001820:	3b01      	subs	r3, #1
 8001822:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001824:	429a      	cmp	r2, r3
 8001826:	d10f      	bne.n	8001848 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001832:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001834:	429a      	cmp	r2, r3
 8001836:	d107      	bne.n	8001848 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001844:	429a      	cmp	r2, r3
 8001846:	d001      	beq.n	800184c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e000      	b.n	800184e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40023800 	.word	0x40023800

0800185c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0d0      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001874:	4b6a      	ldr	r3, [pc, #424]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 030f 	and.w	r3, r3, #15
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d910      	bls.n	80018a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001882:	4b67      	ldr	r3, [pc, #412]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f023 020f 	bic.w	r2, r3, #15
 800188a:	4965      	ldr	r1, [pc, #404]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	4313      	orrs	r3, r2
 8001890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001892:	4b63      	ldr	r3, [pc, #396]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0b8      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d020      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018bc:	4b59      	ldr	r3, [pc, #356]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	4a58      	ldr	r2, [pc, #352]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 80018c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d005      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018d4:	4b53      	ldr	r3, [pc, #332]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	4a52      	ldr	r2, [pc, #328]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 80018da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e0:	4b50      	ldr	r3, [pc, #320]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	494d      	ldr	r1, [pc, #308]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d040      	beq.n	8001980 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d107      	bne.n	8001916 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001906:	4b47      	ldr	r3, [pc, #284]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d115      	bne.n	800193e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e07f      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d107      	bne.n	800192e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800191e:	4b41      	ldr	r3, [pc, #260]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d109      	bne.n	800193e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e073      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e06b      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800193e:	4b39      	ldr	r3, [pc, #228]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f023 0203 	bic.w	r2, r3, #3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	4936      	ldr	r1, [pc, #216]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 800194c:	4313      	orrs	r3, r2
 800194e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001950:	f7ff fa22 	bl	8000d98 <HAL_GetTick>
 8001954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001956:	e00a      	b.n	800196e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001958:	f7ff fa1e 	bl	8000d98 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e053      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196e:	4b2d      	ldr	r3, [pc, #180]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 020c 	and.w	r2, r3, #12
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	429a      	cmp	r2, r3
 800197e:	d1eb      	bne.n	8001958 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001980:	4b27      	ldr	r3, [pc, #156]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 030f 	and.w	r3, r3, #15
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d210      	bcs.n	80019b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198e:	4b24      	ldr	r3, [pc, #144]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f023 020f 	bic.w	r2, r3, #15
 8001996:	4922      	ldr	r1, [pc, #136]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	4313      	orrs	r3, r2
 800199c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800199e:	4b20      	ldr	r3, [pc, #128]	@ (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e032      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d008      	beq.n	80019ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019bc:	4b19      	ldr	r3, [pc, #100]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	4916      	ldr	r1, [pc, #88]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0308 	and.w	r3, r3, #8
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d009      	beq.n	80019ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019da:	4b12      	ldr	r3, [pc, #72]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	490e      	ldr	r1, [pc, #56]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019ee:	f000 f821 	bl	8001a34 <HAL_RCC_GetSysClockFreq>
 80019f2:	4602      	mov	r2, r0
 80019f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	091b      	lsrs	r3, r3, #4
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	490a      	ldr	r1, [pc, #40]	@ (8001a28 <HAL_RCC_ClockConfig+0x1cc>)
 8001a00:	5ccb      	ldrb	r3, [r1, r3]
 8001a02:	fa22 f303 	lsr.w	r3, r2, r3
 8001a06:	4a09      	ldr	r2, [pc, #36]	@ (8001a2c <HAL_RCC_ClockConfig+0x1d0>)
 8001a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a0a:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <HAL_RCC_ClockConfig+0x1d4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff f874 	bl	8000afc <HAL_InitTick>

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023c00 	.word	0x40023c00
 8001a24:	40023800 	.word	0x40023800
 8001a28:	08007ee8 	.word	0x08007ee8
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	20000004 	.word	0x20000004

08001a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a38:	b094      	sub	sp, #80	@ 0x50
 8001a3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a40:	2300      	movs	r3, #0
 8001a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a44:	2300      	movs	r3, #0
 8001a46:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a4c:	4b79      	ldr	r3, [pc, #484]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 030c 	and.w	r3, r3, #12
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d00d      	beq.n	8001a74 <HAL_RCC_GetSysClockFreq+0x40>
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	f200 80e1 	bhi.w	8001c20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d002      	beq.n	8001a68 <HAL_RCC_GetSysClockFreq+0x34>
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d003      	beq.n	8001a6e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a66:	e0db      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a68:	4b73      	ldr	r3, [pc, #460]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a6c:	e0db      	b.n	8001c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a6e:	4b72      	ldr	r3, [pc, #456]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a72:	e0d8      	b.n	8001c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a74:	4b6f      	ldr	r3, [pc, #444]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a7c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001a7e:	4b6d      	ldr	r3, [pc, #436]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d063      	beq.n	8001b52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a8a:	4b6a      	ldr	r3, [pc, #424]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	099b      	lsrs	r3, r3, #6
 8001a90:	2200      	movs	r2, #0
 8001a92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a94:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001aa2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001aa6:	4622      	mov	r2, r4
 8001aa8:	462b      	mov	r3, r5
 8001aaa:	f04f 0000 	mov.w	r0, #0
 8001aae:	f04f 0100 	mov.w	r1, #0
 8001ab2:	0159      	lsls	r1, r3, #5
 8001ab4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ab8:	0150      	lsls	r0, r2, #5
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4621      	mov	r1, r4
 8001ac0:	1a51      	subs	r1, r2, r1
 8001ac2:	6139      	str	r1, [r7, #16]
 8001ac4:	4629      	mov	r1, r5
 8001ac6:	eb63 0301 	sbc.w	r3, r3, r1
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	f04f 0300 	mov.w	r3, #0
 8001ad4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ad8:	4659      	mov	r1, fp
 8001ada:	018b      	lsls	r3, r1, #6
 8001adc:	4651      	mov	r1, sl
 8001ade:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ae2:	4651      	mov	r1, sl
 8001ae4:	018a      	lsls	r2, r1, #6
 8001ae6:	4651      	mov	r1, sl
 8001ae8:	ebb2 0801 	subs.w	r8, r2, r1
 8001aec:	4659      	mov	r1, fp
 8001aee:	eb63 0901 	sbc.w	r9, r3, r1
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	f04f 0300 	mov.w	r3, #0
 8001afa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001afe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b06:	4690      	mov	r8, r2
 8001b08:	4699      	mov	r9, r3
 8001b0a:	4623      	mov	r3, r4
 8001b0c:	eb18 0303 	adds.w	r3, r8, r3
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	462b      	mov	r3, r5
 8001b14:	eb49 0303 	adc.w	r3, r9, r3
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b26:	4629      	mov	r1, r5
 8001b28:	028b      	lsls	r3, r1, #10
 8001b2a:	4621      	mov	r1, r4
 8001b2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b30:	4621      	mov	r1, r4
 8001b32:	028a      	lsls	r2, r1, #10
 8001b34:	4610      	mov	r0, r2
 8001b36:	4619      	mov	r1, r3
 8001b38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b44:	f7fe fc1c 	bl	8000380 <__aeabi_uldivmod>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b50:	e058      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b52:	4b38      	ldr	r3, [pc, #224]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	099b      	lsrs	r3, r3, #6
 8001b58:	2200      	movs	r2, #0
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	4611      	mov	r1, r2
 8001b5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b62:	623b      	str	r3, [r7, #32]
 8001b64:	2300      	movs	r3, #0
 8001b66:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b6c:	4642      	mov	r2, r8
 8001b6e:	464b      	mov	r3, r9
 8001b70:	f04f 0000 	mov.w	r0, #0
 8001b74:	f04f 0100 	mov.w	r1, #0
 8001b78:	0159      	lsls	r1, r3, #5
 8001b7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b7e:	0150      	lsls	r0, r2, #5
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4641      	mov	r1, r8
 8001b86:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b8a:	4649      	mov	r1, r9
 8001b8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ba0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ba4:	ebb2 040a 	subs.w	r4, r2, sl
 8001ba8:	eb63 050b 	sbc.w	r5, r3, fp
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	00eb      	lsls	r3, r5, #3
 8001bb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bba:	00e2      	lsls	r2, r4, #3
 8001bbc:	4614      	mov	r4, r2
 8001bbe:	461d      	mov	r5, r3
 8001bc0:	4643      	mov	r3, r8
 8001bc2:	18e3      	adds	r3, r4, r3
 8001bc4:	603b      	str	r3, [r7, #0]
 8001bc6:	464b      	mov	r3, r9
 8001bc8:	eb45 0303 	adc.w	r3, r5, r3
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bda:	4629      	mov	r1, r5
 8001bdc:	028b      	lsls	r3, r1, #10
 8001bde:	4621      	mov	r1, r4
 8001be0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001be4:	4621      	mov	r1, r4
 8001be6:	028a      	lsls	r2, r1, #10
 8001be8:	4610      	mov	r0, r2
 8001bea:	4619      	mov	r1, r3
 8001bec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bee:	2200      	movs	r2, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	61fa      	str	r2, [r7, #28]
 8001bf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bf8:	f7fe fbc2 	bl	8000380 <__aeabi_uldivmod>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4613      	mov	r3, r2
 8001c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c04:	4b0b      	ldr	r3, [pc, #44]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	0c1b      	lsrs	r3, r3, #16
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	3301      	adds	r3, #1
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001c14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c1e:	e002      	b.n	8001c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c20:	4b05      	ldr	r3, [pc, #20]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3750      	adds	r7, #80	@ 0x50
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	00f42400 	.word	0x00f42400

08001c3c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c40:	4b03      	ldr	r3, [pc, #12]	@ (8001c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20000000 	.word	0x20000000

08001c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c58:	f7ff fff0 	bl	8001c3c <HAL_RCC_GetHCLKFreq>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	0a9b      	lsrs	r3, r3, #10
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	4903      	ldr	r1, [pc, #12]	@ (8001c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c6a:	5ccb      	ldrb	r3, [r1, r3]
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40023800 	.word	0x40023800
 8001c78:	08007ef8 	.word	0x08007ef8

08001c7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	220f      	movs	r2, #15
 8001c8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c8c:	4b12      	ldr	r3, [pc, #72]	@ (8001cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 0203 	and.w	r2, r3, #3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c98:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001cb0:	4b09      	ldr	r3, [pc, #36]	@ (8001cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	08db      	lsrs	r3, r3, #3
 8001cb6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cbe:	4b07      	ldr	r3, [pc, #28]	@ (8001cdc <HAL_RCC_GetClockConfig+0x60>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 020f 	and.w	r2, r3, #15
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	601a      	str	r2, [r3, #0]
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40023c00 	.word	0x40023c00

08001ce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e049      	b.n	8001d86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d106      	bne.n	8001d0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f841 	bl	8001d8e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4610      	mov	r0, r2
 8001d20:	f000 fa00 	bl	8002124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d001      	beq.n	8001dbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e054      	b.n	8001e66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0201 	orr.w	r2, r2, #1
 8001dd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a26      	ldr	r2, [pc, #152]	@ (8001e74 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d022      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x80>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001de6:	d01d      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x80>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a22      	ldr	r2, [pc, #136]	@ (8001e78 <HAL_TIM_Base_Start_IT+0xd4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d018      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x80>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a21      	ldr	r2, [pc, #132]	@ (8001e7c <HAL_TIM_Base_Start_IT+0xd8>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d013      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x80>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a1f      	ldr	r2, [pc, #124]	@ (8001e80 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00e      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x80>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a1e      	ldr	r2, [pc, #120]	@ (8001e84 <HAL_TIM_Base_Start_IT+0xe0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d009      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x80>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a1c      	ldr	r2, [pc, #112]	@ (8001e88 <HAL_TIM_Base_Start_IT+0xe4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d004      	beq.n	8001e24 <HAL_TIM_Base_Start_IT+0x80>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a1b      	ldr	r2, [pc, #108]	@ (8001e8c <HAL_TIM_Base_Start_IT+0xe8>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d115      	bne.n	8001e50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	4b19      	ldr	r3, [pc, #100]	@ (8001e90 <HAL_TIM_Base_Start_IT+0xec>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b06      	cmp	r3, #6
 8001e34:	d015      	beq.n	8001e62 <HAL_TIM_Base_Start_IT+0xbe>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e3c:	d011      	beq.n	8001e62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f042 0201 	orr.w	r2, r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e4e:	e008      	b.n	8001e62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 0201 	orr.w	r2, r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	e000      	b.n	8001e64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40010000 	.word	0x40010000
 8001e78:	40000400 	.word	0x40000400
 8001e7c:	40000800 	.word	0x40000800
 8001e80:	40000c00 	.word	0x40000c00
 8001e84:	40010400 	.word	0x40010400
 8001e88:	40014000 	.word	0x40014000
 8001e8c:	40001800 	.word	0x40001800
 8001e90:	00010007 	.word	0x00010007

08001e94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d122      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d11b      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0202 	mvn.w	r2, #2
 8001ec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f905 	bl	80020e6 <HAL_TIM_IC_CaptureCallback>
 8001edc:	e005      	b.n	8001eea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f8f7 	bl	80020d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f908 	bl	80020fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d122      	bne.n	8001f44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d11b      	bne.n	8001f44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f06f 0204 	mvn.w	r2, #4
 8001f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2202      	movs	r2, #2
 8001f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f8db 	bl	80020e6 <HAL_TIM_IC_CaptureCallback>
 8001f30:	e005      	b.n	8001f3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f8cd 	bl	80020d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f8de 	bl	80020fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d122      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d11b      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f06f 0208 	mvn.w	r2, #8
 8001f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f8b1 	bl	80020e6 <HAL_TIM_IC_CaptureCallback>
 8001f84:	e005      	b.n	8001f92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f8a3 	bl	80020d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f8b4 	bl	80020fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	2b10      	cmp	r3, #16
 8001fa4:	d122      	bne.n	8001fec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 0310 	and.w	r3, r3, #16
 8001fb0:	2b10      	cmp	r3, #16
 8001fb2:	d11b      	bne.n	8001fec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0210 	mvn.w	r2, #16
 8001fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2208      	movs	r2, #8
 8001fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f887 	bl	80020e6 <HAL_TIM_IC_CaptureCallback>
 8001fd8:	e005      	b.n	8001fe6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f879 	bl	80020d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f88a 	bl	80020fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d10e      	bne.n	8002018 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b01      	cmp	r3, #1
 8002006:	d107      	bne.n	8002018 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0201 	mvn.w	r2, #1
 8002010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7fe fd36 	bl	8000a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002022:	2b80      	cmp	r3, #128	@ 0x80
 8002024:	d10e      	bne.n	8002044 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002030:	2b80      	cmp	r3, #128	@ 0x80
 8002032:	d107      	bne.n	8002044 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800203c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f91a 	bl	8002278 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800204e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002052:	d10e      	bne.n	8002072 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800205e:	2b80      	cmp	r3, #128	@ 0x80
 8002060:	d107      	bne.n	8002072 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800206a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f90d 	bl	800228c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800207c:	2b40      	cmp	r3, #64	@ 0x40
 800207e:	d10e      	bne.n	800209e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800208a:	2b40      	cmp	r3, #64	@ 0x40
 800208c:	d107      	bne.n	800209e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f838 	bl	800210e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	f003 0320 	and.w	r3, r3, #32
 80020a8:	2b20      	cmp	r3, #32
 80020aa:	d10e      	bne.n	80020ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	f003 0320 	and.w	r3, r3, #32
 80020b6:	2b20      	cmp	r3, #32
 80020b8:	d107      	bne.n	80020ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f06f 0220 	mvn.w	r2, #32
 80020c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f8cd 	bl	8002264 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a40      	ldr	r2, [pc, #256]	@ (8002238 <TIM_Base_SetConfig+0x114>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d013      	beq.n	8002164 <TIM_Base_SetConfig+0x40>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002142:	d00f      	beq.n	8002164 <TIM_Base_SetConfig+0x40>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a3d      	ldr	r2, [pc, #244]	@ (800223c <TIM_Base_SetConfig+0x118>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d00b      	beq.n	8002164 <TIM_Base_SetConfig+0x40>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a3c      	ldr	r2, [pc, #240]	@ (8002240 <TIM_Base_SetConfig+0x11c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d007      	beq.n	8002164 <TIM_Base_SetConfig+0x40>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a3b      	ldr	r2, [pc, #236]	@ (8002244 <TIM_Base_SetConfig+0x120>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d003      	beq.n	8002164 <TIM_Base_SetConfig+0x40>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a3a      	ldr	r2, [pc, #232]	@ (8002248 <TIM_Base_SetConfig+0x124>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d108      	bne.n	8002176 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800216a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4313      	orrs	r3, r2
 8002174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a2f      	ldr	r2, [pc, #188]	@ (8002238 <TIM_Base_SetConfig+0x114>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d02b      	beq.n	80021d6 <TIM_Base_SetConfig+0xb2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002184:	d027      	beq.n	80021d6 <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a2c      	ldr	r2, [pc, #176]	@ (800223c <TIM_Base_SetConfig+0x118>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d023      	beq.n	80021d6 <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a2b      	ldr	r2, [pc, #172]	@ (8002240 <TIM_Base_SetConfig+0x11c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d01f      	beq.n	80021d6 <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a2a      	ldr	r2, [pc, #168]	@ (8002244 <TIM_Base_SetConfig+0x120>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d01b      	beq.n	80021d6 <TIM_Base_SetConfig+0xb2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a29      	ldr	r2, [pc, #164]	@ (8002248 <TIM_Base_SetConfig+0x124>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d017      	beq.n	80021d6 <TIM_Base_SetConfig+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a28      	ldr	r2, [pc, #160]	@ (800224c <TIM_Base_SetConfig+0x128>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d013      	beq.n	80021d6 <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a27      	ldr	r2, [pc, #156]	@ (8002250 <TIM_Base_SetConfig+0x12c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d00f      	beq.n	80021d6 <TIM_Base_SetConfig+0xb2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a26      	ldr	r2, [pc, #152]	@ (8002254 <TIM_Base_SetConfig+0x130>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00b      	beq.n	80021d6 <TIM_Base_SetConfig+0xb2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a25      	ldr	r2, [pc, #148]	@ (8002258 <TIM_Base_SetConfig+0x134>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d007      	beq.n	80021d6 <TIM_Base_SetConfig+0xb2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a24      	ldr	r2, [pc, #144]	@ (800225c <TIM_Base_SetConfig+0x138>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d003      	beq.n	80021d6 <TIM_Base_SetConfig+0xb2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a23      	ldr	r2, [pc, #140]	@ (8002260 <TIM_Base_SetConfig+0x13c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d108      	bne.n	80021e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a0a      	ldr	r2, [pc, #40]	@ (8002238 <TIM_Base_SetConfig+0x114>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d003      	beq.n	800221c <TIM_Base_SetConfig+0xf8>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a0c      	ldr	r2, [pc, #48]	@ (8002248 <TIM_Base_SetConfig+0x124>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d103      	bne.n	8002224 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	691a      	ldr	r2, [r3, #16]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	615a      	str	r2, [r3, #20]
}
 800222a:	bf00      	nop
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40010000 	.word	0x40010000
 800223c:	40000400 	.word	0x40000400
 8002240:	40000800 	.word	0x40000800
 8002244:	40000c00 	.word	0x40000c00
 8002248:	40010400 	.word	0x40010400
 800224c:	40014000 	.word	0x40014000
 8002250:	40014400 	.word	0x40014400
 8002254:	40014800 	.word	0x40014800
 8002258:	40001800 	.word	0x40001800
 800225c:	40001c00 	.word	0x40001c00
 8002260:	40002000 	.word	0x40002000

08002264 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f103 0208 	add.w	r2, r3, #8
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80022b8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f103 0208 	add.w	r2, r3, #8
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f103 0208 	add.w	r2, r3, #8
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80022fa:	b480      	push	{r7}
 80022fc:	b085      	sub	sp, #20
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002310:	d103      	bne.n	800231a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	e00c      	b.n	8002334 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3308      	adds	r3, #8
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	e002      	b.n	8002328 <vListInsert+0x2e>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	429a      	cmp	r2, r3
 8002332:	d2f6      	bcs.n	8002322 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	601a      	str	r2, [r3, #0]
}
 8002360:	bf00      	nop
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6892      	ldr	r2, [r2, #8]
 8002382:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6852      	ldr	r2, [r2, #4]
 800238c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	429a      	cmp	r2, r3
 8002396:	d103      	bne.n	80023a0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	1e5a      	subs	r2, r3, #1
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80023ca:	2301      	movs	r3, #1
 80023cc:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10d      	bne.n	80023f4 <xQueueGenericReset+0x34>
        __asm volatile
 80023d8:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80023dc:	b672      	cpsid	i
 80023de:	f383 8811 	msr	BASEPRI, r3
 80023e2:	f3bf 8f6f 	isb	sy
 80023e6:	f3bf 8f4f 	dsb	sy
 80023ea:	b662      	cpsie	i
 80023ec:	60fb      	str	r3, [r7, #12]
    }
 80023ee:	bf00      	nop
 80023f0:	bf00      	nop
 80023f2:	e7fd      	b.n	80023f0 <xQueueGenericReset+0x30>

    if( ( pxQueue != NULL ) &&
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d052      	beq.n	80024a0 <xQueueGenericReset+0xe0>
        ( pxQueue->uxLength >= 1U ) &&
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d04e      	beq.n	80024a0 <xQueueGenericReset+0xe0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800240a:	2100      	movs	r1, #0
 800240c:	fba3 2302 	umull	r2, r3, r3, r2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d000      	beq.n	8002416 <xQueueGenericReset+0x56>
 8002414:	2101      	movs	r1, #1
 8002416:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002418:	2b00      	cmp	r3, #0
 800241a:	d141      	bne.n	80024a0 <xQueueGenericReset+0xe0>
    {
        taskENTER_CRITICAL();
 800241c:	f002 f87e 	bl	800451c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002428:	6939      	ldr	r1, [r7, #16]
 800242a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800242c:	fb01 f303 	mul.w	r3, r1, r3
 8002430:	441a      	add	r2, r3
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	2200      	movs	r2, #0
 800243a:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800244c:	3b01      	subs	r3, #1
 800244e:	6939      	ldr	r1, [r7, #16]
 8002450:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002452:	fb01 f303 	mul.w	r3, r1, r3
 8002456:	441a      	add	r2, r3
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	22ff      	movs	r2, #255	@ 0xff
 8002460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	22ff      	movs	r2, #255	@ 0xff
 8002468:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d109      	bne.n	8002486 <xQueueGenericReset+0xc6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00f      	beq.n	800249a <xQueueGenericReset+0xda>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	3310      	adds	r3, #16
 800247e:	4618      	mov	r0, r3
 8002480:	f001 f87a 	bl	8003578 <xTaskRemoveFromEventList>
 8002484:	e009      	b.n	800249a <xQueueGenericReset+0xda>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	3310      	adds	r3, #16
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff ff08 	bl	80022a0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	3324      	adds	r3, #36	@ 0x24
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff ff03 	bl	80022a0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800249a:	f002 f875 	bl	8004588 <vPortExitCritical>
 800249e:	e001      	b.n	80024a4 <xQueueGenericReset+0xe4>
    }
    else
    {
        xReturn = pdFAIL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10d      	bne.n	80024c6 <xQueueGenericReset+0x106>
        __asm volatile
 80024aa:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80024ae:	b672      	cpsid	i
 80024b0:	f383 8811 	msr	BASEPRI, r3
 80024b4:	f3bf 8f6f 	isb	sy
 80024b8:	f3bf 8f4f 	dsb	sy
 80024bc:	b662      	cpsie	i
 80024be:	60bb      	str	r3, [r7, #8]
    }
 80024c0:	bf00      	nop
 80024c2:	bf00      	nop
 80024c4:	e7fd      	b.n	80024c2 <xQueueGenericReset+0x102>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80024c6:	697b      	ldr	r3, [r7, #20]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08a      	sub	sp, #40	@ 0x28
 80024d4:	af02      	add	r7, sp, #8
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	4613      	mov	r3, r2
 80024dc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d02e      	beq.n	8002546 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80024e8:	2100      	movs	r1, #0
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	fba3 2302 	umull	r2, r3, r3, r2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d000      	beq.n	80024f8 <xQueueGenericCreate+0x28>
 80024f6:	2101      	movs	r1, #1
 80024f8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d123      	bne.n	8002546 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002506:	f113 0f55 	cmn.w	r3, #85	@ 0x55
 800250a:	d81c      	bhi.n	8002546 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	fb02 f303 	mul.w	r3, r2, r3
 8002514:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	3354      	adds	r3, #84	@ 0x54
 800251a:	4618      	mov	r0, r3
 800251c:	f002 f936 	bl	800478c <pvPortMalloc>
 8002520:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01f      	beq.n	8002568 <xQueueGenericCreate+0x98>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	3354      	adds	r3, #84	@ 0x54
 8002530:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002532:	79fa      	ldrb	r2, [r7, #7]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	4613      	mov	r3, r2
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	68b9      	ldr	r1, [r7, #8]
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 f817 	bl	8002572 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002544:	e010      	b.n	8002568 <xQueueGenericCreate+0x98>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10d      	bne.n	8002568 <xQueueGenericCreate+0x98>
        __asm volatile
 800254c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002550:	b672      	cpsid	i
 8002552:	f383 8811 	msr	BASEPRI, r3
 8002556:	f3bf 8f6f 	isb	sy
 800255a:	f3bf 8f4f 	dsb	sy
 800255e:	b662      	cpsie	i
 8002560:	613b      	str	r3, [r7, #16]
    }
 8002562:	bf00      	nop
 8002564:	bf00      	nop
 8002566:	e7fd      	b.n	8002564 <xQueueGenericCreate+0x94>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002568:	69fb      	ldr	r3, [r7, #28]
    }
 800256a:	4618      	mov	r0, r3
 800256c:	3720      	adds	r7, #32
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b084      	sub	sp, #16
 8002576:	af00      	add	r7, sp, #0
 8002578:	60f8      	str	r0, [r7, #12]
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	607a      	str	r2, [r7, #4]
 800257e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d103      	bne.n	800258e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	e002      	b.n	8002594 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025a0:	2101      	movs	r1, #1
 80025a2:	69b8      	ldr	r0, [r7, #24]
 80025a4:	f7ff ff0c 	bl	80023c0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	78fa      	ldrb	r2, [r7, #3]
 80025ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
    {
        pxNewQueue->pxQueueSetContainer = NULL;
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	2200      	movs	r2, #0
 80025b4:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08c      	sub	sp, #48	@ 0x30
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80025cc:	2300      	movs	r3, #0
 80025ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80025d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10d      	bne.n	80025f6 <xQueueReceive+0x36>
        __asm volatile
 80025da:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80025de:	b672      	cpsid	i
 80025e0:	f383 8811 	msr	BASEPRI, r3
 80025e4:	f3bf 8f6f 	isb	sy
 80025e8:	f3bf 8f4f 	dsb	sy
 80025ec:	b662      	cpsie	i
 80025ee:	623b      	str	r3, [r7, #32]
    }
 80025f0:	bf00      	nop
 80025f2:	bf00      	nop
 80025f4:	e7fd      	b.n	80025f2 <xQueueReceive+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d103      	bne.n	8002604 <xQueueReceive+0x44>
 80025fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <xQueueReceive+0x48>
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <xQueueReceive+0x4a>
 8002608:	2300      	movs	r3, #0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10d      	bne.n	800262a <xQueueReceive+0x6a>
        __asm volatile
 800260e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002612:	b672      	cpsid	i
 8002614:	f383 8811 	msr	BASEPRI, r3
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	b662      	cpsie	i
 8002622:	61fb      	str	r3, [r7, #28]
    }
 8002624:	bf00      	nop
 8002626:	bf00      	nop
 8002628:	e7fd      	b.n	8002626 <xQueueReceive+0x66>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800262a:	f001 f9bb 	bl	80039a4 <xTaskGetSchedulerState>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d102      	bne.n	800263a <xQueueReceive+0x7a>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <xQueueReceive+0x7e>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <xQueueReceive+0x80>
 800263e:	2300      	movs	r3, #0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10d      	bne.n	8002660 <xQueueReceive+0xa0>
        __asm volatile
 8002644:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002648:	b672      	cpsid	i
 800264a:	f383 8811 	msr	BASEPRI, r3
 800264e:	f3bf 8f6f 	isb	sy
 8002652:	f3bf 8f4f 	dsb	sy
 8002656:	b662      	cpsie	i
 8002658:	61bb      	str	r3, [r7, #24]
    }
 800265a:	bf00      	nop
 800265c:	bf00      	nop
 800265e:	e7fd      	b.n	800265c <xQueueReceive+0x9c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002660:	f001 ff5c 	bl	800451c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002668:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	2b00      	cmp	r3, #0
 800266e:	d014      	beq.n	800269a <xQueueReceive+0xda>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002670:	68b9      	ldr	r1, [r7, #8]
 8002672:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002674:	f000 f8ec 	bl	8002850 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267a:	1e5a      	subs	r2, r3, #1
 800267c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800267e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d004      	beq.n	8002692 <xQueueReceive+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800268a:	3310      	adds	r3, #16
 800268c:	4618      	mov	r0, r3
 800268e:	f000 ff73 	bl	8003578 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002692:	f001 ff79 	bl	8004588 <vPortExitCritical>
                return pdPASS;
 8002696:	2301      	movs	r3, #1
 8002698:	e069      	b.n	800276e <xQueueReceive+0x1ae>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d103      	bne.n	80026a8 <xQueueReceive+0xe8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80026a0:	f001 ff72 	bl	8004588 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80026a4:	2300      	movs	r3, #0
 80026a6:	e062      	b.n	800276e <xQueueReceive+0x1ae>
                }
                else if( xEntryTimeSet == pdFALSE )
 80026a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d106      	bne.n	80026bc <xQueueReceive+0xfc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80026ae:	f107 0310 	add.w	r3, r7, #16
 80026b2:	4618      	mov	r0, r3
 80026b4:	f001 f83c 	bl	8003730 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80026b8:	2301      	movs	r3, #1
 80026ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80026bc:	f001 ff64 	bl	8004588 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80026c0:	f000 fc4e 	bl	8002f60 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80026c4:	f001 ff2a 	bl	800451c <vPortEnterCritical>
 80026c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80026ce:	b25b      	sxtb	r3, r3
 80026d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026d4:	d103      	bne.n	80026de <xQueueReceive+0x11e>
 80026d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026e4:	b25b      	sxtb	r3, r3
 80026e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026ea:	d103      	bne.n	80026f4 <xQueueReceive+0x134>
 80026ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80026f4:	f001 ff48 	bl	8004588 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026f8:	1d3a      	adds	r2, r7, #4
 80026fa:	f107 0310 	add.w	r3, r7, #16
 80026fe:	4611      	mov	r1, r2
 8002700:	4618      	mov	r0, r3
 8002702:	f001 f82b 	bl	800375c <xTaskCheckForTimeOut>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d123      	bne.n	8002754 <xQueueReceive+0x194>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800270c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800270e:	f000 f924 	bl	800295a <prvIsQueueEmpty>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d017      	beq.n	8002748 <xQueueReceive+0x188>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800271a:	3324      	adds	r3, #36	@ 0x24
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	4611      	mov	r1, r2
 8002720:	4618      	mov	r0, r3
 8002722:	f000 feb9 	bl	8003498 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002726:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002728:	f000 f8b8 	bl	800289c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800272c:	f000 fc26 	bl	8002f7c <xTaskResumeAll>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d194      	bne.n	8002660 <xQueueReceive+0xa0>
                {
                    portYIELD_WITHIN_API();
 8002736:	4b10      	ldr	r3, [pc, #64]	@ (8002778 <xQueueReceive+0x1b8>)
 8002738:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	f3bf 8f4f 	dsb	sy
 8002742:	f3bf 8f6f 	isb	sy
 8002746:	e78b      	b.n	8002660 <xQueueReceive+0xa0>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002748:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800274a:	f000 f8a7 	bl	800289c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800274e:	f000 fc15 	bl	8002f7c <xTaskResumeAll>
 8002752:	e785      	b.n	8002660 <xQueueReceive+0xa0>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002754:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002756:	f000 f8a1 	bl	800289c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800275a:	f000 fc0f 	bl	8002f7c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800275e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002760:	f000 f8fb 	bl	800295a <prvIsQueueEmpty>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	f43f af7a 	beq.w	8002660 <xQueueReceive+0xa0>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800276c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800276e:	4618      	mov	r0, r3
 8002770:	3730      	adds	r7, #48	@ 0x30
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	e000ed04 	.word	0xe000ed04

0800277c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002790:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10d      	bne.n	80027b6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d14d      	bne.n	800283e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f001 f91a 	bl	80039e0 <xTaskPriorityDisinherit>
 80027ac:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	e043      	b.n	800283e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d119      	bne.n	80027f0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6858      	ldr	r0, [r3, #4]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c4:	461a      	mov	r2, r3
 80027c6:	68b9      	ldr	r1, [r7, #8]
 80027c8:	f004 fd5f 	bl	800728a <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d4:	441a      	add	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d32b      	bcc.n	800283e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	e026      	b.n	800283e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	68d8      	ldr	r0, [r3, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f8:	461a      	mov	r2, r3
 80027fa:	68b9      	ldr	r1, [r7, #8]
 80027fc:	f004 fd45 	bl	800728a <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002808:	425b      	negs	r3, r3
 800280a:	441a      	add	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d207      	bcs.n	800282c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002824:	425b      	negs	r3, r3
 8002826:	441a      	add	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d105      	bne.n	800283e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d002      	beq.n	800283e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	3b01      	subs	r3, #1
 800283c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002846:	697b      	ldr	r3, [r7, #20]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285e:	2b00      	cmp	r3, #0
 8002860:	d018      	beq.n	8002894 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286a:	441a      	add	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	429a      	cmp	r2, r3
 800287a:	d303      	bcc.n	8002884 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68d9      	ldr	r1, [r3, #12]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288c:	461a      	mov	r2, r3
 800288e:	6838      	ldr	r0, [r7, #0]
 8002890:	f004 fcfb 	bl	800728a <memcpy>
    }
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80028a4:	f001 fe3a 	bl	800451c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80028ae:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80028b0:	e01e      	b.n	80028f0 <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
            {
                if( pxQueue->pxQueueSetContainer != NULL )
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d008      	beq.n	80028cc <prvUnlockQueue+0x30>
                {
                    if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f8ea 	bl	8002a94 <prvNotifyQueueSetContainer>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d010      	beq.n	80028e8 <prvUnlockQueue+0x4c>
                    {
                        /* The queue is a member of a queue set, and posting to
                         * the queue set caused a higher priority task to unblock.
                         * A context switch is required. */
                        vTaskMissedYield();
 80028c6:	f000 ffb5 	bl	8003834 <vTaskMissedYield>
 80028ca:	e00d      	b.n	80028e8 <prvUnlockQueue+0x4c>
                else
                {
                    /* Tasks that are removed from the event list will get
                     * added to the pending ready list as the scheduler is still
                     * suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d012      	beq.n	80028fa <prvUnlockQueue+0x5e>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3324      	adds	r3, #36	@ 0x24
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 fe4d 	bl	8003578 <xTaskRemoveFromEventList>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <prvUnlockQueue+0x4c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            vTaskMissedYield();
 80028e4:	f000 ffa6 	bl	8003834 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80028f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	dcdc      	bgt.n	80028b2 <prvUnlockQueue+0x16>
 80028f8:	e000      	b.n	80028fc <prvUnlockQueue+0x60>
                        break;
 80028fa:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	22ff      	movs	r2, #255	@ 0xff
 8002900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002904:	f001 fe40 	bl	8004588 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002908:	f001 fe08 	bl	800451c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002912:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002914:	e011      	b.n	800293a <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d012      	beq.n	8002944 <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3310      	adds	r3, #16
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fe28 	bl	8003578 <xTaskRemoveFromEventList>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 800292e:	f000 ff81 	bl	8003834 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002932:	7bbb      	ldrb	r3, [r7, #14]
 8002934:	3b01      	subs	r3, #1
 8002936:	b2db      	uxtb	r3, r3
 8002938:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800293a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800293e:	2b00      	cmp	r3, #0
 8002940:	dce9      	bgt.n	8002916 <prvUnlockQueue+0x7a>
 8002942:	e000      	b.n	8002946 <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 8002944:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	22ff      	movs	r2, #255	@ 0xff
 800294a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800294e:	f001 fe1b 	bl	8004588 <vPortExitCritical>
}
 8002952:	bf00      	nop
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b084      	sub	sp, #16
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002962:	f001 fddb 	bl	800451c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800296a:	2b00      	cmp	r3, #0
 800296c:	d102      	bne.n	8002974 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800296e:	2301      	movs	r3, #1
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	e001      	b.n	8002978 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002974:	2300      	movs	r3, #0
 8002976:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002978:	f001 fe06 	bl	8004588 <vPortExitCritical>

    return xReturn;
 800297c:	68fb      	ldr	r3, [r7, #12]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002988:	b480      	push	{r7}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002992:	2300      	movs	r3, #0
 8002994:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10d      	bne.n	80029b8 <vQueueAddToRegistry+0x30>
        __asm volatile
 800299c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80029a0:	b672      	cpsid	i
 80029a2:	f383 8811 	msr	BASEPRI, r3
 80029a6:	f3bf 8f6f 	isb	sy
 80029aa:	f3bf 8f4f 	dsb	sy
 80029ae:	b662      	cpsie	i
 80029b0:	60fb      	str	r3, [r7, #12]
    }
 80029b2:	bf00      	nop
 80029b4:	bf00      	nop
 80029b6:	e7fd      	b.n	80029b4 <vQueueAddToRegistry+0x2c>

        if( pcQueueName != NULL )
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d024      	beq.n	8002a08 <vQueueAddToRegistry+0x80>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	e01e      	b.n	8002a02 <vQueueAddToRegistry+0x7a>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80029c4:	4a18      	ldr	r2, [pc, #96]	@ (8002a28 <vQueueAddToRegistry+0xa0>)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4413      	add	r3, r2
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d105      	bne.n	80029e0 <vQueueAddToRegistry+0x58>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4a13      	ldr	r2, [pc, #76]	@ (8002a28 <vQueueAddToRegistry+0xa0>)
 80029da:	4413      	add	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
                    break;
 80029de:	e013      	b.n	8002a08 <vQueueAddToRegistry+0x80>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10a      	bne.n	80029fc <vQueueAddToRegistry+0x74>
 80029e6:	4a10      	ldr	r2, [pc, #64]	@ (8002a28 <vQueueAddToRegistry+0xa0>)
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d104      	bne.n	80029fc <vQueueAddToRegistry+0x74>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4a0c      	ldr	r2, [pc, #48]	@ (8002a28 <vQueueAddToRegistry+0xa0>)
 80029f8:	4413      	add	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	3301      	adds	r3, #1
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2b07      	cmp	r3, #7
 8002a06:	d9dd      	bls.n	80029c4 <vQueueAddToRegistry+0x3c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d005      	beq.n	8002a1a <vQueueAddToRegistry+0x92>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002a1a:	bf00      	nop
 8002a1c:	371c      	adds	r7, #28
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	200000dc 	.word	0x200000dc

08002a2c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002a3c:	f001 fd6e 	bl	800451c <vPortEnterCritical>
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a46:	b25b      	sxtb	r3, r3
 8002a48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a4c:	d103      	bne.n	8002a56 <vQueueWaitForMessageRestricted+0x2a>
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a5c:	b25b      	sxtb	r3, r3
 8002a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a62:	d103      	bne.n	8002a6c <vQueueWaitForMessageRestricted+0x40>
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a6c:	f001 fd8c 	bl	8004588 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d106      	bne.n	8002a86 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	3324      	adds	r3, #36	@ 0x24
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	68b9      	ldr	r1, [r7, #8]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fd31 	bl	80034e8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002a86:	6978      	ldr	r0, [r7, #20]
 8002a88:	f7ff ff08 	bl	800289c <prvUnlockQueue>
    }
 8002a8c:	bf00      	nop
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08a      	sub	sp, #40	@ 0x28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aa0:	623b      	str	r3, [r7, #32]
        BaseType_t xReturn = pdFALSE;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	627b      	str	r3, [r7, #36]	@ 0x24
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10d      	bne.n	8002ac8 <prvNotifyQueueSetContainer+0x34>
        __asm volatile
 8002aac:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002ab0:	b672      	cpsid	i
 8002ab2:	f383 8811 	msr	BASEPRI, r3
 8002ab6:	f3bf 8f6f 	isb	sy
 8002aba:	f3bf 8f4f 	dsb	sy
 8002abe:	b662      	cpsie	i
 8002ac0:	617b      	str	r3, [r7, #20]
    }
 8002ac2:	bf00      	nop
 8002ac4:	bf00      	nop
 8002ac6:	e7fd      	b.n	8002ac4 <prvNotifyQueueSetContainer+0x30>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d30d      	bcc.n	8002af0 <prvNotifyQueueSetContainer+0x5c>
        __asm volatile
 8002ad4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002ad8:	b672      	cpsid	i
 8002ada:	f383 8811 	msr	BASEPRI, r3
 8002ade:	f3bf 8f6f 	isb	sy
 8002ae2:	f3bf 8f4f 	dsb	sy
 8002ae6:	b662      	cpsie	i
 8002ae8:	613b      	str	r3, [r7, #16]
    }
 8002aea:	bf00      	nop
 8002aec:	bf00      	nop
 8002aee:	e7fd      	b.n	8002aec <prvNotifyQueueSetContainer+0x58>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d23f      	bcs.n	8002b7c <prvNotifyQueueSetContainer+0xe8>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b02:	77fb      	strb	r3, [r7, #31]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8002b04:	1d3b      	adds	r3, r7, #4
 8002b06:	2200      	movs	r2, #0
 8002b08:	4619      	mov	r1, r3
 8002b0a:	6a38      	ldr	r0, [r7, #32]
 8002b0c:	f7ff fe36 	bl	800277c <prvCopyDataToQueue>
 8002b10:	6278      	str	r0, [r7, #36]	@ 0x24

            if( cTxLock == queueUNLOCKED )
 8002b12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b1a:	d10e      	bne.n	8002b3a <prvNotifyQueueSetContainer+0xa6>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d02b      	beq.n	8002b7c <prvNotifyQueueSetContainer+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	3324      	adds	r3, #36	@ 0x24
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fd25 	bl	8003578 <xTaskRemoveFromEventList>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d023      	beq.n	8002b7c <prvNotifyQueueSetContainer+0xe8>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 8002b34:	2301      	movs	r3, #1
 8002b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b38:	e020      	b.n	8002b7c <prvNotifyQueueSetContainer+0xe8>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                prvIncrementQueueTxLock( pxQueueSetContainer, cTxLock );
 8002b3a:	f000 fb35 	bl	80031a8 <uxTaskGetNumberOfTasks>
 8002b3e:	61b8      	str	r0, [r7, #24]
 8002b40:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d918      	bls.n	8002b7c <prvNotifyQueueSetContainer+0xe8>
 8002b4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002b4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b50:	d10d      	bne.n	8002b6e <prvNotifyQueueSetContainer+0xda>
        __asm volatile
 8002b52:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002b56:	b672      	cpsid	i
 8002b58:	f383 8811 	msr	BASEPRI, r3
 8002b5c:	f3bf 8f6f 	isb	sy
 8002b60:	f3bf 8f4f 	dsb	sy
 8002b64:	b662      	cpsie	i
 8002b66:	60fb      	str	r3, [r7, #12]
    }
 8002b68:	bf00      	nop
 8002b6a:	bf00      	nop
 8002b6c:	e7fd      	b.n	8002b6a <prvNotifyQueueSetContainer+0xd6>
 8002b6e:	7ffb      	ldrb	r3, [r7, #31]
 8002b70:	3301      	adds	r3, #1
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	b25a      	sxtb	r2, r3
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3728      	adds	r7, #40	@ 0x28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b08c      	sub	sp, #48	@ 0x30
 8002b8a:	af04      	add	r7, sp, #16
 8002b8c:	60f8      	str	r0, [r7, #12]
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	603b      	str	r3, [r7, #0]
 8002b92:	4613      	mov	r3, r2
 8002b94:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f001 fdf6 	bl	800478c <pvPortMalloc>
 8002ba0:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d013      	beq.n	8002bd0 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ba8:	2058      	movs	r0, #88	@ 0x58
 8002baa:	f001 fdef 	bl	800478c <pvPortMalloc>
 8002bae:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d008      	beq.n	8002bc8 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002bb6:	2258      	movs	r2, #88	@ 0x58
 8002bb8:	2100      	movs	r1, #0
 8002bba:	69f8      	ldr	r0, [r7, #28]
 8002bbc:	f004 fb02 	bl	80071c4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bc6:	e005      	b.n	8002bd4 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002bc8:	6978      	ldr	r0, [r7, #20]
 8002bca:	f001 fe9f 	bl	800490c <vPortFree>
 8002bce:	e001      	b.n	8002bd4 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d013      	beq.n	8002c02 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002bda:	88fa      	ldrh	r2, [r7, #6]
 8002bdc:	2300      	movs	r3, #0
 8002bde:	9303      	str	r3, [sp, #12]
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	9302      	str	r3, [sp, #8]
 8002be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be6:	9301      	str	r3, [sp, #4]
 8002be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	68b9      	ldr	r1, [r7, #8]
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f80e 	bl	8002c12 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002bf6:	69f8      	ldr	r0, [r7, #28]
 8002bf8:	f000 f8a0 	bl	8002d3c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	61bb      	str	r3, [r7, #24]
 8002c00:	e002      	b.n	8002c08 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c06:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002c08:	69bb      	ldr	r3, [r7, #24]
    }
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3720      	adds	r7, #32
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b088      	sub	sp, #32
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	607a      	str	r2, [r7, #4]
 8002c1e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c22:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	461a      	mov	r2, r3
 8002c2a:	21a5      	movs	r1, #165	@ 0xa5
 8002c2c:	f004 faca 	bl	80071c4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8002c3a:	440b      	add	r3, r1
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	f023 0307 	bic.w	r3, r3, #7
 8002c48:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00d      	beq.n	8002c70 <prvInitialiseNewTask+0x5e>
        __asm volatile
 8002c54:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002c58:	b672      	cpsid	i
 8002c5a:	f383 8811 	msr	BASEPRI, r3
 8002c5e:	f3bf 8f6f 	isb	sy
 8002c62:	f3bf 8f4f 	dsb	sy
 8002c66:	b662      	cpsie	i
 8002c68:	617b      	str	r3, [r7, #20]
    }
 8002c6a:	bf00      	nop
 8002c6c:	bf00      	nop
 8002c6e:	e7fd      	b.n	8002c6c <prvInitialiseNewTask+0x5a>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d01e      	beq.n	8002cb4 <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
 8002c7a:	e012      	b.n	8002ca2 <prvInitialiseNewTask+0x90>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	4413      	add	r3, r2
 8002c82:	7819      	ldrb	r1, [r3, #0]
 8002c84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	4413      	add	r3, r2
 8002c8a:	3334      	adds	r3, #52	@ 0x34
 8002c8c:	460a      	mov	r2, r1
 8002c8e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	4413      	add	r3, r2
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d006      	beq.n	8002caa <prvInitialiseNewTask+0x98>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	61fb      	str	r3, [r7, #28]
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	2b09      	cmp	r3, #9
 8002ca6:	d9e9      	bls.n	8002c7c <prvInitialiseNewTask+0x6a>
 8002ca8:	e000      	b.n	8002cac <prvInitialiseNewTask+0x9a>
            {
                break;
 8002caa:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d90d      	bls.n	8002cd6 <prvInitialiseNewTask+0xc4>
        __asm volatile
 8002cba:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002cbe:	b672      	cpsid	i
 8002cc0:	f383 8811 	msr	BASEPRI, r3
 8002cc4:	f3bf 8f6f 	isb	sy
 8002cc8:	f3bf 8f4f 	dsb	sy
 8002ccc:	b662      	cpsie	i
 8002cce:	613b      	str	r3, [r7, #16]
    }
 8002cd0:	bf00      	nop
 8002cd2:	bf00      	nop
 8002cd4:	e7fd      	b.n	8002cd2 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d901      	bls.n	8002ce0 <prvInitialiseNewTask+0xce>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002cdc:	2304      	movs	r3, #4
 8002cde:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ce4:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cea:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cee:	3304      	adds	r3, #4
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff faf5 	bl	80022e0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf8:	3318      	adds	r3, #24
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff faf0 	bl	80022e0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d04:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d08:	f1c3 0205 	rsb	r2, r3, #5
 8002d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d0e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d14:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	68f9      	ldr	r1, [r7, #12]
 8002d1a:	69b8      	ldr	r0, [r7, #24]
 8002d1c:	f001 fa3c 	bl	8004198 <pxPortInitialiseStack>
 8002d20:	4602      	mov	r2, r0
 8002d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d24:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d002      	beq.n	8002d32 <prvInitialiseNewTask+0x120>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d30:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d32:	bf00      	nop
 8002d34:	3720      	adds	r7, #32
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002d3c:	b5b0      	push	{r4, r5, r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af02      	add	r7, sp, #8
 8002d42:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002d44:	f001 fbea 	bl	800451c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002d48:	4b49      	ldr	r3, [pc, #292]	@ (8002e70 <prvAddNewTaskToReadyList+0x134>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	4a48      	ldr	r2, [pc, #288]	@ (8002e70 <prvAddNewTaskToReadyList+0x134>)
 8002d50:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002d52:	4b48      	ldr	r3, [pc, #288]	@ (8002e74 <prvAddNewTaskToReadyList+0x138>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d109      	bne.n	8002d6e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002d5a:	4a46      	ldr	r2, [pc, #280]	@ (8002e74 <prvAddNewTaskToReadyList+0x138>)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d60:	4b43      	ldr	r3, [pc, #268]	@ (8002e70 <prvAddNewTaskToReadyList+0x134>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d110      	bne.n	8002d8a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002d68:	f000 fd82 	bl	8003870 <prvInitialiseTaskLists>
 8002d6c:	e00d      	b.n	8002d8a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002d6e:	4b42      	ldr	r3, [pc, #264]	@ (8002e78 <prvAddNewTaskToReadyList+0x13c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d109      	bne.n	8002d8a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d76:	4b3f      	ldr	r3, [pc, #252]	@ (8002e74 <prvAddNewTaskToReadyList+0x138>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d802      	bhi.n	8002d8a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002d84:	4a3b      	ldr	r2, [pc, #236]	@ (8002e74 <prvAddNewTaskToReadyList+0x138>)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002d8a:	4b3c      	ldr	r3, [pc, #240]	@ (8002e7c <prvAddNewTaskToReadyList+0x140>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	4a3a      	ldr	r2, [pc, #232]	@ (8002e7c <prvAddNewTaskToReadyList+0x140>)
 8002d92:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002d94:	4b39      	ldr	r3, [pc, #228]	@ (8002e7c <prvAddNewTaskToReadyList+0x140>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d016      	beq.n	8002dd0 <prvAddNewTaskToReadyList+0x94>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f003 fda3 	bl	80068f0 <SEGGER_SYSVIEW_OnTaskCreate>
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dba:	461d      	mov	r5, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	461c      	mov	r4, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc6:	1ae3      	subs	r3, r4, r3
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	462b      	mov	r3, r5
 8002dcc:	f001 ff66 	bl	8004c9c <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f003 fe10 	bl	80069f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ddc:	2201      	movs	r2, #1
 8002dde:	409a      	lsls	r2, r3
 8002de0:	4b27      	ldr	r3, [pc, #156]	@ (8002e80 <prvAddNewTaskToReadyList+0x144>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	4a26      	ldr	r2, [pc, #152]	@ (8002e80 <prvAddNewTaskToReadyList+0x144>)
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dee:	4925      	ldr	r1, [pc, #148]	@ (8002e84 <prvAddNewTaskToReadyList+0x148>)
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	609a      	str	r2, [r3, #8]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	3204      	adds	r2, #4
 8002e16:	605a      	str	r2, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	1d1a      	adds	r2, r3, #4
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4a15      	ldr	r2, [pc, #84]	@ (8002e84 <prvAddNewTaskToReadyList+0x148>)
 8002e2e:	441a      	add	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	615a      	str	r2, [r3, #20]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e38:	4912      	ldr	r1, [pc, #72]	@ (8002e84 <prvAddNewTaskToReadyList+0x148>)
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	1c59      	adds	r1, r3, #1
 8002e48:	480e      	ldr	r0, [pc, #56]	@ (8002e84 <prvAddNewTaskToReadyList+0x148>)
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4403      	add	r3, r0
 8002e54:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002e56:	f001 fb97 	bl	8004588 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002e5a:	4b07      	ldr	r3, [pc, #28]	@ (8002e78 <prvAddNewTaskToReadyList+0x13c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e62:	4b04      	ldr	r3, [pc, #16]	@ (8002e74 <prvAddNewTaskToReadyList+0x138>)
 8002e64:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e66:	bf00      	nop
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	200001f4 	.word	0x200001f4
 8002e74:	2000011c 	.word	0x2000011c
 8002e78:	20000200 	.word	0x20000200
 8002e7c:	20000210 	.word	0x20000210
 8002e80:	200001fc 	.word	0x200001fc
 8002e84:	20000120 	.word	0x20000120

08002e88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8002f40 <vTaskStartScheduler+0xb8>)
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	2300      	movs	r3, #0
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	2300      	movs	r3, #0
 8002e98:	2282      	movs	r2, #130	@ 0x82
 8002e9a:	492a      	ldr	r1, [pc, #168]	@ (8002f44 <vTaskStartScheduler+0xbc>)
 8002e9c:	482a      	ldr	r0, [pc, #168]	@ (8002f48 <vTaskStartScheduler+0xc0>)
 8002e9e:	f7ff fe72 	bl	8002b86 <xTaskCreate>
 8002ea2:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d102      	bne.n	8002eb0 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002eaa:	f000 fec7 	bl	8003c3c <xTimerCreateTimerTask>
 8002eae:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d12b      	bne.n	8002f0e <vTaskStartScheduler+0x86>
        __asm volatile
 8002eb6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002eba:	b672      	cpsid	i
 8002ebc:	f383 8811 	msr	BASEPRI, r3
 8002ec0:	f3bf 8f6f 	isb	sy
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	b662      	cpsie	i
 8002eca:	60bb      	str	r3, [r7, #8]
    }
 8002ecc:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002ece:	4b1f      	ldr	r3, [pc, #124]	@ (8002f4c <vTaskStartScheduler+0xc4>)
 8002ed0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ed4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f50 <vTaskStartScheduler+0xc8>)
 8002ed8:	2201      	movs	r2, #1
 8002eda:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002edc:	4b1d      	ldr	r3, [pc, #116]	@ (8002f54 <vTaskStartScheduler+0xcc>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f58 <vTaskStartScheduler+0xd0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	3334      	adds	r3, #52	@ 0x34
 8002ee8:	2205      	movs	r2, #5
 8002eea:	4916      	ldr	r1, [pc, #88]	@ (8002f44 <vTaskStartScheduler+0xbc>)
 8002eec:	4618      	mov	r0, r3
 8002eee:	f004 f959 	bl	80071a4 <memcmp>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <vTaskStartScheduler+0x7c>
 8002ef8:	4b17      	ldr	r3, [pc, #92]	@ (8002f58 <vTaskStartScheduler+0xd0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f003 fd39 	bl	8006974 <SEGGER_SYSVIEW_OnTaskStartExec>
 8002f02:	e001      	b.n	8002f08 <vTaskStartScheduler+0x80>
 8002f04:	f003 fcd8 	bl	80068b8 <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002f08:	f001 f9dc 	bl	80042c4 <xPortStartScheduler>
 8002f0c:	e011      	b.n	8002f32 <vTaskStartScheduler+0xaa>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f14:	d10d      	bne.n	8002f32 <vTaskStartScheduler+0xaa>
        __asm volatile
 8002f16:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002f1a:	b672      	cpsid	i
 8002f1c:	f383 8811 	msr	BASEPRI, r3
 8002f20:	f3bf 8f6f 	isb	sy
 8002f24:	f3bf 8f4f 	dsb	sy
 8002f28:	b662      	cpsie	i
 8002f2a:	607b      	str	r3, [r7, #4]
    }
 8002f2c:	bf00      	nop
 8002f2e:	bf00      	nop
 8002f30:	e7fd      	b.n	8002f2e <vTaskStartScheduler+0xa6>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002f32:	4b0a      	ldr	r3, [pc, #40]	@ (8002f5c <vTaskStartScheduler+0xd4>)
 8002f34:	681b      	ldr	r3, [r3, #0]
}
 8002f36:	bf00      	nop
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000218 	.word	0x20000218
 8002f44:	08007dfc 	.word	0x08007dfc
 8002f48:	0800384d 	.word	0x0800384d
 8002f4c:	20000214 	.word	0x20000214
 8002f50:	20000200 	.word	0x20000200
 8002f54:	200001f8 	.word	0x200001f8
 8002f58:	2000011c 	.word	0x2000011c
 8002f5c:	2000000c 	.word	0x2000000c

08002f60 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002f64:	4b04      	ldr	r3, [pc, #16]	@ (8002f78 <vTaskSuspendAll+0x18>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	4a03      	ldr	r2, [pc, #12]	@ (8002f78 <vTaskSuspendAll+0x18>)
 8002f6c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002f6e:	bf00      	nop
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	2000021c 	.word	0x2000021c

08002f7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002f8a:	4b6e      	ldr	r3, [pc, #440]	@ (8003144 <xTaskResumeAll+0x1c8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10d      	bne.n	8002fae <xTaskResumeAll+0x32>
        __asm volatile
 8002f92:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002f96:	b672      	cpsid	i
 8002f98:	f383 8811 	msr	BASEPRI, r3
 8002f9c:	f3bf 8f6f 	isb	sy
 8002fa0:	f3bf 8f4f 	dsb	sy
 8002fa4:	b662      	cpsie	i
 8002fa6:	607b      	str	r3, [r7, #4]
    }
 8002fa8:	bf00      	nop
 8002faa:	bf00      	nop
 8002fac:	e7fd      	b.n	8002faa <xTaskResumeAll+0x2e>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002fae:	f001 fab5 	bl	800451c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002fb2:	4b64      	ldr	r3, [pc, #400]	@ (8003144 <xTaskResumeAll+0x1c8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	4a62      	ldr	r2, [pc, #392]	@ (8003144 <xTaskResumeAll+0x1c8>)
 8002fba:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fbc:	4b61      	ldr	r3, [pc, #388]	@ (8003144 <xTaskResumeAll+0x1c8>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f040 80b8 	bne.w	8003136 <xTaskResumeAll+0x1ba>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002fc6:	4b60      	ldr	r3, [pc, #384]	@ (8003148 <xTaskResumeAll+0x1cc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 80b3 	beq.w	8003136 <xTaskResumeAll+0x1ba>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fd0:	e08e      	b.n	80030f0 <xTaskResumeAll+0x174>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fd2:	4b5e      	ldr	r3, [pc, #376]	@ (800314c <xTaskResumeAll+0x1d0>)
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fde:	613b      	str	r3, [r7, #16]
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	69fa      	ldr	r2, [r7, #28]
 8002fe6:	6a12      	ldr	r2, [r2, #32]
 8002fe8:	609a      	str	r2, [r3, #8]
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	69fa      	ldr	r2, [r7, #28]
 8002ff0:	69d2      	ldr	r2, [r2, #28]
 8002ff2:	605a      	str	r2, [r3, #4]
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	3318      	adds	r3, #24
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d103      	bne.n	8003008 <xTaskResumeAll+0x8c>
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	6a1a      	ldr	r2, [r3, #32]
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	605a      	str	r2, [r3, #4]
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	2200      	movs	r2, #0
 800300c:	629a      	str	r2, [r3, #40]	@ 0x28
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	1e5a      	subs	r2, r3, #1
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	69fa      	ldr	r2, [r7, #28]
 8003024:	68d2      	ldr	r2, [r2, #12]
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	69fa      	ldr	r2, [r7, #28]
 800302e:	6892      	ldr	r2, [r2, #8]
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	3304      	adds	r3, #4
 800303a:	429a      	cmp	r2, r3
 800303c:	d103      	bne.n	8003046 <xTaskResumeAll+0xca>
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	2200      	movs	r2, #0
 800304a:	615a      	str	r2, [r3, #20]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	1e5a      	subs	r2, r3, #1
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	4618      	mov	r0, r3
 800305a:	f003 fccd 	bl	80069f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003062:	2201      	movs	r2, #1
 8003064:	409a      	lsls	r2, r3
 8003066:	4b3a      	ldr	r3, [pc, #232]	@ (8003150 <xTaskResumeAll+0x1d4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4313      	orrs	r3, r2
 800306c:	4a38      	ldr	r2, [pc, #224]	@ (8003150 <xTaskResumeAll+0x1d4>)
 800306e:	6013      	str	r3, [r2, #0]
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003074:	4937      	ldr	r1, [pc, #220]	@ (8003154 <xTaskResumeAll+0x1d8>)
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	3304      	adds	r3, #4
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	60bb      	str	r3, [r7, #8]
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	60da      	str	r2, [r3, #12]
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	69fa      	ldr	r2, [r7, #28]
 800309a:	3204      	adds	r2, #4
 800309c:	605a      	str	r2, [r3, #4]
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	1d1a      	adds	r2, r3, #4
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	609a      	str	r2, [r3, #8]
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4a28      	ldr	r2, [pc, #160]	@ (8003154 <xTaskResumeAll+0x1d8>)
 80030b4:	441a      	add	r2, r3
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	615a      	str	r2, [r3, #20]
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030be:	4925      	ldr	r1, [pc, #148]	@ (8003154 <xTaskResumeAll+0x1d8>)
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	1c59      	adds	r1, r3, #1
 80030ce:	4821      	ldr	r0, [pc, #132]	@ (8003154 <xTaskResumeAll+0x1d8>)
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4403      	add	r3, r0
 80030da:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003158 <xTaskResumeAll+0x1dc>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d302      	bcc.n	80030f0 <xTaskResumeAll+0x174>
                    {
                        xYieldPending = pdTRUE;
 80030ea:	4b1c      	ldr	r3, [pc, #112]	@ (800315c <xTaskResumeAll+0x1e0>)
 80030ec:	2201      	movs	r2, #1
 80030ee:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030f0:	4b16      	ldr	r3, [pc, #88]	@ (800314c <xTaskResumeAll+0x1d0>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f47f af6c 	bne.w	8002fd2 <xTaskResumeAll+0x56>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <xTaskResumeAll+0x188>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003100:	f000 fc34 	bl	800396c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003104:	4b16      	ldr	r3, [pc, #88]	@ (8003160 <xTaskResumeAll+0x1e4>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d010      	beq.n	8003132 <xTaskResumeAll+0x1b6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003110:	f000 f856 	bl	80031c0 <xTaskIncrementTick>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <xTaskResumeAll+0x1a4>
                            {
                                xYieldPending = pdTRUE;
 800311a:	4b10      	ldr	r3, [pc, #64]	@ (800315c <xTaskResumeAll+0x1e0>)
 800311c:	2201      	movs	r2, #1
 800311e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	3b01      	subs	r3, #1
 8003124:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1f1      	bne.n	8003110 <xTaskResumeAll+0x194>

                        xPendedTicks = 0;
 800312c:	4b0c      	ldr	r3, [pc, #48]	@ (8003160 <xTaskResumeAll+0x1e4>)
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003132:	4b0a      	ldr	r3, [pc, #40]	@ (800315c <xTaskResumeAll+0x1e0>)
 8003134:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003136:	f001 fa27 	bl	8004588 <vPortExitCritical>

    return xAlreadyYielded;
 800313a:	697b      	ldr	r3, [r7, #20]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3720      	adds	r7, #32
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	2000021c 	.word	0x2000021c
 8003148:	200001f4 	.word	0x200001f4
 800314c:	200001b4 	.word	0x200001b4
 8003150:	200001fc 	.word	0x200001fc
 8003154:	20000120 	.word	0x20000120
 8003158:	2000011c 	.word	0x2000011c
 800315c:	20000208 	.word	0x20000208
 8003160:	20000204 	.word	0x20000204

08003164 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800316a:	4b05      	ldr	r3, [pc, #20]	@ (8003180 <xTaskGetTickCount+0x1c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003170:	687b      	ldr	r3, [r7, #4]
}
 8003172:	4618      	mov	r0, r3
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	200001f8 	.word	0x200001f8

08003184 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800318a:	f001 fab9 	bl	8004700 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800318e:	2300      	movs	r3, #0
 8003190:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003192:	4b04      	ldr	r3, [pc, #16]	@ (80031a4 <xTaskGetTickCountFromISR+0x20>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003198:	683b      	ldr	r3, [r7, #0]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	200001f8 	.word	0x200001f8

080031a8 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 80031ac:	4b03      	ldr	r3, [pc, #12]	@ (80031bc <uxTaskGetNumberOfTasks+0x14>)
 80031ae:	681b      	ldr	r3, [r3, #0]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	200001f4 	.word	0x200001f4

080031c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08a      	sub	sp, #40	@ 0x28
 80031c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80031c6:	2300      	movs	r3, #0
 80031c8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031ca:	4b71      	ldr	r3, [pc, #452]	@ (8003390 <xTaskIncrementTick+0x1d0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f040 80d4 	bne.w	800337c <xTaskIncrementTick+0x1bc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003394 <xTaskIncrementTick+0x1d4>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	3301      	adds	r3, #1
 80031da:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80031dc:	4a6d      	ldr	r2, [pc, #436]	@ (8003394 <xTaskIncrementTick+0x1d4>)
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d123      	bne.n	8003230 <xTaskIncrementTick+0x70>
        {
            taskSWITCH_DELAYED_LISTS();
 80031e8:	4b6b      	ldr	r3, [pc, #428]	@ (8003398 <xTaskIncrementTick+0x1d8>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00d      	beq.n	800320e <xTaskIncrementTick+0x4e>
        __asm volatile
 80031f2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80031f6:	b672      	cpsid	i
 80031f8:	f383 8811 	msr	BASEPRI, r3
 80031fc:	f3bf 8f6f 	isb	sy
 8003200:	f3bf 8f4f 	dsb	sy
 8003204:	b662      	cpsie	i
 8003206:	607b      	str	r3, [r7, #4]
    }
 8003208:	bf00      	nop
 800320a:	bf00      	nop
 800320c:	e7fd      	b.n	800320a <xTaskIncrementTick+0x4a>
 800320e:	4b62      	ldr	r3, [pc, #392]	@ (8003398 <xTaskIncrementTick+0x1d8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	61fb      	str	r3, [r7, #28]
 8003214:	4b61      	ldr	r3, [pc, #388]	@ (800339c <xTaskIncrementTick+0x1dc>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a5f      	ldr	r2, [pc, #380]	@ (8003398 <xTaskIncrementTick+0x1d8>)
 800321a:	6013      	str	r3, [r2, #0]
 800321c:	4a5f      	ldr	r2, [pc, #380]	@ (800339c <xTaskIncrementTick+0x1dc>)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	4b5f      	ldr	r3, [pc, #380]	@ (80033a0 <xTaskIncrementTick+0x1e0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	3301      	adds	r3, #1
 8003228:	4a5d      	ldr	r2, [pc, #372]	@ (80033a0 <xTaskIncrementTick+0x1e0>)
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	f000 fb9e 	bl	800396c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003230:	4b5c      	ldr	r3, [pc, #368]	@ (80033a4 <xTaskIncrementTick+0x1e4>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6a3a      	ldr	r2, [r7, #32]
 8003236:	429a      	cmp	r2, r3
 8003238:	f0c0 80a5 	bcc.w	8003386 <xTaskIncrementTick+0x1c6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800323c:	4b56      	ldr	r3, [pc, #344]	@ (8003398 <xTaskIncrementTick+0x1d8>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d104      	bne.n	8003250 <xTaskIncrementTick+0x90>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003246:	4b57      	ldr	r3, [pc, #348]	@ (80033a4 <xTaskIncrementTick+0x1e4>)
 8003248:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800324c:	601a      	str	r2, [r3, #0]
                    break;
 800324e:	e09a      	b.n	8003386 <xTaskIncrementTick+0x1c6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003250:	4b51      	ldr	r3, [pc, #324]	@ (8003398 <xTaskIncrementTick+0x1d8>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003260:	6a3a      	ldr	r2, [r7, #32]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	429a      	cmp	r2, r3
 8003266:	d203      	bcs.n	8003270 <xTaskIncrementTick+0xb0>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003268:	4a4e      	ldr	r2, [pc, #312]	@ (80033a4 <xTaskIncrementTick+0x1e4>)
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800326e:	e08a      	b.n	8003386 <xTaskIncrementTick+0x1c6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	68d2      	ldr	r2, [r2, #12]
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	6892      	ldr	r2, [r2, #8]
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	3304      	adds	r3, #4
 8003292:	429a      	cmp	r2, r3
 8003294:	d103      	bne.n	800329e <xTaskIncrementTick+0xde>
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	605a      	str	r2, [r3, #4]
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	2200      	movs	r2, #0
 80032a2:	615a      	str	r2, [r3, #20]
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	1e5a      	subs	r2, r3, #1
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d01e      	beq.n	80032f4 <xTaskIncrementTick+0x134>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	6a12      	ldr	r2, [r2, #32]
 80032c4:	609a      	str	r2, [r3, #8]
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	69d2      	ldr	r2, [r2, #28]
 80032ce:	605a      	str	r2, [r3, #4]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	3318      	adds	r3, #24
 80032d8:	429a      	cmp	r2, r3
 80032da:	d103      	bne.n	80032e4 <xTaskIncrementTick+0x124>
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	6a1a      	ldr	r2, [r3, #32]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	605a      	str	r2, [r3, #4]
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	2200      	movs	r2, #0
 80032e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	1e5a      	subs	r2, r3, #1
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f003 fb7e 	bl	80069f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003300:	2201      	movs	r2, #1
 8003302:	409a      	lsls	r2, r3
 8003304:	4b28      	ldr	r3, [pc, #160]	@ (80033a8 <xTaskIncrementTick+0x1e8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4313      	orrs	r3, r2
 800330a:	4a27      	ldr	r2, [pc, #156]	@ (80033a8 <xTaskIncrementTick+0x1e8>)
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003312:	4926      	ldr	r1, [pc, #152]	@ (80033ac <xTaskIncrementTick+0x1ec>)
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	3304      	adds	r3, #4
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	60bb      	str	r3, [r7, #8]
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	609a      	str	r2, [r3, #8]
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	60da      	str	r2, [r3, #12]
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	3204      	adds	r2, #4
 800333a:	605a      	str	r2, [r3, #4]
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	1d1a      	adds	r2, r3, #4
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003348:	4613      	mov	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4a16      	ldr	r2, [pc, #88]	@ (80033ac <xTaskIncrementTick+0x1ec>)
 8003352:	441a      	add	r2, r3
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	615a      	str	r2, [r3, #20]
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800335c:	4913      	ldr	r1, [pc, #76]	@ (80033ac <xTaskIncrementTick+0x1ec>)
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	1c59      	adds	r1, r3, #1
 800336c:	480f      	ldr	r0, [pc, #60]	@ (80033ac <xTaskIncrementTick+0x1ec>)
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4403      	add	r3, r0
 8003378:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800337a:	e75f      	b.n	800323c <xTaskIncrementTick+0x7c>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800337c:	4b0c      	ldr	r3, [pc, #48]	@ (80033b0 <xTaskIncrementTick+0x1f0>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	3301      	adds	r3, #1
 8003382:	4a0b      	ldr	r2, [pc, #44]	@ (80033b0 <xTaskIncrementTick+0x1f0>)
 8003384:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003388:	4618      	mov	r0, r3
 800338a:	3728      	adds	r7, #40	@ 0x28
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	2000021c 	.word	0x2000021c
 8003394:	200001f8 	.word	0x200001f8
 8003398:	200001ac 	.word	0x200001ac
 800339c:	200001b0 	.word	0x200001b0
 80033a0:	2000020c 	.word	0x2000020c
 80033a4:	20000214 	.word	0x20000214
 80033a8:	200001fc 	.word	0x200001fc
 80033ac:	20000120 	.word	0x20000120
 80033b0:	20000204 	.word	0x20000204

080033b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033ba:	4b31      	ldr	r3, [pc, #196]	@ (8003480 <vTaskSwitchContext+0xcc>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80033c2:	4b30      	ldr	r3, [pc, #192]	@ (8003484 <vTaskSwitchContext+0xd0>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80033c8:	e055      	b.n	8003476 <vTaskSwitchContext+0xc2>
        xYieldPending = pdFALSE;
 80033ca:	4b2e      	ldr	r3, [pc, #184]	@ (8003484 <vTaskSwitchContext+0xd0>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003488 <vTaskSwitchContext+0xd4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	fab3 f383 	clz	r3, r3
 80033dc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80033de:	7afb      	ldrb	r3, [r7, #11]
 80033e0:	f1c3 031f 	rsb	r3, r3, #31
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	4929      	ldr	r1, [pc, #164]	@ (800348c <vTaskSwitchContext+0xd8>)
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10d      	bne.n	8003416 <vTaskSwitchContext+0x62>
        __asm volatile
 80033fa:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80033fe:	b672      	cpsid	i
 8003400:	f383 8811 	msr	BASEPRI, r3
 8003404:	f3bf 8f6f 	isb	sy
 8003408:	f3bf 8f4f 	dsb	sy
 800340c:	b662      	cpsie	i
 800340e:	607b      	str	r3, [r7, #4]
    }
 8003410:	bf00      	nop
 8003412:	bf00      	nop
 8003414:	e7fd      	b.n	8003412 <vTaskSwitchContext+0x5e>
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4a1a      	ldr	r2, [pc, #104]	@ (800348c <vTaskSwitchContext+0xd8>)
 8003422:	4413      	add	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	605a      	str	r2, [r3, #4]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	3308      	adds	r3, #8
 8003438:	429a      	cmp	r2, r3
 800343a:	d104      	bne.n	8003446 <vTaskSwitchContext+0x92>
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	4a10      	ldr	r2, [pc, #64]	@ (8003490 <vTaskSwitchContext+0xdc>)
 800344e:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003450:	4b0f      	ldr	r3, [pc, #60]	@ (8003490 <vTaskSwitchContext+0xdc>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3334      	adds	r3, #52	@ 0x34
 8003456:	2205      	movs	r2, #5
 8003458:	490e      	ldr	r1, [pc, #56]	@ (8003494 <vTaskSwitchContext+0xe0>)
 800345a:	4618      	mov	r0, r3
 800345c:	f003 fea2 	bl	80071a4 <memcmp>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d005      	beq.n	8003472 <vTaskSwitchContext+0xbe>
 8003466:	4b0a      	ldr	r3, [pc, #40]	@ (8003490 <vTaskSwitchContext+0xdc>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f003 fa82 	bl	8006974 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003470:	e001      	b.n	8003476 <vTaskSwitchContext+0xc2>
        traceTASK_SWITCHED_IN();
 8003472:	f003 fa21 	bl	80068b8 <SEGGER_SYSVIEW_OnIdle>
}
 8003476:	bf00      	nop
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	2000021c 	.word	0x2000021c
 8003484:	20000208 	.word	0x20000208
 8003488:	200001fc 	.word	0x200001fc
 800348c:	20000120 	.word	0x20000120
 8003490:	2000011c 	.word	0x2000011c
 8003494:	08007dfc 	.word	0x08007dfc

08003498 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10d      	bne.n	80034c4 <vTaskPlaceOnEventList+0x2c>
        __asm volatile
 80034a8:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80034ac:	b672      	cpsid	i
 80034ae:	f383 8811 	msr	BASEPRI, r3
 80034b2:	f3bf 8f6f 	isb	sy
 80034b6:	f3bf 8f4f 	dsb	sy
 80034ba:	b662      	cpsie	i
 80034bc:	60fb      	str	r3, [r7, #12]
    }
 80034be:	bf00      	nop
 80034c0:	bf00      	nop
 80034c2:	e7fd      	b.n	80034c0 <vTaskPlaceOnEventList+0x28>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034c4:	4b07      	ldr	r3, [pc, #28]	@ (80034e4 <vTaskPlaceOnEventList+0x4c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3318      	adds	r3, #24
 80034ca:	4619      	mov	r1, r3
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7fe ff14 	bl	80022fa <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034d2:	2101      	movs	r1, #1
 80034d4:	6838      	ldr	r0, [r7, #0]
 80034d6:	f000 fb31 	bl	8003b3c <prvAddCurrentTaskToDelayedList>
}
 80034da:	bf00      	nop
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	2000011c 	.word	0x2000011c

080034e8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10d      	bne.n	8003516 <vTaskPlaceOnEventListRestricted+0x2e>
        __asm volatile
 80034fa:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80034fe:	b672      	cpsid	i
 8003500:	f383 8811 	msr	BASEPRI, r3
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	b662      	cpsie	i
 800350e:	613b      	str	r3, [r7, #16]
    }
 8003510:	bf00      	nop
 8003512:	bf00      	nop
 8003514:	e7fd      	b.n	8003512 <vTaskPlaceOnEventListRestricted+0x2a>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	4b15      	ldr	r3, [pc, #84]	@ (8003574 <vTaskPlaceOnEventListRestricted+0x8c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	61da      	str	r2, [r3, #28]
 8003524:	4b13      	ldr	r3, [pc, #76]	@ (8003574 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	6892      	ldr	r2, [r2, #8]
 800352c:	621a      	str	r2, [r3, #32]
 800352e:	4b11      	ldr	r3, [pc, #68]	@ (8003574 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	3218      	adds	r2, #24
 8003538:	605a      	str	r2, [r3, #4]
 800353a:	4b0e      	ldr	r3, [pc, #56]	@ (8003574 <vTaskPlaceOnEventListRestricted+0x8c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f103 0218 	add.w	r2, r3, #24
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	609a      	str	r2, [r3, #8]
 8003546:	4b0b      	ldr	r3, [pc, #44]	@ (8003574 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	629a      	str	r2, [r3, #40]	@ 0x28
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d002      	beq.n	8003564 <vTaskPlaceOnEventListRestricted+0x7c>
        {
            xTicksToWait = portMAX_DELAY;
 800355e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003562:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	68b8      	ldr	r0, [r7, #8]
 8003568:	f000 fae8 	bl	8003b3c <prvAddCurrentTaskToDelayedList>
    }
 800356c:	bf00      	nop
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	2000011c 	.word	0x2000011c

08003578 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08a      	sub	sp, #40	@ 0x28
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10d      	bne.n	80035aa <xTaskRemoveFromEventList+0x32>
        __asm volatile
 800358e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003592:	b672      	cpsid	i
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	b662      	cpsie	i
 80035a2:	60fb      	str	r3, [r7, #12]
    }
 80035a4:	bf00      	nop
 80035a6:	bf00      	nop
 80035a8:	e7fd      	b.n	80035a6 <xTaskRemoveFromEventList+0x2e>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ae:	61fb      	str	r3, [r7, #28]
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	6a3a      	ldr	r2, [r7, #32]
 80035b6:	6a12      	ldr	r2, [r2, #32]
 80035b8:	609a      	str	r2, [r3, #8]
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	6a3a      	ldr	r2, [r7, #32]
 80035c0:	69d2      	ldr	r2, [r2, #28]
 80035c2:	605a      	str	r2, [r3, #4]
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	3318      	adds	r3, #24
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d103      	bne.n	80035d8 <xTaskRemoveFromEventList+0x60>
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	6a1a      	ldr	r2, [r3, #32]
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	605a      	str	r2, [r3, #4]
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	2200      	movs	r2, #0
 80035dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	1e5a      	subs	r2, r3, #1
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035e8:	4b4b      	ldr	r3, [pc, #300]	@ (8003718 <xTaskRemoveFromEventList+0x1a0>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d162      	bne.n	80036b6 <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	6a3a      	ldr	r2, [r7, #32]
 80035fc:	68d2      	ldr	r2, [r2, #12]
 80035fe:	609a      	str	r2, [r3, #8]
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	6a3a      	ldr	r2, [r7, #32]
 8003606:	6892      	ldr	r2, [r2, #8]
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	3304      	adds	r3, #4
 8003612:	429a      	cmp	r2, r3
 8003614:	d103      	bne.n	800361e <xTaskRemoveFromEventList+0xa6>
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	605a      	str	r2, [r3, #4]
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	2200      	movs	r2, #0
 8003622:	615a      	str	r2, [r3, #20]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	1e5a      	subs	r2, r3, #1
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	4618      	mov	r0, r3
 8003632:	f003 f9e1 	bl	80069f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363a:	2201      	movs	r2, #1
 800363c:	409a      	lsls	r2, r3
 800363e:	4b37      	ldr	r3, [pc, #220]	@ (800371c <xTaskRemoveFromEventList+0x1a4>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4313      	orrs	r3, r2
 8003644:	4a35      	ldr	r2, [pc, #212]	@ (800371c <xTaskRemoveFromEventList+0x1a4>)
 8003646:	6013      	str	r3, [r2, #0]
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800364c:	4934      	ldr	r1, [pc, #208]	@ (8003720 <xTaskRemoveFromEventList+0x1a8>)
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	440b      	add	r3, r1
 8003658:	3304      	adds	r3, #4
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	613b      	str	r3, [r7, #16]
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	609a      	str	r2, [r3, #8]
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	60da      	str	r2, [r3, #12]
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	6a3a      	ldr	r2, [r7, #32]
 8003672:	3204      	adds	r2, #4
 8003674:	605a      	str	r2, [r3, #4]
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	1d1a      	adds	r2, r3, #4
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	609a      	str	r2, [r3, #8]
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003682:	4613      	mov	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4a25      	ldr	r2, [pc, #148]	@ (8003720 <xTaskRemoveFromEventList+0x1a8>)
 800368c:	441a      	add	r2, r3
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	615a      	str	r2, [r3, #20]
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003696:	4922      	ldr	r1, [pc, #136]	@ (8003720 <xTaskRemoveFromEventList+0x1a8>)
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	1c59      	adds	r1, r3, #1
 80036a6:	481e      	ldr	r0, [pc, #120]	@ (8003720 <xTaskRemoveFromEventList+0x1a8>)
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4403      	add	r3, r0
 80036b2:	6019      	str	r1, [r3, #0]
 80036b4:	e01b      	b.n	80036ee <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80036b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003724 <xTaskRemoveFromEventList+0x1ac>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	61bb      	str	r3, [r7, #24]
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	61da      	str	r2, [r3, #28]
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	621a      	str	r2, [r3, #32]
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	6a3a      	ldr	r2, [r7, #32]
 80036d0:	3218      	adds	r2, #24
 80036d2:	605a      	str	r2, [r3, #4]
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	f103 0218 	add.w	r2, r3, #24
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	609a      	str	r2, [r3, #8]
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	4a10      	ldr	r2, [pc, #64]	@ (8003724 <xTaskRemoveFromEventList+0x1ac>)
 80036e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80036e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003724 <xTaskRemoveFromEventList+0x1ac>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3301      	adds	r3, #1
 80036ea:	4a0e      	ldr	r2, [pc, #56]	@ (8003724 <xTaskRemoveFromEventList+0x1ac>)
 80036ec:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036ee:	6a3b      	ldr	r3, [r7, #32]
 80036f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003728 <xTaskRemoveFromEventList+0x1b0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d905      	bls.n	8003708 <xTaskRemoveFromEventList+0x190>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80036fc:	2301      	movs	r3, #1
 80036fe:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003700:	4b0a      	ldr	r3, [pc, #40]	@ (800372c <xTaskRemoveFromEventList+0x1b4>)
 8003702:	2201      	movs	r2, #1
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	e001      	b.n	800370c <xTaskRemoveFromEventList+0x194>
    }
    else
    {
        xReturn = pdFALSE;
 8003708:	2300      	movs	r3, #0
 800370a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 800370c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800370e:	4618      	mov	r0, r3
 8003710:	3728      	adds	r7, #40	@ 0x28
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	2000021c 	.word	0x2000021c
 800371c:	200001fc 	.word	0x200001fc
 8003720:	20000120 	.word	0x20000120
 8003724:	200001b4 	.word	0x200001b4
 8003728:	2000011c 	.word	0x2000011c
 800372c:	20000208 	.word	0x20000208

08003730 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003738:	4b06      	ldr	r3, [pc, #24]	@ (8003754 <vTaskInternalSetTimeOutState+0x24>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003740:	4b05      	ldr	r3, [pc, #20]	@ (8003758 <vTaskInternalSetTimeOutState+0x28>)
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	605a      	str	r2, [r3, #4]
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	2000020c 	.word	0x2000020c
 8003758:	200001f8 	.word	0x200001f8

0800375c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b088      	sub	sp, #32
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10d      	bne.n	8003788 <xTaskCheckForTimeOut+0x2c>
        __asm volatile
 800376c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003770:	b672      	cpsid	i
 8003772:	f383 8811 	msr	BASEPRI, r3
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	b662      	cpsie	i
 8003780:	613b      	str	r3, [r7, #16]
    }
 8003782:	bf00      	nop
 8003784:	bf00      	nop
 8003786:	e7fd      	b.n	8003784 <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10d      	bne.n	80037aa <xTaskCheckForTimeOut+0x4e>
        __asm volatile
 800378e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003792:	b672      	cpsid	i
 8003794:	f383 8811 	msr	BASEPRI, r3
 8003798:	f3bf 8f6f 	isb	sy
 800379c:	f3bf 8f4f 	dsb	sy
 80037a0:	b662      	cpsie	i
 80037a2:	60fb      	str	r3, [r7, #12]
    }
 80037a4:	bf00      	nop
 80037a6:	bf00      	nop
 80037a8:	e7fd      	b.n	80037a6 <xTaskCheckForTimeOut+0x4a>

    taskENTER_CRITICAL();
 80037aa:	f000 feb7 	bl	800451c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80037ae:	4b1f      	ldr	r3, [pc, #124]	@ (800382c <xTaskCheckForTimeOut+0xd0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037c6:	d102      	bne.n	80037ce <xTaskCheckForTimeOut+0x72>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80037c8:	2300      	movs	r3, #0
 80037ca:	61fb      	str	r3, [r7, #28]
 80037cc:	e026      	b.n	800381c <xTaskCheckForTimeOut+0xc0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	4b17      	ldr	r3, [pc, #92]	@ (8003830 <xTaskCheckForTimeOut+0xd4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d00a      	beq.n	80037f0 <xTaskCheckForTimeOut+0x94>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d305      	bcc.n	80037f0 <xTaskCheckForTimeOut+0x94>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80037e4:	2301      	movs	r3, #1
 80037e6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	e015      	b.n	800381c <xTaskCheckForTimeOut+0xc0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d20b      	bcs.n	8003812 <xTaskCheckForTimeOut+0xb6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	1ad2      	subs	r2, r2, r3
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff ff92 	bl	8003730 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800380c:	2300      	movs	r3, #0
 800380e:	61fb      	str	r3, [r7, #28]
 8003810:	e004      	b.n	800381c <xTaskCheckForTimeOut+0xc0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003818:	2301      	movs	r3, #1
 800381a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800381c:	f000 feb4 	bl	8004588 <vPortExitCritical>

    return xReturn;
 8003820:	69fb      	ldr	r3, [r7, #28]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3720      	adds	r7, #32
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	200001f8 	.word	0x200001f8
 8003830:	2000020c 	.word	0x2000020c

08003834 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003838:	4b03      	ldr	r3, [pc, #12]	@ (8003848 <vTaskMissedYield+0x14>)
 800383a:	2201      	movs	r2, #1
 800383c:	601a      	str	r2, [r3, #0]
}
 800383e:	bf00      	nop
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	20000208 	.word	0x20000208

0800384c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003854:	f000 f84c 	bl	80038f0 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8003858:	4b04      	ldr	r3, [pc, #16]	@ (800386c <prvIdleTask+0x20>)
 800385a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003868:	bf00      	nop
 800386a:	e7f3      	b.n	8003854 <prvIdleTask+0x8>
 800386c:	e000ed04 	.word	0xe000ed04

08003870 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003876:	2300      	movs	r3, #0
 8003878:	607b      	str	r3, [r7, #4]
 800387a:	e00c      	b.n	8003896 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	4613      	mov	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4a12      	ldr	r2, [pc, #72]	@ (80038d0 <prvInitialiseTaskLists+0x60>)
 8003888:	4413      	add	r3, r2
 800388a:	4618      	mov	r0, r3
 800388c:	f7fe fd08 	bl	80022a0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3301      	adds	r3, #1
 8003894:	607b      	str	r3, [r7, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b04      	cmp	r3, #4
 800389a:	d9ef      	bls.n	800387c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800389c:	480d      	ldr	r0, [pc, #52]	@ (80038d4 <prvInitialiseTaskLists+0x64>)
 800389e:	f7fe fcff 	bl	80022a0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80038a2:	480d      	ldr	r0, [pc, #52]	@ (80038d8 <prvInitialiseTaskLists+0x68>)
 80038a4:	f7fe fcfc 	bl	80022a0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80038a8:	480c      	ldr	r0, [pc, #48]	@ (80038dc <prvInitialiseTaskLists+0x6c>)
 80038aa:	f7fe fcf9 	bl	80022a0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80038ae:	480c      	ldr	r0, [pc, #48]	@ (80038e0 <prvInitialiseTaskLists+0x70>)
 80038b0:	f7fe fcf6 	bl	80022a0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80038b4:	480b      	ldr	r0, [pc, #44]	@ (80038e4 <prvInitialiseTaskLists+0x74>)
 80038b6:	f7fe fcf3 	bl	80022a0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80038ba:	4b0b      	ldr	r3, [pc, #44]	@ (80038e8 <prvInitialiseTaskLists+0x78>)
 80038bc:	4a05      	ldr	r2, [pc, #20]	@ (80038d4 <prvInitialiseTaskLists+0x64>)
 80038be:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80038c0:	4b0a      	ldr	r3, [pc, #40]	@ (80038ec <prvInitialiseTaskLists+0x7c>)
 80038c2:	4a05      	ldr	r2, [pc, #20]	@ (80038d8 <prvInitialiseTaskLists+0x68>)
 80038c4:	601a      	str	r2, [r3, #0]
}
 80038c6:	bf00      	nop
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	20000120 	.word	0x20000120
 80038d4:	20000184 	.word	0x20000184
 80038d8:	20000198 	.word	0x20000198
 80038dc:	200001b4 	.word	0x200001b4
 80038e0:	200001c8 	.word	0x200001c8
 80038e4:	200001e0 	.word	0x200001e0
 80038e8:	200001ac 	.word	0x200001ac
 80038ec:	200001b0 	.word	0x200001b0

080038f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038f6:	e019      	b.n	800392c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80038f8:	f000 fe10 	bl	800451c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038fc:	4b10      	ldr	r3, [pc, #64]	@ (8003940 <prvCheckTasksWaitingTermination+0x50>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3304      	adds	r3, #4
 8003908:	4618      	mov	r0, r3
 800390a:	f7fe fd2f 	bl	800236c <uxListRemove>
                --uxCurrentNumberOfTasks;
 800390e:	4b0d      	ldr	r3, [pc, #52]	@ (8003944 <prvCheckTasksWaitingTermination+0x54>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	3b01      	subs	r3, #1
 8003914:	4a0b      	ldr	r2, [pc, #44]	@ (8003944 <prvCheckTasksWaitingTermination+0x54>)
 8003916:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003918:	4b0b      	ldr	r3, [pc, #44]	@ (8003948 <prvCheckTasksWaitingTermination+0x58>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3b01      	subs	r3, #1
 800391e:	4a0a      	ldr	r2, [pc, #40]	@ (8003948 <prvCheckTasksWaitingTermination+0x58>)
 8003920:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003922:	f000 fe31 	bl	8004588 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f810 	bl	800394c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800392c:	4b06      	ldr	r3, [pc, #24]	@ (8003948 <prvCheckTasksWaitingTermination+0x58>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1e1      	bne.n	80038f8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003934:	bf00      	nop
 8003936:	bf00      	nop
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	200001c8 	.word	0x200001c8
 8003944:	200001f4 	.word	0x200001f4
 8003948:	200001dc 	.word	0x200001dc

0800394c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003958:	4618      	mov	r0, r3
 800395a:	f000 ffd7 	bl	800490c <vPortFree>
            vPortFree( pxTCB );
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 ffd4 	bl	800490c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003964:	bf00      	nop
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003970:	4b0a      	ldr	r3, [pc, #40]	@ (800399c <prvResetNextTaskUnblockTime+0x30>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d104      	bne.n	8003984 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800397a:	4b09      	ldr	r3, [pc, #36]	@ (80039a0 <prvResetNextTaskUnblockTime+0x34>)
 800397c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003980:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003982:	e005      	b.n	8003990 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003984:	4b05      	ldr	r3, [pc, #20]	@ (800399c <prvResetNextTaskUnblockTime+0x30>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a04      	ldr	r2, [pc, #16]	@ (80039a0 <prvResetNextTaskUnblockTime+0x34>)
 800398e:	6013      	str	r3, [r2, #0]
}
 8003990:	bf00      	nop
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	200001ac 	.word	0x200001ac
 80039a0:	20000214 	.word	0x20000214

080039a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80039aa:	4b0b      	ldr	r3, [pc, #44]	@ (80039d8 <xTaskGetSchedulerState+0x34>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d102      	bne.n	80039b8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80039b2:	2301      	movs	r3, #1
 80039b4:	607b      	str	r3, [r7, #4]
 80039b6:	e008      	b.n	80039ca <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039b8:	4b08      	ldr	r3, [pc, #32]	@ (80039dc <xTaskGetSchedulerState+0x38>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d102      	bne.n	80039c6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80039c0:	2302      	movs	r3, #2
 80039c2:	607b      	str	r3, [r7, #4]
 80039c4:	e001      	b.n	80039ca <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80039c6:	2300      	movs	r3, #0
 80039c8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80039ca:	687b      	ldr	r3, [r7, #4]
    }
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	20000200 	.word	0x20000200
 80039dc:	2000021c 	.word	0x2000021c

080039e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 80039ec:	2300      	movs	r3, #0
 80039ee:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 8096 	beq.w	8003b24 <xTaskPriorityDisinherit+0x144>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80039f8:	4b4d      	ldr	r3, [pc, #308]	@ (8003b30 <xTaskPriorityDisinherit+0x150>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d00d      	beq.n	8003a1e <xTaskPriorityDisinherit+0x3e>
        __asm volatile
 8003a02:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003a06:	b672      	cpsid	i
 8003a08:	f383 8811 	msr	BASEPRI, r3
 8003a0c:	f3bf 8f6f 	isb	sy
 8003a10:	f3bf 8f4f 	dsb	sy
 8003a14:	b662      	cpsie	i
 8003a16:	613b      	str	r3, [r7, #16]
    }
 8003a18:	bf00      	nop
 8003a1a:	bf00      	nop
 8003a1c:	e7fd      	b.n	8003a1a <xTaskPriorityDisinherit+0x3a>
            configASSERT( pxTCB->uxMutexesHeld );
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10d      	bne.n	8003a42 <xTaskPriorityDisinherit+0x62>
        __asm volatile
 8003a26:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003a2a:	b672      	cpsid	i
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	b662      	cpsie	i
 8003a3a:	60fb      	str	r3, [r7, #12]
    }
 8003a3c:	bf00      	nop
 8003a3e:	bf00      	nop
 8003a40:	e7fd      	b.n	8003a3e <xTaskPriorityDisinherit+0x5e>
            ( pxTCB->uxMutexesHeld )--;
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a46:	1e5a      	subs	r2, r3, #1
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d065      	beq.n	8003b24 <xTaskPriorityDisinherit+0x144>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d161      	bne.n	8003b24 <xTaskPriorityDisinherit+0x144>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	3304      	adds	r3, #4
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7fe fc81 	bl	800236c <uxListRemove>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10a      	bne.n	8003a86 <xTaskPriorityDisinherit+0xa6>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a74:	2201      	movs	r2, #1
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	43da      	mvns	r2, r3
 8003a7c:	4b2d      	ldr	r3, [pc, #180]	@ (8003b34 <xTaskPriorityDisinherit+0x154>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4013      	ands	r3, r2
 8003a82:	4a2c      	ldr	r2, [pc, #176]	@ (8003b34 <xTaskPriorityDisinherit+0x154>)
 8003a84:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a92:	f1c3 0205 	rsb	r2, r3, #5
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList(pxTCB);
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f002 ffab 	bl	80069f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	409a      	lsls	r2, r3
 8003aaa:	4b22      	ldr	r3, [pc, #136]	@ (8003b34 <xTaskPriorityDisinherit+0x154>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	4a20      	ldr	r2, [pc, #128]	@ (8003b34 <xTaskPriorityDisinherit+0x154>)
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ab8:	491f      	ldr	r1, [pc, #124]	@ (8003b38 <xTaskPriorityDisinherit+0x158>)
 8003aba:	4613      	mov	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	609a      	str	r2, [r3, #8]
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	60da      	str	r2, [r3, #12]
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	3204      	adds	r2, #4
 8003ae0:	605a      	str	r2, [r3, #4]
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	1d1a      	adds	r2, r3, #4
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	609a      	str	r2, [r3, #8]
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4a10      	ldr	r2, [pc, #64]	@ (8003b38 <xTaskPriorityDisinherit+0x158>)
 8003af8:	441a      	add	r2, r3
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	615a      	str	r2, [r3, #20]
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b02:	490d      	ldr	r1, [pc, #52]	@ (8003b38 <xTaskPriorityDisinherit+0x158>)
 8003b04:	4613      	mov	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	1c59      	adds	r1, r3, #1
 8003b12:	4809      	ldr	r0, [pc, #36]	@ (8003b38 <xTaskPriorityDisinherit+0x158>)
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4403      	add	r3, r0
 8003b1e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003b20:	2301      	movs	r3, #1
 8003b22:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003b24:	69fb      	ldr	r3, [r7, #28]
    }
 8003b26:	4618      	mov	r0, r3
 8003b28:	3720      	adds	r7, #32
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	2000011c 	.word	0x2000011c
 8003b34:	200001fc 	.word	0x200001fc
 8003b38:	20000120 	.word	0x20000120

08003b3c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003b46:	4b36      	ldr	r3, [pc, #216]	@ (8003c20 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b4c:	4b35      	ldr	r3, [pc, #212]	@ (8003c24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3304      	adds	r3, #4
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fe fc0a 	bl	800236c <uxListRemove>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10b      	bne.n	8003b76 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003b5e:	4b31      	ldr	r3, [pc, #196]	@ (8003c24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b64:	2201      	movs	r2, #1
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	43da      	mvns	r2, r3
 8003b6c:	4b2e      	ldr	r3, [pc, #184]	@ (8003c28 <prvAddCurrentTaskToDelayedList+0xec>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4013      	ands	r3, r2
 8003b72:	4a2d      	ldr	r2, [pc, #180]	@ (8003c28 <prvAddCurrentTaskToDelayedList+0xec>)
 8003b74:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b7c:	d124      	bne.n	8003bc8 <prvAddCurrentTaskToDelayedList+0x8c>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d021      	beq.n	8003bc8 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b84:	4b29      	ldr	r3, [pc, #164]	@ (8003c2c <prvAddCurrentTaskToDelayedList+0xf0>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	4b26      	ldr	r3, [pc, #152]	@ (8003c24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	609a      	str	r2, [r3, #8]
 8003b92:	4b24      	ldr	r3, [pc, #144]	@ (8003c24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	6892      	ldr	r2, [r2, #8]
 8003b9a:	60da      	str	r2, [r3, #12]
 8003b9c:	4b21      	ldr	r3, [pc, #132]	@ (8003c24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	3204      	adds	r2, #4
 8003ba6:	605a      	str	r2, [r3, #4]
 8003ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8003c24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	1d1a      	adds	r2, r3, #4
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	609a      	str	r2, [r3, #8]
 8003bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8003c24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a1d      	ldr	r2, [pc, #116]	@ (8003c2c <prvAddCurrentTaskToDelayedList+0xf0>)
 8003bb8:	615a      	str	r2, [r3, #20]
 8003bba:	4b1c      	ldr	r3, [pc, #112]	@ (8003c2c <prvAddCurrentTaskToDelayedList+0xf0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8003c2c <prvAddCurrentTaskToDelayedList+0xf0>)
 8003bc2:	6013      	str	r3, [r2, #0]
 8003bc4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003bc6:	e026      	b.n	8003c16 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4413      	add	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003bd0:	4b14      	ldr	r3, [pc, #80]	@ (8003c24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d209      	bcs.n	8003bf4 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003be0:	4b13      	ldr	r3, [pc, #76]	@ (8003c30 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	4b0f      	ldr	r3, [pc, #60]	@ (8003c24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3304      	adds	r3, #4
 8003bea:	4619      	mov	r1, r3
 8003bec:	4610      	mov	r0, r2
 8003bee:	f7fe fb84 	bl	80022fa <vListInsert>
}
 8003bf2:	e010      	b.n	8003c16 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8003c34 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8003c24 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4610      	mov	r0, r2
 8003c02:	f7fe fb7a 	bl	80022fa <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003c06:	4b0c      	ldr	r3, [pc, #48]	@ (8003c38 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d202      	bcs.n	8003c16 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003c10:	4a09      	ldr	r2, [pc, #36]	@ (8003c38 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6013      	str	r3, [r2, #0]
}
 8003c16:	bf00      	nop
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	200001f8 	.word	0x200001f8
 8003c24:	2000011c 	.word	0x2000011c
 8003c28:	200001fc 	.word	0x200001fc
 8003c2c:	200001e0 	.word	0x200001e0
 8003c30:	200001b0 	.word	0x200001b0
 8003c34:	200001ac 	.word	0x200001ac
 8003c38:	20000214 	.word	0x20000214

08003c3c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003c46:	f000 fa71 	bl	800412c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003c4a:	4b13      	ldr	r3, [pc, #76]	@ (8003c98 <xTimerCreateTimerTask+0x5c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00b      	beq.n	8003c6a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003c52:	4b12      	ldr	r3, [pc, #72]	@ (8003c9c <xTimerCreateTimerTask+0x60>)
 8003c54:	9301      	str	r3, [sp, #4]
 8003c56:	2304      	movs	r3, #4
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003c60:	490f      	ldr	r1, [pc, #60]	@ (8003ca0 <xTimerCreateTimerTask+0x64>)
 8003c62:	4810      	ldr	r0, [pc, #64]	@ (8003ca4 <xTimerCreateTimerTask+0x68>)
 8003c64:	f7fe ff8f 	bl	8002b86 <xTaskCreate>
 8003c68:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10d      	bne.n	8003c8c <xTimerCreateTimerTask+0x50>
        __asm volatile
 8003c70:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003c74:	b672      	cpsid	i
 8003c76:	f383 8811 	msr	BASEPRI, r3
 8003c7a:	f3bf 8f6f 	isb	sy
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	b662      	cpsie	i
 8003c84:	603b      	str	r3, [r7, #0]
    }
 8003c86:	bf00      	nop
 8003c88:	bf00      	nop
 8003c8a:	e7fd      	b.n	8003c88 <xTimerCreateTimerTask+0x4c>
        return xReturn;
 8003c8c:	687b      	ldr	r3, [r7, #4]
    }
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20000250 	.word	0x20000250
 8003c9c:	20000254 	.word	0x20000254
 8003ca0:	08007e14 	.word	0x08007e14
 8003ca4:	08003d4d 	.word	0x08003d4d

08003ca8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003cb4:	e008      	b.n	8003cc8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	699a      	ldr	r2, [r3, #24]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	18d1      	adds	r1, r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 f8df 	bl	8003e98 <prvInsertTimerInActiveList>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1ea      	bne.n	8003cb6 <prvReloadTimer+0xe>
        }
    }
 8003ce0:	bf00      	nop
 8003ce2:	bf00      	nop
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
	...

08003cec <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cf6:	4b14      	ldr	r3, [pc, #80]	@ (8003d48 <prvProcessExpiredTimer+0x5c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	3304      	adds	r3, #4
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fe fb31 	bl	800236c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	68f8      	ldr	r0, [r7, #12]
 8003d1e:	f7ff ffc3 	bl	8003ca8 <prvReloadTimer>
 8003d22:	e008      	b.n	8003d36 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d2a:	f023 0301 	bic.w	r3, r3, #1
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	4798      	blx	r3
    }
 8003d3e:	bf00      	nop
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	20000248 	.word	0x20000248

08003d4c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d54:	f107 0308 	add.w	r3, r7, #8
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 f859 	bl	8003e10 <prvGetNextExpireTime>
 8003d5e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	4619      	mov	r1, r3
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 f805 	bl	8003d74 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003d6a:	f000 f8d7 	bl	8003f1c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d6e:	bf00      	nop
 8003d70:	e7f0      	b.n	8003d54 <prvTimerTask+0x8>
	...

08003d74 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003d7e:	f7ff f8ef 	bl	8002f60 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d82:	f107 0308 	add.w	r3, r7, #8
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 f866 	bl	8003e58 <prvSampleTimeNow>
 8003d8c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d130      	bne.n	8003df6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10a      	bne.n	8003db0 <prvProcessTimerOrBlockTask+0x3c>
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d806      	bhi.n	8003db0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003da2:	f7ff f8eb 	bl	8002f7c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003da6:	68f9      	ldr	r1, [r7, #12]
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff ff9f 	bl	8003cec <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003dae:	e024      	b.n	8003dfa <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d008      	beq.n	8003dc8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003db6:	4b13      	ldr	r3, [pc, #76]	@ (8003e04 <prvProcessTimerOrBlockTask+0x90>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <prvProcessTimerOrBlockTask+0x50>
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e000      	b.n	8003dc6 <prvProcessTimerOrBlockTask+0x52>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8003e08 <prvProcessTimerOrBlockTask+0x94>)
 8003dca:	6818      	ldr	r0, [r3, #0]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	f7fe fe29 	bl	8002a2c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003dda:	f7ff f8cf 	bl	8002f7c <xTaskResumeAll>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10a      	bne.n	8003dfa <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003de4:	4b09      	ldr	r3, [pc, #36]	@ (8003e0c <prvProcessTimerOrBlockTask+0x98>)
 8003de6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	f3bf 8f6f 	isb	sy
    }
 8003df4:	e001      	b.n	8003dfa <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003df6:	f7ff f8c1 	bl	8002f7c <xTaskResumeAll>
    }
 8003dfa:	bf00      	nop
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	2000024c 	.word	0x2000024c
 8003e08:	20000250 	.word	0x20000250
 8003e0c:	e000ed04 	.word	0xe000ed04

08003e10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e18:	4b0e      	ldr	r3, [pc, #56]	@ (8003e54 <prvGetNextExpireTime+0x44>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <prvGetNextExpireTime+0x16>
 8003e22:	2201      	movs	r2, #1
 8003e24:	e000      	b.n	8003e28 <prvGetNextExpireTime+0x18>
 8003e26:	2200      	movs	r2, #0
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d105      	bne.n	8003e40 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e34:	4b07      	ldr	r3, [pc, #28]	@ (8003e54 <prvGetNextExpireTime+0x44>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	60fb      	str	r3, [r7, #12]
 8003e3e:	e001      	b.n	8003e44 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003e44:	68fb      	ldr	r3, [r7, #12]
    }
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	20000248 	.word	0x20000248

08003e58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003e60:	f7ff f980 	bl	8003164 <xTaskGetTickCount>
 8003e64:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003e66:	4b0b      	ldr	r3, [pc, #44]	@ (8003e94 <prvSampleTimeNow+0x3c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d205      	bcs.n	8003e7c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003e70:	f000 f936 	bl	80040e0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	e002      	b.n	8003e82 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003e82:	4a04      	ldr	r2, [pc, #16]	@ (8003e94 <prvSampleTimeNow+0x3c>)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003e88:	68fb      	ldr	r3, [r7, #12]
    }
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20000258 	.word	0x20000258

08003e98 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d812      	bhi.n	8003ee4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	1ad2      	subs	r2, r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d302      	bcc.n	8003ed2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	e01b      	b.n	8003f0a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003ed2:	4b10      	ldr	r3, [pc, #64]	@ (8003f14 <prvInsertTimerInActiveList+0x7c>)
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	3304      	adds	r3, #4
 8003eda:	4619      	mov	r1, r3
 8003edc:	4610      	mov	r0, r2
 8003ede:	f7fe fa0c 	bl	80022fa <vListInsert>
 8003ee2:	e012      	b.n	8003f0a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d206      	bcs.n	8003efa <prvInsertTimerInActiveList+0x62>
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d302      	bcc.n	8003efa <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	e007      	b.n	8003f0a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003efa:	4b07      	ldr	r3, [pc, #28]	@ (8003f18 <prvInsertTimerInActiveList+0x80>)
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	3304      	adds	r3, #4
 8003f02:	4619      	mov	r1, r3
 8003f04:	4610      	mov	r0, r2
 8003f06:	f7fe f9f8 	bl	80022fa <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003f0a:	697b      	ldr	r3, [r7, #20]
    }
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	2000024c 	.word	0x2000024c
 8003f18:	20000248 	.word	0x20000248

08003f1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08a      	sub	sp, #40	@ 0x28
 8003f20:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f22:	e0cb      	b.n	80040bc <prvProcessReceivedCommands+0x1a0>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	da1b      	bge.n	8003f62 <prvProcessReceivedCommands+0x46>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003f2a:	1d3b      	adds	r3, r7, #4
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8003f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10d      	bne.n	8003f52 <prvProcessReceivedCommands+0x36>
        __asm volatile
 8003f36:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003f3a:	b672      	cpsid	i
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	b662      	cpsie	i
 8003f4a:	61bb      	str	r3, [r7, #24]
    }
 8003f4c:	bf00      	nop
 8003f4e:	bf00      	nop
 8003f50:	e7fd      	b.n	8003f4e <prvProcessReceivedCommands+0x32>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f58:	6850      	ldr	r0, [r2, #4]
 8003f5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f5c:	6892      	ldr	r2, [r2, #8]
 8003f5e:	4611      	mov	r1, r2
 8003f60:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f2c0 80a9 	blt.w	80040bc <prvProcessReceivedCommands+0x1a0>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f6e:	6a3b      	ldr	r3, [r7, #32]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d004      	beq.n	8003f80 <prvProcessReceivedCommands+0x64>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fe f9f6 	bl	800236c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f80:	463b      	mov	r3, r7
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff ff68 	bl	8003e58 <prvSampleTimeNow>
 8003f88:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	2b08      	cmp	r3, #8
 8003f90:	f200 8091 	bhi.w	80040b6 <prvProcessReceivedCommands+0x19a>
 8003f94:	a201      	add	r2, pc, #4	@ (adr r2, 8003f9c <prvProcessReceivedCommands+0x80>)
 8003f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9a:	bf00      	nop
 8003f9c:	08003fc1 	.word	0x08003fc1
 8003fa0:	08003fc1 	.word	0x08003fc1
 8003fa4:	08004029 	.word	0x08004029
 8003fa8:	0800403d 	.word	0x0800403d
 8003fac:	0800408d 	.word	0x0800408d
 8003fb0:	08003fc1 	.word	0x08003fc1
 8003fb4:	08003fc1 	.word	0x08003fc1
 8003fb8:	08004029 	.word	0x08004029
 8003fbc:	0800403d 	.word	0x0800403d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fc6:	f043 0301 	orr.w	r3, r3, #1
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	18d1      	adds	r1, r2, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	69fa      	ldr	r2, [r7, #28]
 8003fde:	6a38      	ldr	r0, [r7, #32]
 8003fe0:	f7ff ff5a 	bl	8003e98 <prvInsertTimerInActiveList>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d067      	beq.n	80040ba <prvProcessReceivedCommands+0x19e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d009      	beq.n	800400c <prvProcessReceivedCommands+0xf0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	4413      	add	r3, r2
 8004000:	69fa      	ldr	r2, [r7, #28]
 8004002:	4619      	mov	r1, r3
 8004004:	6a38      	ldr	r0, [r7, #32]
 8004006:	f7ff fe4f 	bl	8003ca8 <prvReloadTimer>
 800400a:	e008      	b.n	800401e <prvProcessReceivedCommands+0x102>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004012:	f023 0301 	bic.w	r3, r3, #1
 8004016:	b2da      	uxtb	r2, r3
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	6a38      	ldr	r0, [r7, #32]
 8004024:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004026:	e048      	b.n	80040ba <prvProcessReceivedCommands+0x19e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800402e:	f023 0301 	bic.w	r3, r3, #1
 8004032:	b2da      	uxtb	r2, r3
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800403a:	e03f      	b.n	80040bc <prvProcessReceivedCommands+0x1a0>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004042:	f043 0301 	orr.w	r3, r3, #1
 8004046:	b2da      	uxtb	r2, r3
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10d      	bne.n	8004078 <prvProcessReceivedCommands+0x15c>
        __asm volatile
 800405c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004060:	b672      	cpsid	i
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	b662      	cpsie	i
 8004070:	617b      	str	r3, [r7, #20]
    }
 8004072:	bf00      	nop
 8004074:	bf00      	nop
 8004076:	e7fd      	b.n	8004074 <prvProcessReceivedCommands+0x158>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	699a      	ldr	r2, [r3, #24]
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	18d1      	adds	r1, r2, r3
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	69fa      	ldr	r2, [r7, #28]
 8004084:	6a38      	ldr	r0, [r7, #32]
 8004086:	f7ff ff07 	bl	8003e98 <prvInsertTimerInActiveList>
                        break;
 800408a:	e017      	b.n	80040bc <prvProcessReceivedCommands+0x1a0>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800408c:	6a3b      	ldr	r3, [r7, #32]
 800408e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d103      	bne.n	80040a2 <prvProcessReceivedCommands+0x186>
                            {
                                vPortFree( pxTimer );
 800409a:	6a38      	ldr	r0, [r7, #32]
 800409c:	f000 fc36 	bl	800490c <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80040a0:	e00c      	b.n	80040bc <prvProcessReceivedCommands+0x1a0>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040a8:	f023 0301 	bic.w	r3, r3, #1
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80040b4:	e002      	b.n	80040bc <prvProcessReceivedCommands+0x1a0>

                    default:
                        /* Don't expect to get here. */
                        break;
 80040b6:	bf00      	nop
 80040b8:	e000      	b.n	80040bc <prvProcessReceivedCommands+0x1a0>
                        break;
 80040ba:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040bc:	4b07      	ldr	r3, [pc, #28]	@ (80040dc <prvProcessReceivedCommands+0x1c0>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	1d39      	adds	r1, r7, #4
 80040c2:	2200      	movs	r2, #0
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fe fa7b 	bl	80025c0 <xQueueReceive>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f47f af29 	bne.w	8003f24 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80040d2:	bf00      	nop
 80040d4:	bf00      	nop
 80040d6:	3728      	adds	r7, #40	@ 0x28
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	20000250 	.word	0x20000250

080040e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040e6:	e009      	b.n	80040fc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040e8:	4b0e      	ldr	r3, [pc, #56]	@ (8004124 <prvSwitchTimerLists+0x44>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80040f2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80040f6:	6838      	ldr	r0, [r7, #0]
 80040f8:	f7ff fdf8 	bl	8003cec <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040fc:	4b09      	ldr	r3, [pc, #36]	@ (8004124 <prvSwitchTimerLists+0x44>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f0      	bne.n	80040e8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004106:	4b07      	ldr	r3, [pc, #28]	@ (8004124 <prvSwitchTimerLists+0x44>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800410c:	4b06      	ldr	r3, [pc, #24]	@ (8004128 <prvSwitchTimerLists+0x48>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a04      	ldr	r2, [pc, #16]	@ (8004124 <prvSwitchTimerLists+0x44>)
 8004112:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004114:	4a04      	ldr	r2, [pc, #16]	@ (8004128 <prvSwitchTimerLists+0x48>)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6013      	str	r3, [r2, #0]
    }
 800411a:	bf00      	nop
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	20000248 	.word	0x20000248
 8004128:	2000024c 	.word	0x2000024c

0800412c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004130:	f000 f9f4 	bl	800451c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004134:	4b12      	ldr	r3, [pc, #72]	@ (8004180 <prvCheckForValidListAndQueue+0x54>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d11d      	bne.n	8004178 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800413c:	4811      	ldr	r0, [pc, #68]	@ (8004184 <prvCheckForValidListAndQueue+0x58>)
 800413e:	f7fe f8af 	bl	80022a0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004142:	4811      	ldr	r0, [pc, #68]	@ (8004188 <prvCheckForValidListAndQueue+0x5c>)
 8004144:	f7fe f8ac 	bl	80022a0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004148:	4b10      	ldr	r3, [pc, #64]	@ (800418c <prvCheckForValidListAndQueue+0x60>)
 800414a:	4a0e      	ldr	r2, [pc, #56]	@ (8004184 <prvCheckForValidListAndQueue+0x58>)
 800414c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800414e:	4b10      	ldr	r3, [pc, #64]	@ (8004190 <prvCheckForValidListAndQueue+0x64>)
 8004150:	4a0d      	ldr	r2, [pc, #52]	@ (8004188 <prvCheckForValidListAndQueue+0x5c>)
 8004152:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004154:	2200      	movs	r2, #0
 8004156:	2110      	movs	r1, #16
 8004158:	2005      	movs	r0, #5
 800415a:	f7fe f9b9 	bl	80024d0 <xQueueGenericCreate>
 800415e:	4603      	mov	r3, r0
 8004160:	4a07      	ldr	r2, [pc, #28]	@ (8004180 <prvCheckForValidListAndQueue+0x54>)
 8004162:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004164:	4b06      	ldr	r3, [pc, #24]	@ (8004180 <prvCheckForValidListAndQueue+0x54>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d005      	beq.n	8004178 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800416c:	4b04      	ldr	r3, [pc, #16]	@ (8004180 <prvCheckForValidListAndQueue+0x54>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4908      	ldr	r1, [pc, #32]	@ (8004194 <prvCheckForValidListAndQueue+0x68>)
 8004172:	4618      	mov	r0, r3
 8004174:	f7fe fc08 	bl	8002988 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004178:	f000 fa06 	bl	8004588 <vPortExitCritical>
    }
 800417c:	bf00      	nop
 800417e:	bd80      	pop	{r7, pc}
 8004180:	20000250 	.word	0x20000250
 8004184:	20000220 	.word	0x20000220
 8004188:	20000234 	.word	0x20000234
 800418c:	20000248 	.word	0x20000248
 8004190:	2000024c 	.word	0x2000024c
 8004194:	08007e1c 	.word	0x08007e1c

08004198 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	3b04      	subs	r3, #4
 80041a8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80041b0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	3b04      	subs	r3, #4
 80041b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f023 0201 	bic.w	r2, r3, #1
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	3b04      	subs	r3, #4
 80041c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80041c8:	4a0c      	ldr	r2, [pc, #48]	@ (80041fc <pxPortInitialiseStack+0x64>)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	3b14      	subs	r3, #20
 80041d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3b04      	subs	r3, #4
 80041de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f06f 0202 	mvn.w	r2, #2
 80041e6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	3b20      	subs	r3, #32
 80041ec:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80041ee:	68fb      	ldr	r3, [r7, #12]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	08004201 	.word	0x08004201

08004200 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004206:	2300      	movs	r3, #0
 8004208:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800420a:	4b15      	ldr	r3, [pc, #84]	@ (8004260 <prvTaskExitError+0x60>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004212:	d00d      	beq.n	8004230 <prvTaskExitError+0x30>
        __asm volatile
 8004214:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004218:	b672      	cpsid	i
 800421a:	f383 8811 	msr	BASEPRI, r3
 800421e:	f3bf 8f6f 	isb	sy
 8004222:	f3bf 8f4f 	dsb	sy
 8004226:	b662      	cpsie	i
 8004228:	60fb      	str	r3, [r7, #12]
    }
 800422a:	bf00      	nop
 800422c:	bf00      	nop
 800422e:	e7fd      	b.n	800422c <prvTaskExitError+0x2c>
        __asm volatile
 8004230:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004234:	b672      	cpsid	i
 8004236:	f383 8811 	msr	BASEPRI, r3
 800423a:	f3bf 8f6f 	isb	sy
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	b662      	cpsie	i
 8004244:	60bb      	str	r3, [r7, #8]
    }
 8004246:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004248:	bf00      	nop
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0fc      	beq.n	800424a <prvTaskExitError+0x4a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004250:	bf00      	nop
 8004252:	bf00      	nop
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	20000010 	.word	0x20000010
	...

08004270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004270:	4b07      	ldr	r3, [pc, #28]	@ (8004290 <pxCurrentTCBConst2>)
 8004272:	6819      	ldr	r1, [r3, #0]
 8004274:	6808      	ldr	r0, [r1, #0]
 8004276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800427a:	f380 8809 	msr	PSP, r0
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f04f 0000 	mov.w	r0, #0
 8004286:	f380 8811 	msr	BASEPRI, r0
 800428a:	4770      	bx	lr
 800428c:	f3af 8000 	nop.w

08004290 <pxCurrentTCBConst2>:
 8004290:	2000011c 	.word	0x2000011c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004294:	bf00      	nop
 8004296:	bf00      	nop

08004298 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004298:	4808      	ldr	r0, [pc, #32]	@ (80042bc <prvPortStartFirstTask+0x24>)
 800429a:	6800      	ldr	r0, [r0, #0]
 800429c:	6800      	ldr	r0, [r0, #0]
 800429e:	f380 8808 	msr	MSP, r0
 80042a2:	f04f 0000 	mov.w	r0, #0
 80042a6:	f380 8814 	msr	CONTROL, r0
 80042aa:	b662      	cpsie	i
 80042ac:	b661      	cpsie	f
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	df00      	svc	0
 80042b8:	bf00      	nop
 80042ba:	0000      	.short	0x0000
 80042bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80042c0:	bf00      	nop
 80042c2:	bf00      	nop

080042c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042ca:	4b41      	ldr	r3, [pc, #260]	@ (80043d0 <xPortStartScheduler+0x10c>)
 80042cc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	60bb      	str	r3, [r7, #8]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	22ff      	movs	r2, #255	@ 0xff
 80042da:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042e4:	79fb      	ldrb	r3, [r7, #7]
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	4b39      	ldr	r3, [pc, #228]	@ (80043d4 <xPortStartScheduler+0x110>)
 80042f0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042f2:	4b39      	ldr	r3, [pc, #228]	@ (80043d8 <xPortStartScheduler+0x114>)
 80042f4:	2207      	movs	r2, #7
 80042f6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042f8:	e009      	b.n	800430e <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 80042fa:	4b37      	ldr	r3, [pc, #220]	@ (80043d8 <xPortStartScheduler+0x114>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3b01      	subs	r3, #1
 8004300:	4a35      	ldr	r2, [pc, #212]	@ (80043d8 <xPortStartScheduler+0x114>)
 8004302:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004304:	79fb      	ldrb	r3, [r7, #7]
 8004306:	b2db      	uxtb	r3, r3
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	b2db      	uxtb	r3, r3
 800430c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	b2db      	uxtb	r3, r3
 8004312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004316:	2b80      	cmp	r3, #128	@ 0x80
 8004318:	d0ef      	beq.n	80042fa <xPortStartScheduler+0x36>
        #ifdef __NVIC_PRIO_BITS
        {
            /* Check the CMSIS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800431a:	4b2f      	ldr	r3, [pc, #188]	@ (80043d8 <xPortStartScheduler+0x114>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f1c3 0307 	rsb	r3, r3, #7
 8004322:	2b04      	cmp	r3, #4
 8004324:	d00d      	beq.n	8004342 <xPortStartScheduler+0x7e>
        __asm volatile
 8004326:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800432a:	b672      	cpsid	i
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	b662      	cpsie	i
 800433a:	613b      	str	r3, [r7, #16]
    }
 800433c:	bf00      	nop
 800433e:	bf00      	nop
 8004340:	e7fd      	b.n	800433e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004342:	4b25      	ldr	r3, [pc, #148]	@ (80043d8 <xPortStartScheduler+0x114>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f1c3 0307 	rsb	r3, r3, #7
 800434a:	2b04      	cmp	r3, #4
 800434c:	d00d      	beq.n	800436a <xPortStartScheduler+0xa6>
        __asm volatile
 800434e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004352:	b672      	cpsid	i
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	b662      	cpsie	i
 8004362:	60fb      	str	r3, [r7, #12]
    }
 8004364:	bf00      	nop
 8004366:	bf00      	nop
 8004368:	e7fd      	b.n	8004366 <xPortStartScheduler+0xa2>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800436a:	4b1b      	ldr	r3, [pc, #108]	@ (80043d8 <xPortStartScheduler+0x114>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	021b      	lsls	r3, r3, #8
 8004370:	4a19      	ldr	r2, [pc, #100]	@ (80043d8 <xPortStartScheduler+0x114>)
 8004372:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004374:	4b18      	ldr	r3, [pc, #96]	@ (80043d8 <xPortStartScheduler+0x114>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800437c:	4a16      	ldr	r2, [pc, #88]	@ (80043d8 <xPortStartScheduler+0x114>)
 800437e:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	b2da      	uxtb	r2, r3
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004388:	4b14      	ldr	r3, [pc, #80]	@ (80043dc <xPortStartScheduler+0x118>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a13      	ldr	r2, [pc, #76]	@ (80043dc <xPortStartScheduler+0x118>)
 800438e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004392:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004394:	4b11      	ldr	r3, [pc, #68]	@ (80043dc <xPortStartScheduler+0x118>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a10      	ldr	r2, [pc, #64]	@ (80043dc <xPortStartScheduler+0x118>)
 800439a:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800439e:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80043a0:	f000 f97e 	bl	80046a0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80043a4:	4b0e      	ldr	r3, [pc, #56]	@ (80043e0 <xPortStartScheduler+0x11c>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80043aa:	f000 f99d 	bl	80046e8 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80043ae:	4b0d      	ldr	r3, [pc, #52]	@ (80043e4 <xPortStartScheduler+0x120>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a0c      	ldr	r2, [pc, #48]	@ (80043e4 <xPortStartScheduler+0x120>)
 80043b4:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80043b8:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80043ba:	f7ff ff6d 	bl	8004298 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80043be:	f7fe fff9 	bl	80033b4 <vTaskSwitchContext>
    prvTaskExitError();
 80043c2:	f7ff ff1d 	bl	8004200 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	e000e400 	.word	0xe000e400
 80043d4:	2000025c 	.word	0x2000025c
 80043d8:	20000260 	.word	0x20000260
 80043dc:	e000ed20 	.word	0xe000ed20
 80043e0:	20000010 	.word	0x20000010
 80043e4:	e000ef34 	.word	0xe000ef34

080043e8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b089      	sub	sp, #36	@ 0x24
 80043ec:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80043ee:	4b45      	ldr	r3, [pc, #276]	@ (8004504 <vInitPrioGroupValue+0x11c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a45      	ldr	r2, [pc, #276]	@ (8004508 <vInitPrioGroupValue+0x120>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d10d      	bne.n	8004414 <vInitPrioGroupValue+0x2c>
        __asm volatile
 80043f8:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80043fc:	b672      	cpsid	i
 80043fe:	f383 8811 	msr	BASEPRI, r3
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	f3bf 8f4f 	dsb	sy
 800440a:	b662      	cpsie	i
 800440c:	61bb      	str	r3, [r7, #24]
    }
 800440e:	bf00      	nop
 8004410:	bf00      	nop
 8004412:	e7fd      	b.n	8004410 <vInitPrioGroupValue+0x28>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004414:	4b3b      	ldr	r3, [pc, #236]	@ (8004504 <vInitPrioGroupValue+0x11c>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a3c      	ldr	r2, [pc, #240]	@ (800450c <vInitPrioGroupValue+0x124>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d10d      	bne.n	800443a <vInitPrioGroupValue+0x52>
        __asm volatile
 800441e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004422:	b672      	cpsid	i
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	b662      	cpsie	i
 8004432:	617b      	str	r3, [r7, #20]
    }
 8004434:	bf00      	nop
 8004436:	bf00      	nop
 8004438:	e7fd      	b.n	8004436 <vInitPrioGroupValue+0x4e>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800443a:	4b35      	ldr	r3, [pc, #212]	@ (8004510 <vInitPrioGroupValue+0x128>)
 800443c:	61fb      	str	r3, [r7, #28]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	b2db      	uxtb	r3, r3
 8004444:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	22ff      	movs	r2, #255	@ 0xff
 800444a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004454:	79fb      	ldrb	r3, [r7, #7]
 8004456:	b2db      	uxtb	r3, r3
 8004458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800445c:	b2da      	uxtb	r2, r3
 800445e:	4b2d      	ldr	r3, [pc, #180]	@ (8004514 <vInitPrioGroupValue+0x12c>)
 8004460:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004462:	4b2d      	ldr	r3, [pc, #180]	@ (8004518 <vInitPrioGroupValue+0x130>)
 8004464:	2207      	movs	r2, #7
 8004466:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004468:	e009      	b.n	800447e <vInitPrioGroupValue+0x96>
            {
                ulMaxPRIGROUPValue--;
 800446a:	4b2b      	ldr	r3, [pc, #172]	@ (8004518 <vInitPrioGroupValue+0x130>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	3b01      	subs	r3, #1
 8004470:	4a29      	ldr	r2, [pc, #164]	@ (8004518 <vInitPrioGroupValue+0x130>)
 8004472:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	b2db      	uxtb	r3, r3
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	b2db      	uxtb	r3, r3
 800447c:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	b2db      	uxtb	r3, r3
 8004482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004486:	2b80      	cmp	r3, #128	@ 0x80
 8004488:	d0ef      	beq.n	800446a <vInitPrioGroupValue+0x82>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800448a:	4b23      	ldr	r3, [pc, #140]	@ (8004518 <vInitPrioGroupValue+0x130>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f1c3 0307 	rsb	r3, r3, #7
 8004492:	2b04      	cmp	r3, #4
 8004494:	d00d      	beq.n	80044b2 <vInitPrioGroupValue+0xca>
        __asm volatile
 8004496:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800449a:	b672      	cpsid	i
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	b662      	cpsie	i
 80044aa:	613b      	str	r3, [r7, #16]
    }
 80044ac:	bf00      	nop
 80044ae:	bf00      	nop
 80044b0:	e7fd      	b.n	80044ae <vInitPrioGroupValue+0xc6>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044b2:	4b19      	ldr	r3, [pc, #100]	@ (8004518 <vInitPrioGroupValue+0x130>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f1c3 0307 	rsb	r3, r3, #7
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d00d      	beq.n	80044da <vInitPrioGroupValue+0xf2>
        __asm volatile
 80044be:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80044c2:	b672      	cpsid	i
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	b662      	cpsie	i
 80044d2:	60fb      	str	r3, [r7, #12]
    }
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
 80044d8:	e7fd      	b.n	80044d6 <vInitPrioGroupValue+0xee>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80044da:	4b0f      	ldr	r3, [pc, #60]	@ (8004518 <vInitPrioGroupValue+0x130>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	021b      	lsls	r3, r3, #8
 80044e0:	4a0d      	ldr	r2, [pc, #52]	@ (8004518 <vInitPrioGroupValue+0x130>)
 80044e2:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004518 <vInitPrioGroupValue+0x130>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80044ec:	4a0a      	ldr	r2, [pc, #40]	@ (8004518 <vInitPrioGroupValue+0x130>)
 80044ee:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80044f8:	bf00      	nop
 80044fa:	3724      	adds	r7, #36	@ 0x24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	e000ed00 	.word	0xe000ed00
 8004508:	0410c271 	.word	0x0410c271
 800450c:	0410c270 	.word	0x0410c270
 8004510:	e000e400 	.word	0xe000e400
 8004514:	2000025c 	.word	0x2000025c
 8004518:	20000260 	.word	0x20000260

0800451c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
        __asm volatile
 8004522:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004526:	b672      	cpsid	i
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	b662      	cpsie	i
 8004536:	607b      	str	r3, [r7, #4]
    }
 8004538:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800453a:	4b11      	ldr	r3, [pc, #68]	@ (8004580 <vPortEnterCritical+0x64>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3301      	adds	r3, #1
 8004540:	4a0f      	ldr	r2, [pc, #60]	@ (8004580 <vPortEnterCritical+0x64>)
 8004542:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004544:	4b0e      	ldr	r3, [pc, #56]	@ (8004580 <vPortEnterCritical+0x64>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d112      	bne.n	8004572 <vPortEnterCritical+0x56>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800454c:	4b0d      	ldr	r3, [pc, #52]	@ (8004584 <vPortEnterCritical+0x68>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00d      	beq.n	8004572 <vPortEnterCritical+0x56>
        __asm volatile
 8004556:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800455a:	b672      	cpsid	i
 800455c:	f383 8811 	msr	BASEPRI, r3
 8004560:	f3bf 8f6f 	isb	sy
 8004564:	f3bf 8f4f 	dsb	sy
 8004568:	b662      	cpsie	i
 800456a:	603b      	str	r3, [r7, #0]
    }
 800456c:	bf00      	nop
 800456e:	bf00      	nop
 8004570:	e7fd      	b.n	800456e <vPortEnterCritical+0x52>
    }
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	20000010 	.word	0x20000010
 8004584:	e000ed04 	.word	0xe000ed04

08004588 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800458e:	4b13      	ldr	r3, [pc, #76]	@ (80045dc <vPortExitCritical+0x54>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10d      	bne.n	80045b2 <vPortExitCritical+0x2a>
        __asm volatile
 8004596:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800459a:	b672      	cpsid	i
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	b662      	cpsie	i
 80045aa:	607b      	str	r3, [r7, #4]
    }
 80045ac:	bf00      	nop
 80045ae:	bf00      	nop
 80045b0:	e7fd      	b.n	80045ae <vPortExitCritical+0x26>
    uxCriticalNesting--;
 80045b2:	4b0a      	ldr	r3, [pc, #40]	@ (80045dc <vPortExitCritical+0x54>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	4a08      	ldr	r2, [pc, #32]	@ (80045dc <vPortExitCritical+0x54>)
 80045ba:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80045bc:	4b07      	ldr	r3, [pc, #28]	@ (80045dc <vPortExitCritical+0x54>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d105      	bne.n	80045d0 <vPortExitCritical+0x48>
 80045c4:	2300      	movs	r3, #0
 80045c6:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80045ce:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	20000010 	.word	0x20000010

080045e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80045e0:	f3ef 8009 	mrs	r0, PSP
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	4b15      	ldr	r3, [pc, #84]	@ (8004640 <pxCurrentTCBConst>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	f01e 0f10 	tst.w	lr, #16
 80045f0:	bf08      	it	eq
 80045f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80045f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045fa:	6010      	str	r0, [r2, #0]
 80045fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004600:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8004604:	b672      	cpsid	i
 8004606:	f380 8811 	msr	BASEPRI, r0
 800460a:	f3bf 8f4f 	dsb	sy
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	b662      	cpsie	i
 8004614:	f7fe fece 	bl	80033b4 <vTaskSwitchContext>
 8004618:	f04f 0000 	mov.w	r0, #0
 800461c:	f380 8811 	msr	BASEPRI, r0
 8004620:	bc09      	pop	{r0, r3}
 8004622:	6819      	ldr	r1, [r3, #0]
 8004624:	6808      	ldr	r0, [r1, #0]
 8004626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800462a:	f01e 0f10 	tst.w	lr, #16
 800462e:	bf08      	it	eq
 8004630:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004634:	f380 8809 	msr	PSP, r0
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop

08004640 <pxCurrentTCBConst>:
 8004640:	2000011c 	.word	0x2000011c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004644:	bf00      	nop
 8004646:	bf00      	nop

08004648 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
        __asm volatile
 800464e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004652:	b672      	cpsid	i
 8004654:	f383 8811 	msr	BASEPRI, r3
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	b662      	cpsie	i
 8004662:	607b      	str	r3, [r7, #4]
    }
 8004664:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004666:	f002 f8ad 	bl	80067c4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800466a:	f7fe fda9 	bl	80031c0 <xTaskIncrementTick>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d006      	beq.n	8004682 <SysTick_Handler+0x3a>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004674:	f002 f904 	bl	8006880 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004678:	4b08      	ldr	r3, [pc, #32]	@ (800469c <SysTick_Handler+0x54>)
 800467a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	e001      	b.n	8004686 <SysTick_Handler+0x3e>
        }
		else
		{
			traceISR_EXIT();
 8004682:	f002 f8e1 	bl	8006848 <SEGGER_SYSVIEW_RecordExitISR>
 8004686:	2300      	movs	r3, #0
 8004688:	603b      	str	r3, [r7, #0]
        __asm volatile
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	f383 8811 	msr	BASEPRI, r3
    }
 8004690:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004692:	bf00      	nop
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	e000ed04 	.word	0xe000ed04

080046a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80046a4:	4b0b      	ldr	r3, [pc, #44]	@ (80046d4 <vPortSetupTimerInterrupt+0x34>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046aa:	4b0b      	ldr	r3, [pc, #44]	@ (80046d8 <vPortSetupTimerInterrupt+0x38>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046b0:	4b0a      	ldr	r3, [pc, #40]	@ (80046dc <vPortSetupTimerInterrupt+0x3c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a0a      	ldr	r2, [pc, #40]	@ (80046e0 <vPortSetupTimerInterrupt+0x40>)
 80046b6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ba:	099b      	lsrs	r3, r3, #6
 80046bc:	4a09      	ldr	r2, [pc, #36]	@ (80046e4 <vPortSetupTimerInterrupt+0x44>)
 80046be:	3b01      	subs	r3, #1
 80046c0:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046c2:	4b04      	ldr	r3, [pc, #16]	@ (80046d4 <vPortSetupTimerInterrupt+0x34>)
 80046c4:	2207      	movs	r2, #7
 80046c6:	601a      	str	r2, [r3, #0]
}
 80046c8:	bf00      	nop
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	e000e010 	.word	0xe000e010
 80046d8:	e000e018 	.word	0xe000e018
 80046dc:	20000000 	.word	0x20000000
 80046e0:	10624dd3 	.word	0x10624dd3
 80046e4:	e000e014 	.word	0xe000e014

080046e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80046e8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80046f8 <vPortEnableVFP+0x10>
 80046ec:	6801      	ldr	r1, [r0, #0]
 80046ee:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80046f2:	6001      	str	r1, [r0, #0]
 80046f4:	4770      	bx	lr
 80046f6:	0000      	.short	0x0000
 80046f8:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80046fc:	bf00      	nop
 80046fe:	bf00      	nop

08004700 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004706:	f3ef 8305 	mrs	r3, IPSR
 800470a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2b0f      	cmp	r3, #15
 8004710:	d917      	bls.n	8004742 <vPortValidateInterruptPriority+0x42>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004712:	4a1a      	ldr	r2, [pc, #104]	@ (800477c <vPortValidateInterruptPriority+0x7c>)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4413      	add	r3, r2
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800471c:	4b18      	ldr	r3, [pc, #96]	@ (8004780 <vPortValidateInterruptPriority+0x80>)
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	7afa      	ldrb	r2, [r7, #11]
 8004722:	429a      	cmp	r2, r3
 8004724:	d20d      	bcs.n	8004742 <vPortValidateInterruptPriority+0x42>
        __asm volatile
 8004726:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800472a:	b672      	cpsid	i
 800472c:	f383 8811 	msr	BASEPRI, r3
 8004730:	f3bf 8f6f 	isb	sy
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	b662      	cpsie	i
 800473a:	607b      	str	r3, [r7, #4]
    }
 800473c:	bf00      	nop
 800473e:	bf00      	nop
 8004740:	e7fd      	b.n	800473e <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004742:	4b10      	ldr	r3, [pc, #64]	@ (8004784 <vPortValidateInterruptPriority+0x84>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800474a:	4b0f      	ldr	r3, [pc, #60]	@ (8004788 <vPortValidateInterruptPriority+0x88>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d90d      	bls.n	800476e <vPortValidateInterruptPriority+0x6e>
        __asm volatile
 8004752:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004756:	b672      	cpsid	i
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	b662      	cpsie	i
 8004766:	603b      	str	r3, [r7, #0]
    }
 8004768:	bf00      	nop
 800476a:	bf00      	nop
 800476c:	e7fd      	b.n	800476a <vPortValidateInterruptPriority+0x6a>
    }
 800476e:	bf00      	nop
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	e000e3f0 	.word	0xe000e3f0
 8004780:	2000025c 	.word	0x2000025c
 8004784:	e000ed0c 	.word	0xe000ed0c
 8004788:	20000260 	.word	0x20000260

0800478c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b08a      	sub	sp, #40	@ 0x28
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004794:	2300      	movs	r3, #0
 8004796:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004798:	f7fe fbe2 	bl	8002f60 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800479c:	4b56      	ldr	r3, [pc, #344]	@ (80048f8 <pvPortMalloc+0x16c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80047a4:	f000 f914 	bl	80049d0 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d012      	beq.n	80047d4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80047ae:	2208      	movs	r2, #8
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f003 0307 	and.w	r3, r3, #7
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	3308      	adds	r3, #8
 80047ba:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	43db      	mvns	r3, r3
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d804      	bhi.n	80047d0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	4413      	add	r3, r2
 80047cc:	607b      	str	r3, [r7, #4]
 80047ce:	e001      	b.n	80047d4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80047d0:	2300      	movs	r3, #0
 80047d2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	db73      	blt.n	80048c2 <pvPortMalloc+0x136>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d070      	beq.n	80048c2 <pvPortMalloc+0x136>
 80047e0:	4b46      	ldr	r3, [pc, #280]	@ (80048fc <pvPortMalloc+0x170>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d86b      	bhi.n	80048c2 <pvPortMalloc+0x136>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80047ea:	4b45      	ldr	r3, [pc, #276]	@ (8004900 <pvPortMalloc+0x174>)
 80047ec:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80047ee:	4b44      	ldr	r3, [pc, #272]	@ (8004900 <pvPortMalloc+0x174>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047f4:	e004      	b.n	8004800 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80047f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80047fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	429a      	cmp	r2, r3
 8004808:	d903      	bls.n	8004812 <pvPortMalloc+0x86>
 800480a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1f1      	bne.n	80047f6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004812:	4b39      	ldr	r3, [pc, #228]	@ (80048f8 <pvPortMalloc+0x16c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004818:	429a      	cmp	r2, r3
 800481a:	d052      	beq.n	80048c2 <pvPortMalloc+0x136>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2208      	movs	r2, #8
 8004822:	4413      	add	r3, r2
 8004824:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800482e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	1ad2      	subs	r2, r2, r3
 8004836:	2308      	movs	r3, #8
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	429a      	cmp	r2, r3
 800483c:	d922      	bls.n	8004884 <pvPortMalloc+0xf8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800483e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4413      	add	r3, r2
 8004844:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00d      	beq.n	800486c <pvPortMalloc+0xe0>
        __asm volatile
 8004850:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004854:	b672      	cpsid	i
 8004856:	f383 8811 	msr	BASEPRI, r3
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	b662      	cpsie	i
 8004864:	613b      	str	r3, [r7, #16]
    }
 8004866:	bf00      	nop
 8004868:	bf00      	nop
 800486a:	e7fd      	b.n	8004868 <pvPortMalloc+0xdc>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800486c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	1ad2      	subs	r2, r2, r3
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800487e:	6978      	ldr	r0, [r7, #20]
 8004880:	f000 f902 	bl	8004a88 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004884:	4b1d      	ldr	r3, [pc, #116]	@ (80048fc <pvPortMalloc+0x170>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	4a1b      	ldr	r2, [pc, #108]	@ (80048fc <pvPortMalloc+0x170>)
 8004890:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004892:	4b1a      	ldr	r3, [pc, #104]	@ (80048fc <pvPortMalloc+0x170>)
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	4b1b      	ldr	r3, [pc, #108]	@ (8004904 <pvPortMalloc+0x178>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d203      	bcs.n	80048a6 <pvPortMalloc+0x11a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800489e:	4b17      	ldr	r3, [pc, #92]	@ (80048fc <pvPortMalloc+0x170>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a18      	ldr	r2, [pc, #96]	@ (8004904 <pvPortMalloc+0x178>)
 80048a4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80048a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80048ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80048b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80048b8:	4b13      	ldr	r3, [pc, #76]	@ (8004908 <pvPortMalloc+0x17c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3301      	adds	r3, #1
 80048be:	4a12      	ldr	r2, [pc, #72]	@ (8004908 <pvPortMalloc+0x17c>)
 80048c0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80048c2:	f7fe fb5b 	bl	8002f7c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00d      	beq.n	80048ec <pvPortMalloc+0x160>
        __asm volatile
 80048d0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80048d4:	b672      	cpsid	i
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	b662      	cpsie	i
 80048e4:	60fb      	str	r3, [r7, #12]
    }
 80048e6:	bf00      	nop
 80048e8:	bf00      	nop
 80048ea:	e7fd      	b.n	80048e8 <pvPortMalloc+0x15c>
    return pvReturn;
 80048ec:	69fb      	ldr	r3, [r7, #28]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3728      	adds	r7, #40	@ 0x28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	2000ba6c 	.word	0x2000ba6c
 80048fc:	2000ba70 	.word	0x2000ba70
 8004900:	2000ba64 	.word	0x2000ba64
 8004904:	2000ba74 	.word	0x2000ba74
 8004908:	2000ba78 	.word	0x2000ba78

0800490c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d04f      	beq.n	80049be <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800491e:	2308      	movs	r3, #8
 8004920:	425b      	negs	r3, r3
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4413      	add	r3, r2
 8004926:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	db0d      	blt.n	8004950 <vPortFree+0x44>
        __asm volatile
 8004934:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004938:	b672      	cpsid	i
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	b662      	cpsie	i
 8004948:	60fb      	str	r3, [r7, #12]
    }
 800494a:	bf00      	nop
 800494c:	bf00      	nop
 800494e:	e7fd      	b.n	800494c <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00d      	beq.n	8004974 <vPortFree+0x68>
        __asm volatile
 8004958:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800495c:	b672      	cpsid	i
 800495e:	f383 8811 	msr	BASEPRI, r3
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	b662      	cpsie	i
 800496c:	60bb      	str	r3, [r7, #8]
    }
 800496e:	bf00      	nop
 8004970:	bf00      	nop
 8004972:	e7fd      	b.n	8004970 <vPortFree+0x64>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	0fdb      	lsrs	r3, r3, #31
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d01c      	beq.n	80049be <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d118      	bne.n	80049be <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004998:	f7fe fae2 	bl	8002f60 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	4b09      	ldr	r3, [pc, #36]	@ (80049c8 <vPortFree+0xbc>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4413      	add	r3, r2
 80049a6:	4a08      	ldr	r2, [pc, #32]	@ (80049c8 <vPortFree+0xbc>)
 80049a8:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049aa:	6938      	ldr	r0, [r7, #16]
 80049ac:	f000 f86c 	bl	8004a88 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80049b0:	4b06      	ldr	r3, [pc, #24]	@ (80049cc <vPortFree+0xc0>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	3301      	adds	r3, #1
 80049b6:	4a05      	ldr	r2, [pc, #20]	@ (80049cc <vPortFree+0xc0>)
 80049b8:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80049ba:	f7fe fadf 	bl	8002f7c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80049be:	bf00      	nop
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	2000ba70 	.word	0x2000ba70
 80049cc:	2000ba7c 	.word	0x2000ba7c

080049d0 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80049d6:	f44f 4338 	mov.w	r3, #47104	@ 0xb800
 80049da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80049dc:	4b25      	ldr	r3, [pc, #148]	@ (8004a74 <prvHeapInit+0xa4>)
 80049de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00c      	beq.n	8004a04 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	3307      	adds	r3, #7
 80049ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 0307 	bic.w	r3, r3, #7
 80049f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004a74 <prvHeapInit+0xa4>)
 8004a00:	4413      	add	r3, r2
 8004a02:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a08:	4a1b      	ldr	r2, [pc, #108]	@ (8004a78 <prvHeapInit+0xa8>)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8004a78 <prvHeapInit+0xa8>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	4413      	add	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004a1c:	2208      	movs	r2, #8
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	1a9b      	subs	r3, r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0307 	bic.w	r3, r3, #7
 8004a2a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4a13      	ldr	r2, [pc, #76]	@ (8004a7c <prvHeapInit+0xac>)
 8004a30:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004a32:	4b12      	ldr	r3, [pc, #72]	@ (8004a7c <prvHeapInit+0xac>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2200      	movs	r2, #0
 8004a38:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004a3a:	4b10      	ldr	r3, [pc, #64]	@ (8004a7c <prvHeapInit+0xac>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	1ad2      	subs	r2, r2, r3
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a50:	4b0a      	ldr	r3, [pc, #40]	@ (8004a7c <prvHeapInit+0xac>)
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	4a08      	ldr	r2, [pc, #32]	@ (8004a80 <prvHeapInit+0xb0>)
 8004a5e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	4a07      	ldr	r2, [pc, #28]	@ (8004a84 <prvHeapInit+0xb4>)
 8004a66:	6013      	str	r3, [r2, #0]
}
 8004a68:	bf00      	nop
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	20000264 	.word	0x20000264
 8004a78:	2000ba64 	.word	0x2000ba64
 8004a7c:	2000ba6c 	.word	0x2000ba6c
 8004a80:	2000ba74 	.word	0x2000ba74
 8004a84:	2000ba70 	.word	0x2000ba70

08004a88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a90:	4b28      	ldr	r3, [pc, #160]	@ (8004b34 <prvInsertBlockIntoFreeList+0xac>)
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	e002      	b.n	8004a9c <prvInsertBlockIntoFreeList+0x14>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d8f7      	bhi.n	8004a96 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d108      	bne.n	8004aca <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	441a      	add	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	441a      	add	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d118      	bne.n	8004b10 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	4b15      	ldr	r3, [pc, #84]	@ (8004b38 <prvInsertBlockIntoFreeList+0xb0>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d00d      	beq.n	8004b06 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	441a      	add	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	e008      	b.n	8004b18 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b06:	4b0c      	ldr	r3, [pc, #48]	@ (8004b38 <prvInsertBlockIntoFreeList+0xb0>)
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	e003      	b.n	8004b18 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d002      	beq.n	8004b26 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004b26:	bf00      	nop
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	2000ba64 	.word	0x2000ba64
 8004b38:	2000ba6c 	.word	0x2000ba6c

08004b3c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004b40:	4803      	ldr	r0, [pc, #12]	@ (8004b50 <_cbSendSystemDesc+0x14>)
 8004b42:	f001 fde9 	bl	8006718 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004b46:	4803      	ldr	r0, [pc, #12]	@ (8004b54 <_cbSendSystemDesc+0x18>)
 8004b48:	f001 fde6 	bl	8006718 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004b4c:	bf00      	nop
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	08007e24 	.word	0x08007e24
 8004b54:	08007e64 	.word	0x08007e64

08004b58 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004b5c:	4b06      	ldr	r3, [pc, #24]	@ (8004b78 <SEGGER_SYSVIEW_Conf+0x20>)
 8004b5e:	6818      	ldr	r0, [r3, #0]
 8004b60:	4b05      	ldr	r3, [pc, #20]	@ (8004b78 <SEGGER_SYSVIEW_Conf+0x20>)
 8004b62:	6819      	ldr	r1, [r3, #0]
 8004b64:	4b05      	ldr	r3, [pc, #20]	@ (8004b7c <SEGGER_SYSVIEW_Conf+0x24>)
 8004b66:	4a06      	ldr	r2, [pc, #24]	@ (8004b80 <SEGGER_SYSVIEW_Conf+0x28>)
 8004b68:	f001 fa5c 	bl	8006024 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004b6c:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004b70:	f001 fa9c 	bl	80060ac <SEGGER_SYSVIEW_SetRAMBase>
}
 8004b74:	bf00      	nop
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	20000000 	.word	0x20000000
 8004b7c:	08004b3d 	.word	0x08004b3d
 8004b80:	08007f00 	.word	0x08007f00

08004b84 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	607b      	str	r3, [r7, #4]
 8004b8e:	e033      	b.n	8004bf8 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004b90:	491e      	ldr	r1, [pc, #120]	@ (8004c0c <_cbSendTaskList+0x88>)
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	4613      	mov	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	440b      	add	r3, r1
 8004b9e:	6818      	ldr	r0, [r3, #0]
 8004ba0:	491a      	ldr	r1, [pc, #104]	@ (8004c0c <_cbSendTaskList+0x88>)
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	440b      	add	r3, r1
 8004bae:	3304      	adds	r3, #4
 8004bb0:	6819      	ldr	r1, [r3, #0]
 8004bb2:	4c16      	ldr	r4, [pc, #88]	@ (8004c0c <_cbSendTaskList+0x88>)
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4423      	add	r3, r4
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	681c      	ldr	r4, [r3, #0]
 8004bc4:	4d11      	ldr	r5, [pc, #68]	@ (8004c0c <_cbSendTaskList+0x88>)
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4413      	add	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	442b      	add	r3, r5
 8004bd2:	330c      	adds	r3, #12
 8004bd4:	681d      	ldr	r5, [r3, #0]
 8004bd6:	4e0d      	ldr	r6, [pc, #52]	@ (8004c0c <_cbSendTaskList+0x88>)
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4433      	add	r3, r6
 8004be4:	3310      	adds	r3, #16
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	462b      	mov	r3, r5
 8004bec:	4622      	mov	r2, r4
 8004bee:	f000 f8bd 	bl	8004d6c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	607b      	str	r3, [r7, #4]
 8004bf8:	4b05      	ldr	r3, [pc, #20]	@ (8004c10 <_cbSendTaskList+0x8c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d3c6      	bcc.n	8004b90 <_cbSendTaskList+0xc>
  }
}
 8004c02:	bf00      	nop
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c0c:	2000ba80 	.word	0x2000ba80
 8004c10:	2000bb20 	.word	0x2000bb20

08004c14 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c18:	b082      	sub	sp, #8
 8004c1a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004c1c:	f7fe fab2 	bl	8003184 <xTaskGetTickCountFromISR>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2200      	movs	r2, #0
 8004c24:	469a      	mov	sl, r3
 8004c26:	4693      	mov	fp, r2
 8004c28:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004c2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	f04f 0a00 	mov.w	sl, #0
 8004c38:	f04f 0b00 	mov.w	fp, #0
 8004c3c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004c40:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004c44:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004c48:	4652      	mov	r2, sl
 8004c4a:	465b      	mov	r3, fp
 8004c4c:	1a14      	subs	r4, r2, r0
 8004c4e:	eb63 0501 	sbc.w	r5, r3, r1
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	f04f 0300 	mov.w	r3, #0
 8004c5a:	00ab      	lsls	r3, r5, #2
 8004c5c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004c60:	00a2      	lsls	r2, r4, #2
 8004c62:	4614      	mov	r4, r2
 8004c64:	461d      	mov	r5, r3
 8004c66:	eb14 0800 	adds.w	r8, r4, r0
 8004c6a:	eb45 0901 	adc.w	r9, r5, r1
 8004c6e:	f04f 0200 	mov.w	r2, #0
 8004c72:	f04f 0300 	mov.w	r3, #0
 8004c76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c82:	4690      	mov	r8, r2
 8004c84:	4699      	mov	r9, r3
 8004c86:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004c8a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004c8e:	4610      	mov	r0, r2
 8004c90:	4619      	mov	r1, r3
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004c9c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af02      	add	r7, sp, #8
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
 8004ca8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004caa:	2205      	movs	r2, #5
 8004cac:	492b      	ldr	r1, [pc, #172]	@ (8004d5c <SYSVIEW_AddTask+0xc0>)
 8004cae:	68b8      	ldr	r0, [r7, #8]
 8004cb0:	f002 fa78 	bl	80071a4 <memcmp>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d04b      	beq.n	8004d52 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004cba:	4b29      	ldr	r3, [pc, #164]	@ (8004d60 <SYSVIEW_AddTask+0xc4>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b07      	cmp	r3, #7
 8004cc0:	d903      	bls.n	8004cca <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004cc2:	4828      	ldr	r0, [pc, #160]	@ (8004d64 <SYSVIEW_AddTask+0xc8>)
 8004cc4:	f001 ffd4 	bl	8006c70 <SEGGER_SYSVIEW_Warn>
    return;
 8004cc8:	e044      	b.n	8004d54 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004cca:	4b25      	ldr	r3, [pc, #148]	@ (8004d60 <SYSVIEW_AddTask+0xc4>)
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	4926      	ldr	r1, [pc, #152]	@ (8004d68 <SYSVIEW_AddTask+0xcc>)
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	440b      	add	r3, r1
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004cde:	4b20      	ldr	r3, [pc, #128]	@ (8004d60 <SYSVIEW_AddTask+0xc4>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4921      	ldr	r1, [pc, #132]	@ (8004d68 <SYSVIEW_AddTask+0xcc>)
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	440b      	add	r3, r1
 8004cee:	3304      	adds	r3, #4
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8004d60 <SYSVIEW_AddTask+0xc4>)
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	491b      	ldr	r1, [pc, #108]	@ (8004d68 <SYSVIEW_AddTask+0xcc>)
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	440b      	add	r3, r1
 8004d04:	3308      	adds	r3, #8
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004d0a:	4b15      	ldr	r3, [pc, #84]	@ (8004d60 <SYSVIEW_AddTask+0xc4>)
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	4916      	ldr	r1, [pc, #88]	@ (8004d68 <SYSVIEW_AddTask+0xcc>)
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	440b      	add	r3, r1
 8004d1a:	330c      	adds	r3, #12
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004d20:	4b0f      	ldr	r3, [pc, #60]	@ (8004d60 <SYSVIEW_AddTask+0xc4>)
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	4910      	ldr	r1, [pc, #64]	@ (8004d68 <SYSVIEW_AddTask+0xcc>)
 8004d26:	4613      	mov	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	440b      	add	r3, r1
 8004d30:	3310      	adds	r3, #16
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004d36:	4b0a      	ldr	r3, [pc, #40]	@ (8004d60 <SYSVIEW_AddTask+0xc4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	4a08      	ldr	r2, [pc, #32]	@ (8004d60 <SYSVIEW_AddTask+0xc4>)
 8004d3e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	68b9      	ldr	r1, [r7, #8]
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f000 f80e 	bl	8004d6c <SYSVIEW_SendTaskInfo>
 8004d50:	e000      	b.n	8004d54 <SYSVIEW_AddTask+0xb8>
    return;
 8004d52:	bf00      	nop

}
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	08007e74 	.word	0x08007e74
 8004d60:	2000bb20 	.word	0x2000bb20
 8004d64:	08007e7c 	.word	0x08007e7c
 8004d68:	2000ba80 	.word	0x2000ba80

08004d6c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08a      	sub	sp, #40	@ 0x28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
 8004d78:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004d7a:	f107 0314 	add.w	r3, r7, #20
 8004d7e:	2214      	movs	r2, #20
 8004d80:	2100      	movs	r1, #0
 8004d82:	4618      	mov	r0, r3
 8004d84:	f002 fa1e 	bl	80071c4 <memset>
  TaskInfo.TaskID     = TaskID;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004d9c:	f107 0314 	add.w	r3, r7, #20
 8004da0:	4618      	mov	r0, r3
 8004da2:	f001 fbc1 	bl	8006528 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004da6:	bf00      	nop
 8004da8:	3728      	adds	r7, #40	@ 0x28
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004db6:	4b26      	ldr	r3, [pc, #152]	@ (8004e50 <_DoInit+0xa0>)
 8004db8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004dba:	22a8      	movs	r2, #168	@ 0xa8
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	6838      	ldr	r0, [r7, #0]
 8004dc0:	f002 fa00 	bl	80071c4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2203      	movs	r2, #3
 8004dc8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2203      	movs	r2, #3
 8004dce:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	4a20      	ldr	r2, [pc, #128]	@ (8004e54 <_DoInit+0xa4>)
 8004dd4:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	4a1f      	ldr	r2, [pc, #124]	@ (8004e58 <_DoInit+0xa8>)
 8004dda:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004de2:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2200      	movs	r2, #0
 8004de8:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2200      	movs	r2, #0
 8004dee:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2200      	movs	r2, #0
 8004df4:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	4a16      	ldr	r2, [pc, #88]	@ (8004e54 <_DoInit+0xa4>)
 8004dfa:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	4a17      	ldr	r2, [pc, #92]	@ (8004e5c <_DoInit+0xac>)
 8004e00:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2210      	movs	r2, #16
 8004e06:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2200      	movs	r2, #0
 8004e12:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	2200      	movs	r2, #0
 8004e18:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004e1a:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004e1e:	2300      	movs	r3, #0
 8004e20:	607b      	str	r3, [r7, #4]
 8004e22:	e00c      	b.n	8004e3e <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f1c3 030f 	rsb	r3, r3, #15
 8004e2a:	4a0d      	ldr	r2, [pc, #52]	@ (8004e60 <_DoInit+0xb0>)
 8004e2c:	5cd1      	ldrb	r1, [r2, r3]
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4413      	add	r3, r2
 8004e34:	460a      	mov	r2, r1
 8004e36:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	607b      	str	r3, [r7, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b0f      	cmp	r3, #15
 8004e42:	d9ef      	bls.n	8004e24 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004e44:	f3bf 8f5f 	dmb	sy
}
 8004e48:	bf00      	nop
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	2000bb24 	.word	0x2000bb24
 8004e54:	08007ecc 	.word	0x08007ecc
 8004e58:	2000bbcc 	.word	0x2000bbcc
 8004e5c:	2000bfcc 	.word	0x2000bfcc
 8004e60:	08007f08 	.word	0x08007f08

08004e64 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08a      	sub	sp, #40	@ 0x28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004e70:	2300      	movs	r3, #0
 8004e72:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d905      	bls.n	8004e94 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e92:	e007      	b.n	8004ea4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	69b9      	ldr	r1, [r7, #24]
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	1acb      	subs	r3, r1, r3
 8004e9e:	4413      	add	r3, r2
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	bf28      	it	cs
 8004eb2:	4613      	movcs	r3, r2
 8004eb4:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	bf28      	it	cs
 8004ebe:	4613      	movcs	r3, r2
 8004ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	4413      	add	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ece:	68b9      	ldr	r1, [r7, #8]
 8004ed0:	6978      	ldr	r0, [r7, #20]
 8004ed2:	f002 f9da 	bl	800728a <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004ed6:	6a3a      	ldr	r2, [r7, #32]
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eda:	4413      	add	r3, r2
 8004edc:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee2:	4413      	add	r3, r2
 8004ee4:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004eee:	69fa      	ldr	r2, [r7, #28]
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef2:	4413      	add	r3, r2
 8004ef4:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	69fa      	ldr	r2, [r7, #28]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d101      	bne.n	8004f04 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004f00:	2300      	movs	r3, #0
 8004f02:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f04:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	69fa      	ldr	r2, [r7, #28]
 8004f0c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1b2      	bne.n	8004e7a <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004f14:	6a3b      	ldr	r3, [r7, #32]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3728      	adds	r7, #40	@ 0x28
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b088      	sub	sp, #32
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	60f8      	str	r0, [r7, #12]
 8004f26:	60b9      	str	r1, [r7, #8]
 8004f28:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d911      	bls.n	8004f66 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	4413      	add	r3, r2
 8004f4a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	68b9      	ldr	r1, [r7, #8]
 8004f50:	6938      	ldr	r0, [r7, #16]
 8004f52:	f002 f99a 	bl	800728a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f56:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004f5a:	69fa      	ldr	r2, [r7, #28]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	441a      	add	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004f64:	e01f      	b.n	8004fa6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	4413      	add	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	68b9      	ldr	r1, [r7, #8]
 8004f78:	6938      	ldr	r0, [r7, #16]
 8004f7a:	f002 f986 	bl	800728a <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	4413      	add	r3, r2
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	4619      	mov	r1, r3
 8004f96:	6938      	ldr	r0, [r7, #16]
 8004f98:	f002 f977 	bl	800728a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f9c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	60da      	str	r2, [r3, #12]
}
 8004fa6:	bf00      	nop
 8004fa8:	3720      	adds	r7, #32
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004fae:	b480      	push	{r7}
 8004fb0:	b087      	sub	sp, #28
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d808      	bhi.n	8004fdc <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689a      	ldr	r2, [r3, #8]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	1ad2      	subs	r2, r2, r3
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	e004      	b.n	8004fe6 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004fe6:	697b      	ldr	r3, [r7, #20]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	371c      	adds	r7, #28
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08c      	sub	sp, #48	@ 0x30
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005000:	4b3e      	ldr	r3, [pc, #248]	@ (80050fc <SEGGER_RTT_ReadNoLock+0x108>)
 8005002:	623b      	str	r3, [r7, #32]
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b53      	cmp	r3, #83	@ 0x53
 800500c:	d001      	beq.n	8005012 <SEGGER_RTT_ReadNoLock+0x1e>
 800500e:	f7ff fecf 	bl	8004db0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	4613      	mov	r3, r2
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	4413      	add	r3, r2
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	3360      	adds	r3, #96	@ 0x60
 800501e:	4a37      	ldr	r2, [pc, #220]	@ (80050fc <SEGGER_RTT_ReadNoLock+0x108>)
 8005020:	4413      	add	r3, r2
 8005022:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005034:	2300      	movs	r3, #0
 8005036:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005038:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	429a      	cmp	r2, r3
 800503e:	d92b      	bls.n	8005098 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4293      	cmp	r3, r2
 8005050:	bf28      	it	cs
 8005052:	4613      	movcs	r3, r2
 8005054:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800505c:	4413      	add	r3, r2
 800505e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	6939      	ldr	r1, [r7, #16]
 8005064:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005066:	f002 f910 	bl	800728a <memcpy>
    NumBytesRead += NumBytesRem;
 800506a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	4413      	add	r3, r2
 8005070:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	4413      	add	r3, r2
 8005078:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005082:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	4413      	add	r3, r2
 8005088:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005090:	429a      	cmp	r2, r3
 8005092:	d101      	bne.n	8005098 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005094:	2300      	movs	r3, #0
 8005096:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4293      	cmp	r3, r2
 80050a6:	bf28      	it	cs
 80050a8:	4613      	movcs	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d019      	beq.n	80050e6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b8:	4413      	add	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	6939      	ldr	r1, [r7, #16]
 80050c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80050c2:	f002 f8e2 	bl	800728a <memcpy>
    NumBytesRead += NumBytesRem;
 80050c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	4413      	add	r3, r2
 80050cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80050ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	4413      	add	r3, r2
 80050d4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80050de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	4413      	add	r3, r2
 80050e4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80050e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050f0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80050f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3730      	adds	r7, #48	@ 0x30
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	2000bb24 	.word	0x2000bb24

08005100 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005100:	b580      	push	{r7, lr}
 8005102:	b088      	sub	sp, #32
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	4613      	mov	r3, r2
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	4413      	add	r3, r2
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	4a1f      	ldr	r2, [pc, #124]	@ (800519c <SEGGER_RTT_WriteNoLock+0x9c>)
 800511e:	4413      	add	r3, r2
 8005120:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	2b02      	cmp	r3, #2
 8005128:	d029      	beq.n	800517e <SEGGER_RTT_WriteNoLock+0x7e>
 800512a:	2b02      	cmp	r3, #2
 800512c:	d82e      	bhi.n	800518c <SEGGER_RTT_WriteNoLock+0x8c>
 800512e:	2b00      	cmp	r3, #0
 8005130:	d002      	beq.n	8005138 <SEGGER_RTT_WriteNoLock+0x38>
 8005132:	2b01      	cmp	r3, #1
 8005134:	d013      	beq.n	800515e <SEGGER_RTT_WriteNoLock+0x5e>
 8005136:	e029      	b.n	800518c <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005138:	6978      	ldr	r0, [r7, #20]
 800513a:	f7ff ff38 	bl	8004fae <_GetAvailWriteSpace>
 800513e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	429a      	cmp	r2, r3
 8005146:	d202      	bcs.n	800514e <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8005148:	2300      	movs	r3, #0
 800514a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800514c:	e021      	b.n	8005192 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	69b9      	ldr	r1, [r7, #24]
 8005156:	6978      	ldr	r0, [r7, #20]
 8005158:	f7ff fee1 	bl	8004f1e <_WriteNoCheck>
    break;
 800515c:	e019      	b.n	8005192 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800515e:	6978      	ldr	r0, [r7, #20]
 8005160:	f7ff ff25 	bl	8004fae <_GetAvailWriteSpace>
 8005164:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	4293      	cmp	r3, r2
 800516c:	bf28      	it	cs
 800516e:	4613      	movcs	r3, r2
 8005170:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005172:	69fa      	ldr	r2, [r7, #28]
 8005174:	69b9      	ldr	r1, [r7, #24]
 8005176:	6978      	ldr	r0, [r7, #20]
 8005178:	f7ff fed1 	bl	8004f1e <_WriteNoCheck>
    break;
 800517c:	e009      	b.n	8005192 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	69b9      	ldr	r1, [r7, #24]
 8005182:	6978      	ldr	r0, [r7, #20]
 8005184:	f7ff fe6e 	bl	8004e64 <_WriteBlocking>
 8005188:	61f8      	str	r0, [r7, #28]
    break;
 800518a:	e002      	b.n	8005192 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800518c:	2300      	movs	r3, #0
 800518e:	61fb      	str	r3, [r7, #28]
    break;
 8005190:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005192:	69fb      	ldr	r3, [r7, #28]
}
 8005194:	4618      	mov	r0, r3
 8005196:	3720      	adds	r7, #32
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	2000bb24 	.word	0x2000bb24

080051a0 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b088      	sub	sp, #32
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80051ac:	4b0e      	ldr	r3, [pc, #56]	@ (80051e8 <SEGGER_RTT_Write+0x48>)
 80051ae:	61fb      	str	r3, [r7, #28]
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b53      	cmp	r3, #83	@ 0x53
 80051b8:	d001      	beq.n	80051be <SEGGER_RTT_Write+0x1e>
 80051ba:	f7ff fdf9 	bl	8004db0 <_DoInit>
  SEGGER_RTT_LOCK();
 80051be:	f3ef 8311 	mrs	r3, BASEPRI
 80051c2:	f04f 0120 	mov.w	r1, #32
 80051c6:	f381 8811 	msr	BASEPRI, r1
 80051ca:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	68b9      	ldr	r1, [r7, #8]
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f7ff ff95 	bl	8005100 <SEGGER_RTT_WriteNoLock>
 80051d6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80051de:	697b      	ldr	r3, [r7, #20]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3720      	adds	r7, #32
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	2000bb24 	.word	0x2000bb24

080051ec <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b088      	sub	sp, #32
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
 80051f8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80051fa:	4b3d      	ldr	r3, [pc, #244]	@ (80052f0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80051fc:	61bb      	str	r3, [r7, #24]
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b53      	cmp	r3, #83	@ 0x53
 8005206:	d001      	beq.n	800520c <SEGGER_RTT_AllocUpBuffer+0x20>
 8005208:	f7ff fdd2 	bl	8004db0 <_DoInit>
  SEGGER_RTT_LOCK();
 800520c:	f3ef 8311 	mrs	r3, BASEPRI
 8005210:	f04f 0120 	mov.w	r1, #32
 8005214:	f381 8811 	msr	BASEPRI, r1
 8005218:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800521a:	4b35      	ldr	r3, [pc, #212]	@ (80052f0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800521c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800521e:	2300      	movs	r3, #0
 8005220:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005222:	6939      	ldr	r1, [r7, #16]
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	4613      	mov	r3, r2
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	4413      	add	r3, r2
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	440b      	add	r3, r1
 8005232:	3304      	adds	r3, #4
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d008      	beq.n	800524c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	3301      	adds	r3, #1
 800523e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	69fa      	ldr	r2, [r7, #28]
 8005246:	429a      	cmp	r2, r3
 8005248:	dbeb      	blt.n	8005222 <SEGGER_RTT_AllocUpBuffer+0x36>
 800524a:	e000      	b.n	800524e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800524c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	69fa      	ldr	r2, [r7, #28]
 8005254:	429a      	cmp	r2, r3
 8005256:	da3f      	bge.n	80052d8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005258:	6939      	ldr	r1, [r7, #16]
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	1c5a      	adds	r2, r3, #1
 800525e:	4613      	mov	r3, r2
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	4413      	add	r3, r2
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	440b      	add	r3, r1
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800526c:	6939      	ldr	r1, [r7, #16]
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	1c5a      	adds	r2, r3, #1
 8005272:	4613      	mov	r3, r2
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	4413      	add	r3, r2
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	440b      	add	r3, r1
 800527c:	3304      	adds	r3, #4
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005282:	6939      	ldr	r1, [r7, #16]
 8005284:	69fa      	ldr	r2, [r7, #28]
 8005286:	4613      	mov	r3, r2
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	4413      	add	r3, r2
 800528c:	00db      	lsls	r3, r3, #3
 800528e:	440b      	add	r3, r1
 8005290:	3320      	adds	r3, #32
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005296:	6939      	ldr	r1, [r7, #16]
 8005298:	69fa      	ldr	r2, [r7, #28]
 800529a:	4613      	mov	r3, r2
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	4413      	add	r3, r2
 80052a0:	00db      	lsls	r3, r3, #3
 80052a2:	440b      	add	r3, r1
 80052a4:	3328      	adds	r3, #40	@ 0x28
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80052aa:	6939      	ldr	r1, [r7, #16]
 80052ac:	69fa      	ldr	r2, [r7, #28]
 80052ae:	4613      	mov	r3, r2
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	4413      	add	r3, r2
 80052b4:	00db      	lsls	r3, r3, #3
 80052b6:	440b      	add	r3, r1
 80052b8:	3324      	adds	r3, #36	@ 0x24
 80052ba:	2200      	movs	r2, #0
 80052bc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80052be:	6939      	ldr	r1, [r7, #16]
 80052c0:	69fa      	ldr	r2, [r7, #28]
 80052c2:	4613      	mov	r3, r2
 80052c4:	005b      	lsls	r3, r3, #1
 80052c6:	4413      	add	r3, r2
 80052c8:	00db      	lsls	r3, r3, #3
 80052ca:	440b      	add	r3, r1
 80052cc:	332c      	adds	r3, #44	@ 0x2c
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80052d2:	f3bf 8f5f 	dmb	sy
 80052d6:	e002      	b.n	80052de <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80052d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80052dc:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80052e4:	69fb      	ldr	r3, [r7, #28]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3720      	adds	r7, #32
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	2000bb24 	.word	0x2000bb24

080052f4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08a      	sub	sp, #40	@ 0x28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
 8005300:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005302:	4b21      	ldr	r3, [pc, #132]	@ (8005388 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005304:	623b      	str	r3, [r7, #32]
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b53      	cmp	r3, #83	@ 0x53
 800530e:	d001      	beq.n	8005314 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005310:	f7ff fd4e 	bl	8004db0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005314:	4b1c      	ldr	r3, [pc, #112]	@ (8005388 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005316:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2b02      	cmp	r3, #2
 800531c:	d82c      	bhi.n	8005378 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800531e:	f3ef 8311 	mrs	r3, BASEPRI
 8005322:	f04f 0120 	mov.w	r1, #32
 8005326:	f381 8811 	msr	BASEPRI, r1
 800532a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	4613      	mov	r3, r2
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	4413      	add	r3, r2
 8005334:	00db      	lsls	r3, r3, #3
 8005336:	3360      	adds	r3, #96	@ 0x60
 8005338:	69fa      	ldr	r2, [r7, #28]
 800533a:	4413      	add	r3, r2
 800533c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00e      	beq.n	8005362 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2200      	movs	r2, #0
 800535a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	2200      	movs	r2, #0
 8005360:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005366:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005368:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005372:	2300      	movs	r3, #0
 8005374:	627b      	str	r3, [r7, #36]	@ 0x24
 8005376:	e002      	b.n	800537e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005378:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800537c:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800537e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005380:	4618      	mov	r0, r3
 8005382:	3728      	adds	r7, #40	@ 0x28
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	2000bb24 	.word	0x2000bb24

0800538c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	1c5a      	adds	r2, r3, #1
 80053a0:	60fa      	str	r2, [r7, #12]
 80053a2:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b80      	cmp	r3, #128	@ 0x80
 80053a8:	d90a      	bls.n	80053c0 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80053aa:	2380      	movs	r3, #128	@ 0x80
 80053ac:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80053ae:	e007      	b.n	80053c0 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	1c53      	adds	r3, r2, #1
 80053b4:	60bb      	str	r3, [r7, #8]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	1c59      	adds	r1, r3, #1
 80053ba:	60f9      	str	r1, [r7, #12]
 80053bc:	7812      	ldrb	r2, [r2, #0]
 80053be:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	1e5a      	subs	r2, r3, #1
 80053c4:	607a      	str	r2, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <_EncodeStr+0x46>
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1ee      	bne.n	80053b0 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80053de:	68fb      	ldr	r3, [r7, #12]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	371c      	adds	r7, #28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3307      	adds	r3, #7
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800540a:	4b34      	ldr	r3, [pc, #208]	@ (80054dc <_HandleIncomingPacket+0xd8>)
 800540c:	7e1b      	ldrb	r3, [r3, #24]
 800540e:	4618      	mov	r0, r3
 8005410:	1cfb      	adds	r3, r7, #3
 8005412:	2201      	movs	r2, #1
 8005414:	4619      	mov	r1, r3
 8005416:	f7ff fded 	bl	8004ff4 <SEGGER_RTT_ReadNoLock>
 800541a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d057      	beq.n	80054d2 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8005422:	78fb      	ldrb	r3, [r7, #3]
 8005424:	2b80      	cmp	r3, #128	@ 0x80
 8005426:	d031      	beq.n	800548c <_HandleIncomingPacket+0x88>
 8005428:	2b80      	cmp	r3, #128	@ 0x80
 800542a:	dc40      	bgt.n	80054ae <_HandleIncomingPacket+0xaa>
 800542c:	2b07      	cmp	r3, #7
 800542e:	dc15      	bgt.n	800545c <_HandleIncomingPacket+0x58>
 8005430:	2b00      	cmp	r3, #0
 8005432:	dd3c      	ble.n	80054ae <_HandleIncomingPacket+0xaa>
 8005434:	3b01      	subs	r3, #1
 8005436:	2b06      	cmp	r3, #6
 8005438:	d839      	bhi.n	80054ae <_HandleIncomingPacket+0xaa>
 800543a:	a201      	add	r2, pc, #4	@ (adr r2, 8005440 <_HandleIncomingPacket+0x3c>)
 800543c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005440:	08005463 	.word	0x08005463
 8005444:	08005469 	.word	0x08005469
 8005448:	0800546f 	.word	0x0800546f
 800544c:	08005475 	.word	0x08005475
 8005450:	0800547b 	.word	0x0800547b
 8005454:	08005481 	.word	0x08005481
 8005458:	08005487 	.word	0x08005487
 800545c:	2b7f      	cmp	r3, #127	@ 0x7f
 800545e:	d033      	beq.n	80054c8 <_HandleIncomingPacket+0xc4>
 8005460:	e025      	b.n	80054ae <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005462:	f000 fee7 	bl	8006234 <SEGGER_SYSVIEW_Start>
      break;
 8005466:	e034      	b.n	80054d2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005468:	f000 ff9e 	bl	80063a8 <SEGGER_SYSVIEW_Stop>
      break;
 800546c:	e031      	b.n	80054d2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800546e:	f001 f977 	bl	8006760 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005472:	e02e      	b.n	80054d2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005474:	f001 f93c 	bl	80066f0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005478:	e02b      	b.n	80054d2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800547a:	f000 ffbb 	bl	80063f4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800547e:	e028      	b.n	80054d2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005480:	f001 fba4 	bl	8006bcc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005484:	e025      	b.n	80054d2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005486:	f001 fb83 	bl	8006b90 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800548a:	e022      	b.n	80054d2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800548c:	4b13      	ldr	r3, [pc, #76]	@ (80054dc <_HandleIncomingPacket+0xd8>)
 800548e:	7e1b      	ldrb	r3, [r3, #24]
 8005490:	4618      	mov	r0, r3
 8005492:	1cfb      	adds	r3, r7, #3
 8005494:	2201      	movs	r2, #1
 8005496:	4619      	mov	r1, r3
 8005498:	f7ff fdac 	bl	8004ff4 <SEGGER_RTT_ReadNoLock>
 800549c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d013      	beq.n	80054cc <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80054a4:	78fb      	ldrb	r3, [r7, #3]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f001 fae8 	bl	8006a7c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80054ac:	e00e      	b.n	80054cc <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80054ae:	78fb      	ldrb	r3, [r7, #3]
 80054b0:	b25b      	sxtb	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	da0c      	bge.n	80054d0 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80054b6:	4b09      	ldr	r3, [pc, #36]	@ (80054dc <_HandleIncomingPacket+0xd8>)
 80054b8:	7e1b      	ldrb	r3, [r3, #24]
 80054ba:	4618      	mov	r0, r3
 80054bc:	1cfb      	adds	r3, r7, #3
 80054be:	2201      	movs	r2, #1
 80054c0:	4619      	mov	r1, r3
 80054c2:	f7ff fd97 	bl	8004ff4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80054c6:	e003      	b.n	80054d0 <_HandleIncomingPacket+0xcc>
      break;
 80054c8:	bf00      	nop
 80054ca:	e002      	b.n	80054d2 <_HandleIncomingPacket+0xce>
      break;
 80054cc:	bf00      	nop
 80054ce:	e000      	b.n	80054d2 <_HandleIncomingPacket+0xce>
      break;
 80054d0:	bf00      	nop
    }
  }
}
 80054d2:	bf00      	nop
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	2000cfe4 	.word	0x2000cfe4

080054e0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b08c      	sub	sp, #48	@ 0x30
 80054e4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80054e6:	2301      	movs	r3, #1
 80054e8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80054ea:	1d3b      	adds	r3, r7, #4
 80054ec:	3301      	adds	r3, #1
 80054ee:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054f4:	4b31      	ldr	r3, [pc, #196]	@ (80055bc <_TrySendOverflowPacket+0xdc>)
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054fa:	e00b      	b.n	8005514 <_TrySendOverflowPacket+0x34>
 80054fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005502:	1c59      	adds	r1, r3, #1
 8005504:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005506:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800550a:	b2d2      	uxtb	r2, r2
 800550c:	701a      	strb	r2, [r3, #0]
 800550e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005510:	09db      	lsrs	r3, r3, #7
 8005512:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005516:	2b7f      	cmp	r3, #127	@ 0x7f
 8005518:	d8f0      	bhi.n	80054fc <_TrySendOverflowPacket+0x1c>
 800551a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005520:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005522:	b2d2      	uxtb	r2, r2
 8005524:	701a      	strb	r2, [r3, #0]
 8005526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005528:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800552a:	4b25      	ldr	r3, [pc, #148]	@ (80055c0 <_TrySendOverflowPacket+0xe0>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005530:	4b22      	ldr	r3, [pc, #136]	@ (80055bc <_TrySendOverflowPacket+0xdc>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	627b      	str	r3, [r7, #36]	@ 0x24
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	623b      	str	r3, [r7, #32]
 8005542:	e00b      	b.n	800555c <_TrySendOverflowPacket+0x7c>
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	b2da      	uxtb	r2, r3
 8005548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554a:	1c59      	adds	r1, r3, #1
 800554c:	6279      	str	r1, [r7, #36]	@ 0x24
 800554e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005552:	b2d2      	uxtb	r2, r2
 8005554:	701a      	strb	r2, [r3, #0]
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	09db      	lsrs	r3, r3, #7
 800555a:	623b      	str	r3, [r7, #32]
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005560:	d8f0      	bhi.n	8005544 <_TrySendOverflowPacket+0x64>
 8005562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	627a      	str	r2, [r7, #36]	@ 0x24
 8005568:	6a3a      	ldr	r2, [r7, #32]
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	701a      	strb	r2, [r3, #0]
 800556e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005570:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005572:	4b12      	ldr	r3, [pc, #72]	@ (80055bc <_TrySendOverflowPacket+0xdc>)
 8005574:	785b      	ldrb	r3, [r3, #1]
 8005576:	4618      	mov	r0, r3
 8005578:	1d3b      	adds	r3, r7, #4
 800557a:	69fa      	ldr	r2, [r7, #28]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	461a      	mov	r2, r3
 8005580:	1d3b      	adds	r3, r7, #4
 8005582:	4619      	mov	r1, r3
 8005584:	f7fa fe5c 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005588:	4603      	mov	r3, r0
 800558a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d009      	beq.n	80055a6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005592:	4a0a      	ldr	r2, [pc, #40]	@ (80055bc <_TrySendOverflowPacket+0xdc>)
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005598:	4b08      	ldr	r3, [pc, #32]	@ (80055bc <_TrySendOverflowPacket+0xdc>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	3b01      	subs	r3, #1
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	4b06      	ldr	r3, [pc, #24]	@ (80055bc <_TrySendOverflowPacket+0xdc>)
 80055a2:	701a      	strb	r2, [r3, #0]
 80055a4:	e004      	b.n	80055b0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80055a6:	4b05      	ldr	r3, [pc, #20]	@ (80055bc <_TrySendOverflowPacket+0xdc>)
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	3301      	adds	r3, #1
 80055ac:	4a03      	ldr	r2, [pc, #12]	@ (80055bc <_TrySendOverflowPacket+0xdc>)
 80055ae:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80055b0:	693b      	ldr	r3, [r7, #16]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3730      	adds	r7, #48	@ 0x30
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	2000cfe4 	.word	0x2000cfe4
 80055c0:	e0001004 	.word	0xe0001004

080055c4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b08a      	sub	sp, #40	@ 0x28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80055d0:	4b98      	ldr	r3, [pc, #608]	@ (8005834 <_SendPacket+0x270>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d010      	beq.n	80055fa <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80055d8:	4b96      	ldr	r3, [pc, #600]	@ (8005834 <_SendPacket+0x270>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 812d 	beq.w	800583c <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80055e2:	4b94      	ldr	r3, [pc, #592]	@ (8005834 <_SendPacket+0x270>)
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d109      	bne.n	80055fe <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80055ea:	f7ff ff79 	bl	80054e0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80055ee:	4b91      	ldr	r3, [pc, #580]	@ (8005834 <_SendPacket+0x270>)
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	f040 8124 	bne.w	8005840 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80055f8:	e001      	b.n	80055fe <_SendPacket+0x3a>
    goto Send;
 80055fa:	bf00      	nop
 80055fc:	e000      	b.n	8005600 <_SendPacket+0x3c>
Send:
 80055fe:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b1f      	cmp	r3, #31
 8005604:	d809      	bhi.n	800561a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005606:	4b8b      	ldr	r3, [pc, #556]	@ (8005834 <_SendPacket+0x270>)
 8005608:	69da      	ldr	r2, [r3, #28]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	fa22 f303 	lsr.w	r3, r2, r3
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b00      	cmp	r3, #0
 8005616:	f040 8115 	bne.w	8005844 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b17      	cmp	r3, #23
 800561e:	d807      	bhi.n	8005630 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	3b01      	subs	r3, #1
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	b2da      	uxtb	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	701a      	strb	r2, [r3, #0]
 800562e:	e0c4      	b.n	80057ba <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	2b7f      	cmp	r3, #127	@ 0x7f
 800563c:	d912      	bls.n	8005664 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	09da      	lsrs	r2, r3, #7
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	3b01      	subs	r3, #1
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	b2d2      	uxtb	r2, r2
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	b2db      	uxtb	r3, r3
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	3a01      	subs	r2, #1
 8005656:	60fa      	str	r2, [r7, #12]
 8005658:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800565c:	b2da      	uxtb	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	701a      	strb	r2, [r3, #0]
 8005662:	e006      	b.n	8005672 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	3b01      	subs	r3, #1
 8005668:	60fb      	str	r3, [r7, #12]
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	b2da      	uxtb	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b7e      	cmp	r3, #126	@ 0x7e
 8005676:	d807      	bhi.n	8005688 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	3b01      	subs	r3, #1
 800567c:	60fb      	str	r3, [r7, #12]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	b2da      	uxtb	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	701a      	strb	r2, [r3, #0]
 8005686:	e098      	b.n	80057ba <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800568e:	d212      	bcs.n	80056b6 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	09da      	lsrs	r2, r3, #7
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	3b01      	subs	r3, #1
 8005698:	60fb      	str	r3, [r7, #12]
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	3a01      	subs	r2, #1
 80056a8:	60fa      	str	r2, [r7, #12]
 80056aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80056ae:	b2da      	uxtb	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	701a      	strb	r2, [r3, #0]
 80056b4:	e081      	b.n	80057ba <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056bc:	d21d      	bcs.n	80056fa <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	0b9a      	lsrs	r2, r3, #14
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	3b01      	subs	r3, #1
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	b2d2      	uxtb	r2, r2
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	09db      	lsrs	r3, r3, #7
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	3a01      	subs	r2, #1
 80056d8:	60fa      	str	r2, [r7, #12]
 80056da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	3a01      	subs	r2, #1
 80056ec:	60fa      	str	r2, [r7, #12]
 80056ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	701a      	strb	r2, [r3, #0]
 80056f8:	e05f      	b.n	80057ba <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005700:	d228      	bcs.n	8005754 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	0d5a      	lsrs	r2, r3, #21
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3b01      	subs	r3, #1
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	b2d2      	uxtb	r2, r2
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	0b9b      	lsrs	r3, r3, #14
 8005716:	b2db      	uxtb	r3, r3
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	3a01      	subs	r2, #1
 800571c:	60fa      	str	r2, [r7, #12]
 800571e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005722:	b2da      	uxtb	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	09db      	lsrs	r3, r3, #7
 800572c:	b2db      	uxtb	r3, r3
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	3a01      	subs	r2, #1
 8005732:	60fa      	str	r2, [r7, #12]
 8005734:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005738:	b2da      	uxtb	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	b2db      	uxtb	r3, r3
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	3a01      	subs	r2, #1
 8005746:	60fa      	str	r2, [r7, #12]
 8005748:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800574c:	b2da      	uxtb	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	701a      	strb	r2, [r3, #0]
 8005752:	e032      	b.n	80057ba <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	0f1a      	lsrs	r2, r3, #28
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	3b01      	subs	r3, #1
 800575c:	60fb      	str	r3, [r7, #12]
 800575e:	b2d2      	uxtb	r2, r2
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	0d5b      	lsrs	r3, r3, #21
 8005768:	b2db      	uxtb	r3, r3
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	3a01      	subs	r2, #1
 800576e:	60fa      	str	r2, [r7, #12]
 8005770:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005774:	b2da      	uxtb	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	0b9b      	lsrs	r3, r3, #14
 800577e:	b2db      	uxtb	r3, r3
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	3a01      	subs	r2, #1
 8005784:	60fa      	str	r2, [r7, #12]
 8005786:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800578a:	b2da      	uxtb	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	09db      	lsrs	r3, r3, #7
 8005794:	b2db      	uxtb	r3, r3
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	3a01      	subs	r2, #1
 800579a:	60fa      	str	r2, [r7, #12]
 800579c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	3a01      	subs	r2, #1
 80057ae:	60fa      	str	r2, [r7, #12]
 80057b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80057ba:	4b1f      	ldr	r3, [pc, #124]	@ (8005838 <_SendPacket+0x274>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80057c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005834 <_SendPacket+0x270>)
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	623b      	str	r3, [r7, #32]
 80057d2:	e00b      	b.n	80057ec <_SendPacket+0x228>
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057da:	1c59      	adds	r1, r3, #1
 80057dc:	6279      	str	r1, [r7, #36]	@ 0x24
 80057de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	701a      	strb	r2, [r3, #0]
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	09db      	lsrs	r3, r3, #7
 80057ea:	623b      	str	r3, [r7, #32]
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80057f0:	d8f0      	bhi.n	80057d4 <_SendPacket+0x210>
 80057f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f4:	1c5a      	adds	r2, r3, #1
 80057f6:	627a      	str	r2, [r7, #36]	@ 0x24
 80057f8:	6a3a      	ldr	r2, [r7, #32]
 80057fa:	b2d2      	uxtb	r2, r2
 80057fc:	701a      	strb	r2, [r3, #0]
 80057fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005800:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005802:	4b0c      	ldr	r3, [pc, #48]	@ (8005834 <_SendPacket+0x270>)
 8005804:	785b      	ldrb	r3, [r3, #1]
 8005806:	4618      	mov	r0, r3
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	461a      	mov	r2, r3
 8005810:	68f9      	ldr	r1, [r7, #12]
 8005812:	f7fa fd15 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005816:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800581e:	4a05      	ldr	r2, [pc, #20]	@ (8005834 <_SendPacket+0x270>)
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	60d3      	str	r3, [r2, #12]
 8005824:	e00f      	b.n	8005846 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005826:	4b03      	ldr	r3, [pc, #12]	@ (8005834 <_SendPacket+0x270>)
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	3301      	adds	r3, #1
 800582c:	b2da      	uxtb	r2, r3
 800582e:	4b01      	ldr	r3, [pc, #4]	@ (8005834 <_SendPacket+0x270>)
 8005830:	701a      	strb	r2, [r3, #0]
 8005832:	e008      	b.n	8005846 <_SendPacket+0x282>
 8005834:	2000cfe4 	.word	0x2000cfe4
 8005838:	e0001004 	.word	0xe0001004
    goto SendDone;
 800583c:	bf00      	nop
 800583e:	e002      	b.n	8005846 <_SendPacket+0x282>
      goto SendDone;
 8005840:	bf00      	nop
 8005842:	e000      	b.n	8005846 <_SendPacket+0x282>
      goto SendDone;
 8005844:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005846:	4b14      	ldr	r3, [pc, #80]	@ (8005898 <_SendPacket+0x2d4>)
 8005848:	7e1b      	ldrb	r3, [r3, #24]
 800584a:	4619      	mov	r1, r3
 800584c:	4a13      	ldr	r2, [pc, #76]	@ (800589c <_SendPacket+0x2d8>)
 800584e:	460b      	mov	r3, r1
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	440b      	add	r3, r1
 8005854:	00db      	lsls	r3, r3, #3
 8005856:	4413      	add	r3, r2
 8005858:	336c      	adds	r3, #108	@ 0x6c
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	4b0e      	ldr	r3, [pc, #56]	@ (8005898 <_SendPacket+0x2d4>)
 800585e:	7e1b      	ldrb	r3, [r3, #24]
 8005860:	4618      	mov	r0, r3
 8005862:	490e      	ldr	r1, [pc, #56]	@ (800589c <_SendPacket+0x2d8>)
 8005864:	4603      	mov	r3, r0
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	4403      	add	r3, r0
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	440b      	add	r3, r1
 800586e:	3370      	adds	r3, #112	@ 0x70
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	429a      	cmp	r2, r3
 8005874:	d00b      	beq.n	800588e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005876:	4b08      	ldr	r3, [pc, #32]	@ (8005898 <_SendPacket+0x2d4>)
 8005878:	789b      	ldrb	r3, [r3, #2]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d107      	bne.n	800588e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800587e:	4b06      	ldr	r3, [pc, #24]	@ (8005898 <_SendPacket+0x2d4>)
 8005880:	2201      	movs	r2, #1
 8005882:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005884:	f7ff fdbe 	bl	8005404 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005888:	4b03      	ldr	r3, [pc, #12]	@ (8005898 <_SendPacket+0x2d4>)
 800588a:	2200      	movs	r2, #0
 800588c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800588e:	bf00      	nop
 8005890:	3728      	adds	r7, #40	@ 0x28
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	2000cfe4 	.word	0x2000cfe4
 800589c:	2000bb24 	.word	0x2000bb24

080058a0 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b08a      	sub	sp, #40	@ 0x28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	460b      	mov	r3, r1
 80058aa:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	3301      	adds	r3, #1
 80058b6:	2b80      	cmp	r3, #128	@ 0x80
 80058b8:	d80a      	bhi.n	80058d0 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	1c59      	adds	r1, r3, #1
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	6051      	str	r1, [r2, #4]
 80058c4:	78fa      	ldrb	r2, [r7, #3]
 80058c6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	2b80      	cmp	r3, #128	@ 0x80
 80058d6:	d15a      	bne.n	800598e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	691a      	ldr	r2, [r3, #16]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	623b      	str	r3, [r7, #32]
 80058f8:	e00b      	b.n	8005912 <_StoreChar+0x72>
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005900:	1c59      	adds	r1, r3, #1
 8005902:	6279      	str	r1, [r7, #36]	@ 0x24
 8005904:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005908:	b2d2      	uxtb	r2, r2
 800590a:	701a      	strb	r2, [r3, #0]
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	09db      	lsrs	r3, r3, #7
 8005910:	623b      	str	r3, [r7, #32]
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	2b7f      	cmp	r3, #127	@ 0x7f
 8005916:	d8f0      	bhi.n	80058fa <_StoreChar+0x5a>
 8005918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591a:	1c5a      	adds	r2, r3, #1
 800591c:	627a      	str	r2, [r7, #36]	@ 0x24
 800591e:	6a3a      	ldr	r2, [r7, #32]
 8005920:	b2d2      	uxtb	r2, r2
 8005922:	701a      	strb	r2, [r3, #0]
 8005924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005926:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	61fb      	str	r3, [r7, #28]
 800592c:	2300      	movs	r3, #0
 800592e:	61bb      	str	r3, [r7, #24]
 8005930:	e00b      	b.n	800594a <_StoreChar+0xaa>
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	b2da      	uxtb	r2, r3
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	1c59      	adds	r1, r3, #1
 800593a:	61f9      	str	r1, [r7, #28]
 800593c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005940:	b2d2      	uxtb	r2, r2
 8005942:	701a      	strb	r2, [r3, #0]
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	09db      	lsrs	r3, r3, #7
 8005948:	61bb      	str	r3, [r7, #24]
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	2b7f      	cmp	r3, #127	@ 0x7f
 800594e:	d8f0      	bhi.n	8005932 <_StoreChar+0x92>
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	1c5a      	adds	r2, r3, #1
 8005954:	61fa      	str	r2, [r7, #28]
 8005956:	69ba      	ldr	r2, [r7, #24]
 8005958:	b2d2      	uxtb	r2, r2
 800595a:	701a      	strb	r2, [r3, #0]
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	221a      	movs	r2, #26
 8005966:	6939      	ldr	r1, [r7, #16]
 8005968:	4618      	mov	r0, r3
 800596a:	f7ff fe2b 	bl	80055c4 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4618      	mov	r0, r3
 8005974:	f7ff fd3a 	bl	80053ec <_PreparePacket>
 8005978:	4602      	mov	r2, r0
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	1c5a      	adds	r2, r3, #1
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	611a      	str	r2, [r3, #16]
  }
}
 800598e:	bf00      	nop
 8005990:	3728      	adds	r7, #40	@ 0x28
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
	...

08005998 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005998:	b580      	push	{r7, lr}
 800599a:	b08a      	sub	sp, #40	@ 0x28
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
 80059a4:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80059aa:	2301      	movs	r3, #1
 80059ac:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80059ae:	2301      	movs	r3, #1
 80059b0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80059b2:	e007      	b.n	80059c4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80059b4:	6a3a      	ldr	r2, [r7, #32]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059bc:	623b      	str	r3, [r7, #32]
    Width++;
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	3301      	adds	r3, #1
 80059c2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80059c4:	6a3a      	ldr	r2, [r7, #32]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d2f3      	bcs.n	80059b4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d901      	bls.n	80059d8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80059d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d000      	beq.n	80059e4 <_PrintUnsigned+0x4c>
 80059e2:	e01f      	b.n	8005a24 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 80059e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d01c      	beq.n	8005a24 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80059ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d005      	beq.n	8005a00 <_PrintUnsigned+0x68>
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d102      	bne.n	8005a00 <_PrintUnsigned+0x68>
        c = '0';
 80059fa:	2330      	movs	r3, #48	@ 0x30
 80059fc:	76fb      	strb	r3, [r7, #27]
 80059fe:	e001      	b.n	8005a04 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8005a00:	2320      	movs	r3, #32
 8005a02:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a04:	e007      	b.n	8005a16 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8005a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8005a0c:	7efb      	ldrb	r3, [r7, #27]
 8005a0e:	4619      	mov	r1, r3
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f7ff ff45 	bl	80058a0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <_PrintUnsigned+0x8c>
 8005a1c:	69fa      	ldr	r2, [r7, #28]
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d3f0      	bcc.n	8005a06 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d903      	bls.n	8005a32 <_PrintUnsigned+0x9a>
      NumDigits--;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	603b      	str	r3, [r7, #0]
 8005a30:	e009      	b.n	8005a46 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3a:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d200      	bcs.n	8005a46 <_PrintUnsigned+0xae>
        break;
 8005a44:	e005      	b.n	8005a52 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8005a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	fb02 f303 	mul.w	r3, r2, r3
 8005a4e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005a50:	e7e8      	b.n	8005a24 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5a:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a60:	fb02 f303 	mul.w	r3, r2, r3
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005a6a:	4a15      	ldr	r2, [pc, #84]	@ (8005ac0 <_PrintUnsigned+0x128>)
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	4413      	add	r3, r2
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	4619      	mov	r1, r3
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f7ff ff13 	bl	80058a0 <_StoreChar>
    Digit /= Base;
 8005a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a82:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8005a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1e3      	bne.n	8005a52 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d011      	beq.n	8005ab8 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8005a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00e      	beq.n	8005ab8 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a9a:	e006      	b.n	8005aaa <_PrintUnsigned+0x112>
        FieldWidth--;
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8005aa2:	2120      	movs	r1, #32
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f7ff fefb 	bl	80058a0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d003      	beq.n	8005ab8 <_PrintUnsigned+0x120>
 8005ab0:	69fa      	ldr	r2, [r7, #28]
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d3f1      	bcc.n	8005a9c <_PrintUnsigned+0x104>
      }
    }
  }
}
 8005ab8:	bf00      	nop
 8005aba:	3728      	adds	r7, #40	@ 0x28
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	08007f28 	.word	0x08007f28

08005ac4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b088      	sub	sp, #32
 8005ac8:	af02      	add	r7, sp, #8
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
 8005ad0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	bfb8      	it	lt
 8005ad8:	425b      	neglt	r3, r3
 8005ada:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005adc:	2301      	movs	r3, #1
 8005ade:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005ae0:	e007      	b.n	8005af2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	fb92 f3f3 	sdiv	r3, r2, r3
 8005aea:	613b      	str	r3, [r7, #16]
    Width++;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	3301      	adds	r3, #1
 8005af0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	daf3      	bge.n	8005ae2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d901      	bls.n	8005b06 <_PrintInt+0x42>
    Width = NumDigits;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00a      	beq.n	8005b22 <_PrintInt+0x5e>
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	db04      	blt.n	8005b1c <_PrintInt+0x58>
 8005b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <_PrintInt+0x5e>
    FieldWidth--;
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d002      	beq.n	8005b32 <_PrintInt+0x6e>
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d016      	beq.n	8005b60 <_PrintInt+0x9c>
 8005b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d111      	bne.n	8005b60 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00e      	beq.n	8005b60 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b42:	e006      	b.n	8005b52 <_PrintInt+0x8e>
        FieldWidth--;
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	3b01      	subs	r3, #1
 8005b48:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005b4a:	2120      	movs	r1, #32
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f7ff fea7 	bl	80058a0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b52:	6a3b      	ldr	r3, [r7, #32]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <_PrintInt+0x9c>
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d3f1      	bcc.n	8005b44 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	da07      	bge.n	8005b76 <_PrintInt+0xb2>
    v = -v;
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	425b      	negs	r3, r3
 8005b6a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005b6c:	212d      	movs	r1, #45	@ 0x2d
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f7ff fe96 	bl	80058a0 <_StoreChar>
 8005b74:	e008      	b.n	8005b88 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005b80:	212b      	movs	r1, #43	@ 0x2b
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f7ff fe8c 	bl	80058a0 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d019      	beq.n	8005bc6 <_PrintInt+0x102>
 8005b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d114      	bne.n	8005bc6 <_PrintInt+0x102>
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d111      	bne.n	8005bc6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00e      	beq.n	8005bc6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ba8:	e006      	b.n	8005bb8 <_PrintInt+0xf4>
        FieldWidth--;
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	3b01      	subs	r3, #1
 8005bae:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005bb0:	2130      	movs	r1, #48	@ 0x30
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f7ff fe74 	bl	80058a0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <_PrintInt+0x102>
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d3f1      	bcc.n	8005baa <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005bc6:	68b9      	ldr	r1, [r7, #8]
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bca:	9301      	str	r3, [sp, #4]
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f7ff fedf 	bl	8005998 <_PrintUnsigned>
}
 8005bda:	bf00      	nop
 8005bdc:	3718      	adds	r7, #24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b098      	sub	sp, #96	@ 0x60
 8005be8:	af02      	add	r7, sp, #8
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005bf0:	f3ef 8311 	mrs	r3, BASEPRI
 8005bf4:	f04f 0120 	mov.w	r1, #32
 8005bf8:	f381 8811 	msr	BASEPRI, r1
 8005bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bfe:	48b7      	ldr	r0, [pc, #732]	@ (8005edc <_VPrintTarget+0x2f8>)
 8005c00:	f7ff fbf4 	bl	80053ec <_PreparePacket>
 8005c04:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005c06:	4bb5      	ldr	r3, [pc, #724]	@ (8005edc <_VPrintTarget+0x2f8>)
 8005c08:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c10:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	3301      	adds	r3, #1
 8005c16:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	3301      	adds	r3, #1
 8005c28:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005c2a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f000 81a8 	beq.w	8005f84 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8005c34:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c38:	2b25      	cmp	r3, #37	@ 0x25
 8005c3a:	f040 8195 	bne.w	8005f68 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8005c42:	2301      	movs	r3, #1
 8005c44:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8005c4e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c52:	3b23      	subs	r3, #35	@ 0x23
 8005c54:	2b0d      	cmp	r3, #13
 8005c56:	d83f      	bhi.n	8005cd8 <_VPrintTarget+0xf4>
 8005c58:	a201      	add	r2, pc, #4	@ (adr r2, 8005c60 <_VPrintTarget+0x7c>)
 8005c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5e:	bf00      	nop
 8005c60:	08005cc9 	.word	0x08005cc9
 8005c64:	08005cd9 	.word	0x08005cd9
 8005c68:	08005cd9 	.word	0x08005cd9
 8005c6c:	08005cd9 	.word	0x08005cd9
 8005c70:	08005cd9 	.word	0x08005cd9
 8005c74:	08005cd9 	.word	0x08005cd9
 8005c78:	08005cd9 	.word	0x08005cd9
 8005c7c:	08005cd9 	.word	0x08005cd9
 8005c80:	08005cb9 	.word	0x08005cb9
 8005c84:	08005cd9 	.word	0x08005cd9
 8005c88:	08005c99 	.word	0x08005c99
 8005c8c:	08005cd9 	.word	0x08005cd9
 8005c90:	08005cd9 	.word	0x08005cd9
 8005c94:	08005ca9 	.word	0x08005ca9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005c98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c9a:	f043 0301 	orr.w	r3, r3, #1
 8005c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	60fb      	str	r3, [r7, #12]
 8005ca6:	e01a      	b.n	8005cde <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005ca8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005caa:	f043 0302 	orr.w	r3, r3, #2
 8005cae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	60fb      	str	r3, [r7, #12]
 8005cb6:	e012      	b.n	8005cde <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005cb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cba:	f043 0304 	orr.w	r3, r3, #4
 8005cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	60fb      	str	r3, [r7, #12]
 8005cc6:	e00a      	b.n	8005cde <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005cc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cca:	f043 0308 	orr.w	r3, r3, #8
 8005cce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	60fb      	str	r3, [r7, #12]
 8005cd6:	e002      	b.n	8005cde <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cdc:	bf00      	nop
        }
      } while (v);
 8005cde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1b0      	bne.n	8005c46 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8005cf0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005cf4:	2b2f      	cmp	r3, #47	@ 0x2f
 8005cf6:	d912      	bls.n	8005d1e <_VPrintTarget+0x13a>
 8005cf8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005cfc:	2b39      	cmp	r3, #57	@ 0x39
 8005cfe:	d80e      	bhi.n	8005d1e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	3301      	adds	r3, #1
 8005d04:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005d06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d08:	4613      	mov	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	461a      	mov	r2, r3
 8005d12:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d16:	4413      	add	r3, r2
 8005d18:	3b30      	subs	r3, #48	@ 0x30
 8005d1a:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8005d1c:	e7e4      	b.n	8005ce8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8005d2a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d30:	d11d      	bne.n	8005d6e <_VPrintTarget+0x18a>
        sFormat++;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	3301      	adds	r3, #1
 8005d36:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8005d40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d44:	2b2f      	cmp	r3, #47	@ 0x2f
 8005d46:	d912      	bls.n	8005d6e <_VPrintTarget+0x18a>
 8005d48:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d4c:	2b39      	cmp	r3, #57	@ 0x39
 8005d4e:	d80e      	bhi.n	8005d6e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	3301      	adds	r3, #1
 8005d54:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005d56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d58:	4613      	mov	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4413      	add	r3, r2
 8005d5e:	005b      	lsls	r3, r3, #1
 8005d60:	461a      	mov	r2, r3
 8005d62:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d66:	4413      	add	r3, r2
 8005d68:	3b30      	subs	r3, #48	@ 0x30
 8005d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8005d6c:	e7e4      	b.n	8005d38 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005d76:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d7a:	2b6c      	cmp	r3, #108	@ 0x6c
 8005d7c:	d003      	beq.n	8005d86 <_VPrintTarget+0x1a2>
 8005d7e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d82:	2b68      	cmp	r3, #104	@ 0x68
 8005d84:	d107      	bne.n	8005d96 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	3301      	adds	r3, #1
 8005d92:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005d94:	e7ef      	b.n	8005d76 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005d96:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d9a:	2b25      	cmp	r3, #37	@ 0x25
 8005d9c:	f000 80d8 	beq.w	8005f50 <_VPrintTarget+0x36c>
 8005da0:	2b25      	cmp	r3, #37	@ 0x25
 8005da2:	f2c0 80dc 	blt.w	8005f5e <_VPrintTarget+0x37a>
 8005da6:	2b78      	cmp	r3, #120	@ 0x78
 8005da8:	f300 80d9 	bgt.w	8005f5e <_VPrintTarget+0x37a>
 8005dac:	2b58      	cmp	r3, #88	@ 0x58
 8005dae:	f2c0 80d6 	blt.w	8005f5e <_VPrintTarget+0x37a>
 8005db2:	3b58      	subs	r3, #88	@ 0x58
 8005db4:	2b20      	cmp	r3, #32
 8005db6:	f200 80d2 	bhi.w	8005f5e <_VPrintTarget+0x37a>
 8005dba:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc0 <_VPrintTarget+0x1dc>)
 8005dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc0:	08005eb7 	.word	0x08005eb7
 8005dc4:	08005f5f 	.word	0x08005f5f
 8005dc8:	08005f5f 	.word	0x08005f5f
 8005dcc:	08005f5f 	.word	0x08005f5f
 8005dd0:	08005f5f 	.word	0x08005f5f
 8005dd4:	08005f5f 	.word	0x08005f5f
 8005dd8:	08005f5f 	.word	0x08005f5f
 8005ddc:	08005f5f 	.word	0x08005f5f
 8005de0:	08005f5f 	.word	0x08005f5f
 8005de4:	08005f5f 	.word	0x08005f5f
 8005de8:	08005f5f 	.word	0x08005f5f
 8005dec:	08005e45 	.word	0x08005e45
 8005df0:	08005e6b 	.word	0x08005e6b
 8005df4:	08005f5f 	.word	0x08005f5f
 8005df8:	08005f5f 	.word	0x08005f5f
 8005dfc:	08005f5f 	.word	0x08005f5f
 8005e00:	08005f5f 	.word	0x08005f5f
 8005e04:	08005f5f 	.word	0x08005f5f
 8005e08:	08005f5f 	.word	0x08005f5f
 8005e0c:	08005f5f 	.word	0x08005f5f
 8005e10:	08005f5f 	.word	0x08005f5f
 8005e14:	08005f5f 	.word	0x08005f5f
 8005e18:	08005f5f 	.word	0x08005f5f
 8005e1c:	08005f5f 	.word	0x08005f5f
 8005e20:	08005f2b 	.word	0x08005f2b
 8005e24:	08005f5f 	.word	0x08005f5f
 8005e28:	08005f5f 	.word	0x08005f5f
 8005e2c:	08005ee1 	.word	0x08005ee1
 8005e30:	08005f5f 	.word	0x08005f5f
 8005e34:	08005e91 	.word	0x08005e91
 8005e38:	08005f5f 	.word	0x08005f5f
 8005e3c:	08005f5f 	.word	0x08005f5f
 8005e40:	08005eb7 	.word	0x08005eb7
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	1d19      	adds	r1, r3, #4
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	6011      	str	r1, [r2, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8005e52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8005e58:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005e5c:	f107 0310 	add.w	r3, r7, #16
 8005e60:	4611      	mov	r1, r2
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7ff fd1c 	bl	80058a0 <_StoreChar>
        break;
 8005e68:	e07a      	b.n	8005f60 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	1d19      	adds	r1, r3, #4
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6011      	str	r1, [r2, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005e78:	f107 0010 	add.w	r0, r7, #16
 8005e7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e7e:	9301      	str	r3, [sp, #4]
 8005e80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e86:	220a      	movs	r2, #10
 8005e88:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e8a:	f7ff fe1b 	bl	8005ac4 <_PrintInt>
        break;
 8005e8e:	e067      	b.n	8005f60 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	1d19      	adds	r1, r3, #4
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	6011      	str	r1, [r2, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005e9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005ea0:	f107 0010 	add.w	r0, r7, #16
 8005ea4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ea6:	9301      	str	r3, [sp, #4]
 8005ea8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005eae:	220a      	movs	r2, #10
 8005eb0:	f7ff fd72 	bl	8005998 <_PrintUnsigned>
        break;
 8005eb4:	e054      	b.n	8005f60 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	1d19      	adds	r1, r3, #4
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	6011      	str	r1, [r2, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005ec4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005ec6:	f107 0010 	add.w	r0, r7, #16
 8005eca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ecc:	9301      	str	r3, [sp, #4]
 8005ece:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ed4:	2210      	movs	r2, #16
 8005ed6:	f7ff fd5f 	bl	8005998 <_PrintUnsigned>
        break;
 8005eda:	e041      	b.n	8005f60 <_VPrintTarget+0x37c>
 8005edc:	2000d014 	.word	0x2000d014
      case 's':
        s = va_arg(*pParamList, const char*);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	1d19      	adds	r1, r3, #4
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	6011      	str	r1, [r2, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 8005eee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <_VPrintTarget+0x314>
          s = "(null)";
 8005ef4:	4b4a      	ldr	r3, [pc, #296]	@ (8006020 <_VPrintTarget+0x43c>)
 8005ef6:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8005ef8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8005f00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f02:	3301      	adds	r3, #1
 8005f04:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 8005f06:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00b      	beq.n	8005f26 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8005f0e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005f12:	f107 0310 	add.w	r3, r7, #16
 8005f16:	4611      	mov	r1, r2
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7ff fcc1 	bl	80058a0 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005f1e:	6a3b      	ldr	r3, [r7, #32]
 8005f20:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f22:	d9e9      	bls.n	8005ef8 <_VPrintTarget+0x314>
        break;
 8005f24:	e01c      	b.n	8005f60 <_VPrintTarget+0x37c>
            break;
 8005f26:	bf00      	nop
        break;
 8005f28:	e01a      	b.n	8005f60 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	1d19      	adds	r1, r3, #4
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	6011      	str	r1, [r2, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005f38:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005f3a:	f107 0010 	add.w	r0, r7, #16
 8005f3e:	2300      	movs	r3, #0
 8005f40:	9301      	str	r3, [sp, #4]
 8005f42:	2308      	movs	r3, #8
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	2308      	movs	r3, #8
 8005f48:	2210      	movs	r2, #16
 8005f4a:	f7ff fd25 	bl	8005998 <_PrintUnsigned>
        break;
 8005f4e:	e007      	b.n	8005f60 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005f50:	f107 0310 	add.w	r3, r7, #16
 8005f54:	2125      	movs	r1, #37	@ 0x25
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7ff fca2 	bl	80058a0 <_StoreChar>
        break;
 8005f5c:	e000      	b.n	8005f60 <_VPrintTarget+0x37c>
      default:
        break;
 8005f5e:	bf00      	nop
      }
      sFormat++;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	3301      	adds	r3, #1
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	e007      	b.n	8005f78 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8005f68:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005f6c:	f107 0310 	add.w	r3, r7, #16
 8005f70:	4611      	mov	r1, r2
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7ff fc94 	bl	80058a0 <_StoreChar>
    }
  } while (*sFormat);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f47f ae4d 	bne.w	8005c1c <_VPrintTarget+0x38>
 8005f82:	e000      	b.n	8005f86 <_VPrintTarget+0x3a2>
      break;
 8005f84:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d041      	beq.n	8006010 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005f8c:	6a3a      	ldr	r2, [r7, #32]
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	b2d2      	uxtb	r2, r2
 8005f92:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f9c:	e00b      	b.n	8005fb6 <_VPrintTarget+0x3d2>
 8005f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fa4:	1c59      	adds	r1, r3, #1
 8005fa6:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005fa8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005fac:	b2d2      	uxtb	r2, r2
 8005fae:	701a      	strb	r2, [r3, #0]
 8005fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb2:	09db      	lsrs	r3, r3, #7
 8005fb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fba:	d8f0      	bhi.n	8005f9e <_VPrintTarget+0x3ba>
 8005fbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fbe:	1c5a      	adds	r2, r3, #1
 8005fc0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005fc2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005fc4:	b2d2      	uxtb	r2, r2
 8005fc6:	701a      	strb	r2, [r3, #0]
 8005fc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fca:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fd4:	e00b      	b.n	8005fee <_VPrintTarget+0x40a>
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fdc:	1c59      	adds	r1, r3, #1
 8005fde:	6379      	str	r1, [r7, #52]	@ 0x34
 8005fe0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005fe4:	b2d2      	uxtb	r2, r2
 8005fe6:	701a      	strb	r2, [r3, #0]
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fea:	09db      	lsrs	r3, r3, #7
 8005fec:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff0:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ff2:	d8f0      	bhi.n	8005fd6 <_VPrintTarget+0x3f2>
 8005ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	637a      	str	r2, [r7, #52]	@ 0x34
 8005ffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ffc:	b2d2      	uxtb	r2, r2
 8005ffe:	701a      	strb	r2, [r3, #0]
 8006000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006002:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	6979      	ldr	r1, [r7, #20]
 8006008:	221a      	movs	r2, #26
 800600a:	4618      	mov	r0, r3
 800600c:	f7ff fada 	bl	80055c4 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006012:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006016:	bf00      	nop
 8006018:	3758      	adds	r7, #88	@ 0x58
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	08007ed8 	.word	0x08007ed8

08006024 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af02      	add	r7, sp, #8
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
 8006030:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006032:	2300      	movs	r3, #0
 8006034:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006038:	4917      	ldr	r1, [pc, #92]	@ (8006098 <SEGGER_SYSVIEW_Init+0x74>)
 800603a:	4818      	ldr	r0, [pc, #96]	@ (800609c <SEGGER_SYSVIEW_Init+0x78>)
 800603c:	f7ff f8d6 	bl	80051ec <SEGGER_RTT_AllocUpBuffer>
 8006040:	4603      	mov	r3, r0
 8006042:	b2da      	uxtb	r2, r3
 8006044:	4b16      	ldr	r3, [pc, #88]	@ (80060a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006046:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006048:	4b15      	ldr	r3, [pc, #84]	@ (80060a0 <SEGGER_SYSVIEW_Init+0x7c>)
 800604a:	785a      	ldrb	r2, [r3, #1]
 800604c:	4b14      	ldr	r3, [pc, #80]	@ (80060a0 <SEGGER_SYSVIEW_Init+0x7c>)
 800604e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006050:	4b13      	ldr	r3, [pc, #76]	@ (80060a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006052:	7e1b      	ldrb	r3, [r3, #24]
 8006054:	4618      	mov	r0, r3
 8006056:	2300      	movs	r3, #0
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	2308      	movs	r3, #8
 800605c:	4a11      	ldr	r2, [pc, #68]	@ (80060a4 <SEGGER_SYSVIEW_Init+0x80>)
 800605e:	490f      	ldr	r1, [pc, #60]	@ (800609c <SEGGER_SYSVIEW_Init+0x78>)
 8006060:	f7ff f948 	bl	80052f4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006064:	4b0e      	ldr	r3, [pc, #56]	@ (80060a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006066:	2200      	movs	r2, #0
 8006068:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800606a:	4b0f      	ldr	r3, [pc, #60]	@ (80060a8 <SEGGER_SYSVIEW_Init+0x84>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a0c      	ldr	r2, [pc, #48]	@ (80060a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006070:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006072:	4a0b      	ldr	r2, [pc, #44]	@ (80060a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006078:	4a09      	ldr	r2, [pc, #36]	@ (80060a0 <SEGGER_SYSVIEW_Init+0x7c>)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800607e:	4a08      	ldr	r2, [pc, #32]	@ (80060a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006084:	4a06      	ldr	r2, [pc, #24]	@ (80060a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800608a:	4b05      	ldr	r3, [pc, #20]	@ (80060a0 <SEGGER_SYSVIEW_Init+0x7c>)
 800608c:	2200      	movs	r2, #0
 800608e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006090:	bf00      	nop
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	2000bfdc 	.word	0x2000bfdc
 800609c:	08007ee0 	.word	0x08007ee0
 80060a0:	2000cfe4 	.word	0x2000cfe4
 80060a4:	2000cfdc 	.word	0x2000cfdc
 80060a8:	e0001004 	.word	0xe0001004

080060ac <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80060b4:	4a04      	ldr	r2, [pc, #16]	@ (80060c8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6113      	str	r3, [r2, #16]
}
 80060ba:	bf00      	nop
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	2000cfe4 	.word	0x2000cfe4

080060cc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80060d4:	f3ef 8311 	mrs	r3, BASEPRI
 80060d8:	f04f 0120 	mov.w	r1, #32
 80060dc:	f381 8811 	msr	BASEPRI, r1
 80060e0:	60fb      	str	r3, [r7, #12]
 80060e2:	4808      	ldr	r0, [pc, #32]	@ (8006104 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80060e4:	f7ff f982 	bl	80053ec <_PreparePacket>
 80060e8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	68b9      	ldr	r1, [r7, #8]
 80060ee:	68b8      	ldr	r0, [r7, #8]
 80060f0:	f7ff fa68 	bl	80055c4 <_SendPacket>
  RECORD_END();
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f383 8811 	msr	BASEPRI, r3
}
 80060fa:	bf00      	nop
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	2000d014 	.word	0x2000d014

08006108 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006108:	b580      	push	{r7, lr}
 800610a:	b088      	sub	sp, #32
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006112:	f3ef 8311 	mrs	r3, BASEPRI
 8006116:	f04f 0120 	mov.w	r1, #32
 800611a:	f381 8811 	msr	BASEPRI, r1
 800611e:	617b      	str	r3, [r7, #20]
 8006120:	4816      	ldr	r0, [pc, #88]	@ (800617c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006122:	f7ff f963 	bl	80053ec <_PreparePacket>
 8006126:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	61fb      	str	r3, [r7, #28]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	61bb      	str	r3, [r7, #24]
 8006134:	e00b      	b.n	800614e <SEGGER_SYSVIEW_RecordU32+0x46>
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	b2da      	uxtb	r2, r3
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	1c59      	adds	r1, r3, #1
 800613e:	61f9      	str	r1, [r7, #28]
 8006140:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006144:	b2d2      	uxtb	r2, r2
 8006146:	701a      	strb	r2, [r3, #0]
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	09db      	lsrs	r3, r3, #7
 800614c:	61bb      	str	r3, [r7, #24]
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	2b7f      	cmp	r3, #127	@ 0x7f
 8006152:	d8f0      	bhi.n	8006136 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	61fa      	str	r2, [r7, #28]
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	b2d2      	uxtb	r2, r2
 800615e:	701a      	strb	r2, [r3, #0]
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	68f9      	ldr	r1, [r7, #12]
 8006168:	6938      	ldr	r0, [r7, #16]
 800616a:	f7ff fa2b 	bl	80055c4 <_SendPacket>
  RECORD_END();
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f383 8811 	msr	BASEPRI, r3
}
 8006174:	bf00      	nop
 8006176:	3720      	adds	r7, #32
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	2000d014 	.word	0x2000d014

08006180 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006180:	b580      	push	{r7, lr}
 8006182:	b08c      	sub	sp, #48	@ 0x30
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800618c:	f3ef 8311 	mrs	r3, BASEPRI
 8006190:	f04f 0120 	mov.w	r1, #32
 8006194:	f381 8811 	msr	BASEPRI, r1
 8006198:	61fb      	str	r3, [r7, #28]
 800619a:	4825      	ldr	r0, [pc, #148]	@ (8006230 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800619c:	f7ff f926 	bl	80053ec <_PreparePacket>
 80061a0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061ae:	e00b      	b.n	80061c8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80061b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061b6:	1c59      	adds	r1, r3, #1
 80061b8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80061ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061be:	b2d2      	uxtb	r2, r2
 80061c0:	701a      	strb	r2, [r3, #0]
 80061c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c4:	09db      	lsrs	r3, r3, #7
 80061c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80061cc:	d8f0      	bhi.n	80061b0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80061ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061d6:	b2d2      	uxtb	r2, r2
 80061d8:	701a      	strb	r2, [r3, #0]
 80061da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061dc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	623b      	str	r3, [r7, #32]
 80061e6:	e00b      	b.n	8006200 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80061e8:	6a3b      	ldr	r3, [r7, #32]
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ee:	1c59      	adds	r1, r3, #1
 80061f0:	6279      	str	r1, [r7, #36]	@ 0x24
 80061f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061f6:	b2d2      	uxtb	r2, r2
 80061f8:	701a      	strb	r2, [r3, #0]
 80061fa:	6a3b      	ldr	r3, [r7, #32]
 80061fc:	09db      	lsrs	r3, r3, #7
 80061fe:	623b      	str	r3, [r7, #32]
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	2b7f      	cmp	r3, #127	@ 0x7f
 8006204:	d8f0      	bhi.n	80061e8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	627a      	str	r2, [r7, #36]	@ 0x24
 800620c:	6a3a      	ldr	r2, [r7, #32]
 800620e:	b2d2      	uxtb	r2, r2
 8006210:	701a      	strb	r2, [r3, #0]
 8006212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006214:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	6979      	ldr	r1, [r7, #20]
 800621a:	69b8      	ldr	r0, [r7, #24]
 800621c:	f7ff f9d2 	bl	80055c4 <_SendPacket>
  RECORD_END();
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	f383 8811 	msr	BASEPRI, r3
}
 8006226:	bf00      	nop
 8006228:	3730      	adds	r7, #48	@ 0x30
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	2000d014 	.word	0x2000d014

08006234 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006234:	b580      	push	{r7, lr}
 8006236:	b08c      	sub	sp, #48	@ 0x30
 8006238:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800623a:	4b58      	ldr	r3, [pc, #352]	@ (800639c <SEGGER_SYSVIEW_Start+0x168>)
 800623c:	2201      	movs	r2, #1
 800623e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006240:	f3ef 8311 	mrs	r3, BASEPRI
 8006244:	f04f 0120 	mov.w	r1, #32
 8006248:	f381 8811 	msr	BASEPRI, r1
 800624c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800624e:	4b53      	ldr	r3, [pc, #332]	@ (800639c <SEGGER_SYSVIEW_Start+0x168>)
 8006250:	785b      	ldrb	r3, [r3, #1]
 8006252:	220a      	movs	r2, #10
 8006254:	4952      	ldr	r1, [pc, #328]	@ (80063a0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006256:	4618      	mov	r0, r3
 8006258:	f7f9 fff2 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006262:	200a      	movs	r0, #10
 8006264:	f7ff ff32 	bl	80060cc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006268:	f3ef 8311 	mrs	r3, BASEPRI
 800626c:	f04f 0120 	mov.w	r1, #32
 8006270:	f381 8811 	msr	BASEPRI, r1
 8006274:	60bb      	str	r3, [r7, #8]
 8006276:	484b      	ldr	r0, [pc, #300]	@ (80063a4 <SEGGER_SYSVIEW_Start+0x170>)
 8006278:	f7ff f8b8 	bl	80053ec <_PreparePacket>
 800627c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006286:	4b45      	ldr	r3, [pc, #276]	@ (800639c <SEGGER_SYSVIEW_Start+0x168>)
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800628c:	e00b      	b.n	80062a6 <SEGGER_SYSVIEW_Start+0x72>
 800628e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006290:	b2da      	uxtb	r2, r3
 8006292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006294:	1c59      	adds	r1, r3, #1
 8006296:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006298:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800629c:	b2d2      	uxtb	r2, r2
 800629e:	701a      	strb	r2, [r3, #0]
 80062a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a2:	09db      	lsrs	r3, r3, #7
 80062a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80062aa:	d8f0      	bhi.n	800628e <SEGGER_SYSVIEW_Start+0x5a>
 80062ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ae:	1c5a      	adds	r2, r3, #1
 80062b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062b4:	b2d2      	uxtb	r2, r2
 80062b6:	701a      	strb	r2, [r3, #0]
 80062b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ba:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	627b      	str	r3, [r7, #36]	@ 0x24
 80062c0:	4b36      	ldr	r3, [pc, #216]	@ (800639c <SEGGER_SYSVIEW_Start+0x168>)
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	623b      	str	r3, [r7, #32]
 80062c6:	e00b      	b.n	80062e0 <SEGGER_SYSVIEW_Start+0xac>
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ce:	1c59      	adds	r1, r3, #1
 80062d0:	6279      	str	r1, [r7, #36]	@ 0x24
 80062d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	701a      	strb	r2, [r3, #0]
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	09db      	lsrs	r3, r3, #7
 80062de:	623b      	str	r3, [r7, #32]
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80062e4:	d8f0      	bhi.n	80062c8 <SEGGER_SYSVIEW_Start+0x94>
 80062e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	627a      	str	r2, [r7, #36]	@ 0x24
 80062ec:	6a3a      	ldr	r2, [r7, #32]
 80062ee:	b2d2      	uxtb	r2, r2
 80062f0:	701a      	strb	r2, [r3, #0]
 80062f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	61fb      	str	r3, [r7, #28]
 80062fa:	4b28      	ldr	r3, [pc, #160]	@ (800639c <SEGGER_SYSVIEW_Start+0x168>)
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	61bb      	str	r3, [r7, #24]
 8006300:	e00b      	b.n	800631a <SEGGER_SYSVIEW_Start+0xe6>
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	b2da      	uxtb	r2, r3
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	1c59      	adds	r1, r3, #1
 800630a:	61f9      	str	r1, [r7, #28]
 800630c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006310:	b2d2      	uxtb	r2, r2
 8006312:	701a      	strb	r2, [r3, #0]
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	09db      	lsrs	r3, r3, #7
 8006318:	61bb      	str	r3, [r7, #24]
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	2b7f      	cmp	r3, #127	@ 0x7f
 800631e:	d8f0      	bhi.n	8006302 <SEGGER_SYSVIEW_Start+0xce>
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	1c5a      	adds	r2, r3, #1
 8006324:	61fa      	str	r2, [r7, #28]
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	701a      	strb	r2, [r3, #0]
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	617b      	str	r3, [r7, #20]
 8006334:	2300      	movs	r3, #0
 8006336:	613b      	str	r3, [r7, #16]
 8006338:	e00b      	b.n	8006352 <SEGGER_SYSVIEW_Start+0x11e>
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	b2da      	uxtb	r2, r3
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	1c59      	adds	r1, r3, #1
 8006342:	6179      	str	r1, [r7, #20]
 8006344:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	701a      	strb	r2, [r3, #0]
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	09db      	lsrs	r3, r3, #7
 8006350:	613b      	str	r3, [r7, #16]
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	2b7f      	cmp	r3, #127	@ 0x7f
 8006356:	d8f0      	bhi.n	800633a <SEGGER_SYSVIEW_Start+0x106>
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	617a      	str	r2, [r7, #20]
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006368:	2218      	movs	r2, #24
 800636a:	6839      	ldr	r1, [r7, #0]
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f7ff f929 	bl	80055c4 <_SendPacket>
      RECORD_END();
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006378:	4b08      	ldr	r3, [pc, #32]	@ (800639c <SEGGER_SYSVIEW_Start+0x168>)
 800637a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006380:	4b06      	ldr	r3, [pc, #24]	@ (800639c <SEGGER_SYSVIEW_Start+0x168>)
 8006382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006384:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006386:	f000 f9eb 	bl	8006760 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800638a:	f000 f9b1 	bl	80066f0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800638e:	f000 fc1d 	bl	8006bcc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006392:	bf00      	nop
 8006394:	3730      	adds	r7, #48	@ 0x30
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	2000cfe4 	.word	0x2000cfe4
 80063a0:	08007f1c 	.word	0x08007f1c
 80063a4:	2000d014 	.word	0x2000d014

080063a8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80063ae:	f3ef 8311 	mrs	r3, BASEPRI
 80063b2:	f04f 0120 	mov.w	r1, #32
 80063b6:	f381 8811 	msr	BASEPRI, r1
 80063ba:	607b      	str	r3, [r7, #4]
 80063bc:	480b      	ldr	r0, [pc, #44]	@ (80063ec <SEGGER_SYSVIEW_Stop+0x44>)
 80063be:	f7ff f815 	bl	80053ec <_PreparePacket>
 80063c2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80063c4:	4b0a      	ldr	r3, [pc, #40]	@ (80063f0 <SEGGER_SYSVIEW_Stop+0x48>)
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d007      	beq.n	80063dc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80063cc:	220b      	movs	r2, #11
 80063ce:	6839      	ldr	r1, [r7, #0]
 80063d0:	6838      	ldr	r0, [r7, #0]
 80063d2:	f7ff f8f7 	bl	80055c4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80063d6:	4b06      	ldr	r3, [pc, #24]	@ (80063f0 <SEGGER_SYSVIEW_Stop+0x48>)
 80063d8:	2200      	movs	r2, #0
 80063da:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f383 8811 	msr	BASEPRI, r3
}
 80063e2:	bf00      	nop
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	2000d014 	.word	0x2000d014
 80063f0:	2000cfe4 	.word	0x2000cfe4

080063f4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b08c      	sub	sp, #48	@ 0x30
 80063f8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80063fa:	f3ef 8311 	mrs	r3, BASEPRI
 80063fe:	f04f 0120 	mov.w	r1, #32
 8006402:	f381 8811 	msr	BASEPRI, r1
 8006406:	60fb      	str	r3, [r7, #12]
 8006408:	4845      	ldr	r0, [pc, #276]	@ (8006520 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800640a:	f7fe ffef 	bl	80053ec <_PreparePacket>
 800640e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006418:	4b42      	ldr	r3, [pc, #264]	@ (8006524 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800641e:	e00b      	b.n	8006438 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006422:	b2da      	uxtb	r2, r3
 8006424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006426:	1c59      	adds	r1, r3, #1
 8006428:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800642a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800642e:	b2d2      	uxtb	r2, r2
 8006430:	701a      	strb	r2, [r3, #0]
 8006432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006434:	09db      	lsrs	r3, r3, #7
 8006436:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643a:	2b7f      	cmp	r3, #127	@ 0x7f
 800643c:	d8f0      	bhi.n	8006420 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800643e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006440:	1c5a      	adds	r2, r3, #1
 8006442:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006444:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006446:	b2d2      	uxtb	r2, r2
 8006448:	701a      	strb	r2, [r3, #0]
 800644a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800644c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	627b      	str	r3, [r7, #36]	@ 0x24
 8006452:	4b34      	ldr	r3, [pc, #208]	@ (8006524 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	623b      	str	r3, [r7, #32]
 8006458:	e00b      	b.n	8006472 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800645a:	6a3b      	ldr	r3, [r7, #32]
 800645c:	b2da      	uxtb	r2, r3
 800645e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006460:	1c59      	adds	r1, r3, #1
 8006462:	6279      	str	r1, [r7, #36]	@ 0x24
 8006464:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006468:	b2d2      	uxtb	r2, r2
 800646a:	701a      	strb	r2, [r3, #0]
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	09db      	lsrs	r3, r3, #7
 8006470:	623b      	str	r3, [r7, #32]
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	2b7f      	cmp	r3, #127	@ 0x7f
 8006476:	d8f0      	bhi.n	800645a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647a:	1c5a      	adds	r2, r3, #1
 800647c:	627a      	str	r2, [r7, #36]	@ 0x24
 800647e:	6a3a      	ldr	r2, [r7, #32]
 8006480:	b2d2      	uxtb	r2, r2
 8006482:	701a      	strb	r2, [r3, #0]
 8006484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006486:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	61fb      	str	r3, [r7, #28]
 800648c:	4b25      	ldr	r3, [pc, #148]	@ (8006524 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	61bb      	str	r3, [r7, #24]
 8006492:	e00b      	b.n	80064ac <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	b2da      	uxtb	r2, r3
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	1c59      	adds	r1, r3, #1
 800649c:	61f9      	str	r1, [r7, #28]
 800649e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064a2:	b2d2      	uxtb	r2, r2
 80064a4:	701a      	strb	r2, [r3, #0]
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	09db      	lsrs	r3, r3, #7
 80064aa:	61bb      	str	r3, [r7, #24]
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80064b0:	d8f0      	bhi.n	8006494 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	1c5a      	adds	r2, r3, #1
 80064b6:	61fa      	str	r2, [r7, #28]
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	b2d2      	uxtb	r2, r2
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	617b      	str	r3, [r7, #20]
 80064c6:	2300      	movs	r3, #0
 80064c8:	613b      	str	r3, [r7, #16]
 80064ca:	e00b      	b.n	80064e4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	1c59      	adds	r1, r3, #1
 80064d4:	6179      	str	r1, [r7, #20]
 80064d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064da:	b2d2      	uxtb	r2, r2
 80064dc:	701a      	strb	r2, [r3, #0]
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	09db      	lsrs	r3, r3, #7
 80064e2:	613b      	str	r3, [r7, #16]
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80064e8:	d8f0      	bhi.n	80064cc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	1c5a      	adds	r2, r3, #1
 80064ee:	617a      	str	r2, [r7, #20]
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	701a      	strb	r2, [r3, #0]
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80064fa:	2218      	movs	r2, #24
 80064fc:	6879      	ldr	r1, [r7, #4]
 80064fe:	68b8      	ldr	r0, [r7, #8]
 8006500:	f7ff f860 	bl	80055c4 <_SendPacket>
  RECORD_END();
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800650a:	4b06      	ldr	r3, [pc, #24]	@ (8006524 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800650c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006512:	4b04      	ldr	r3, [pc, #16]	@ (8006524 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006516:	4798      	blx	r3
  }
}
 8006518:	bf00      	nop
 800651a:	3730      	adds	r7, #48	@ 0x30
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	2000d014 	.word	0x2000d014
 8006524:	2000cfe4 	.word	0x2000cfe4

08006528 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006528:	b580      	push	{r7, lr}
 800652a:	b092      	sub	sp, #72	@ 0x48
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006530:	f3ef 8311 	mrs	r3, BASEPRI
 8006534:	f04f 0120 	mov.w	r1, #32
 8006538:	f381 8811 	msr	BASEPRI, r1
 800653c:	617b      	str	r3, [r7, #20]
 800653e:	486a      	ldr	r0, [pc, #424]	@ (80066e8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006540:	f7fe ff54 	bl	80053ec <_PreparePacket>
 8006544:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	647b      	str	r3, [r7, #68]	@ 0x44
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	4b66      	ldr	r3, [pc, #408]	@ (80066ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	643b      	str	r3, [r7, #64]	@ 0x40
 800655a:	e00b      	b.n	8006574 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800655c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800655e:	b2da      	uxtb	r2, r3
 8006560:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006562:	1c59      	adds	r1, r3, #1
 8006564:	6479      	str	r1, [r7, #68]	@ 0x44
 8006566:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800656a:	b2d2      	uxtb	r2, r2
 800656c:	701a      	strb	r2, [r3, #0]
 800656e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006570:	09db      	lsrs	r3, r3, #7
 8006572:	643b      	str	r3, [r7, #64]	@ 0x40
 8006574:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006576:	2b7f      	cmp	r3, #127	@ 0x7f
 8006578:	d8f0      	bhi.n	800655c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800657a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800657c:	1c5a      	adds	r2, r3, #1
 800657e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006580:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006582:	b2d2      	uxtb	r2, r2
 8006584:	701a      	strb	r2, [r3, #0]
 8006586:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006588:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006594:	e00b      	b.n	80065ae <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006598:	b2da      	uxtb	r2, r3
 800659a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800659c:	1c59      	adds	r1, r3, #1
 800659e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80065a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065a4:	b2d2      	uxtb	r2, r2
 80065a6:	701a      	strb	r2, [r3, #0]
 80065a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065aa:	09db      	lsrs	r3, r3, #7
 80065ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80065b2:	d8f0      	bhi.n	8006596 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80065b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065b6:	1c5a      	adds	r2, r3, #1
 80065b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80065ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065bc:	b2d2      	uxtb	r2, r2
 80065be:	701a      	strb	r2, [r3, #0]
 80065c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065c2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	2220      	movs	r2, #32
 80065ca:	4619      	mov	r1, r3
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f7fe fedd 	bl	800538c <_EncodeStr>
 80065d2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80065d4:	2209      	movs	r2, #9
 80065d6:	68f9      	ldr	r1, [r7, #12]
 80065d8:	6938      	ldr	r0, [r7, #16]
 80065da:	f7fe fff3 	bl	80055c4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	4b40      	ldr	r3, [pc, #256]	@ (80066ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80065f2:	e00b      	b.n	800660c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80065f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065fa:	1c59      	adds	r1, r3, #1
 80065fc:	6379      	str	r1, [r7, #52]	@ 0x34
 80065fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006602:	b2d2      	uxtb	r2, r2
 8006604:	701a      	strb	r2, [r3, #0]
 8006606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006608:	09db      	lsrs	r3, r3, #7
 800660a:	633b      	str	r3, [r7, #48]	@ 0x30
 800660c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006610:	d8f0      	bhi.n	80065f4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006614:	1c5a      	adds	r2, r3, #1
 8006616:	637a      	str	r2, [r7, #52]	@ 0x34
 8006618:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800661a:	b2d2      	uxtb	r2, r2
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006620:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800662c:	e00b      	b.n	8006646 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800662e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006630:	b2da      	uxtb	r2, r3
 8006632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006634:	1c59      	adds	r1, r3, #1
 8006636:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006638:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800663c:	b2d2      	uxtb	r2, r2
 800663e:	701a      	strb	r2, [r3, #0]
 8006640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006642:	09db      	lsrs	r3, r3, #7
 8006644:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006648:	2b7f      	cmp	r3, #127	@ 0x7f
 800664a:	d8f0      	bhi.n	800662e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800664c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800664e:	1c5a      	adds	r2, r3, #1
 8006650:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006652:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006654:	b2d2      	uxtb	r2, r2
 8006656:	701a      	strb	r2, [r3, #0]
 8006658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800665a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	623b      	str	r3, [r7, #32]
 8006666:	e00b      	b.n	8006680 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	b2da      	uxtb	r2, r3
 800666c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666e:	1c59      	adds	r1, r3, #1
 8006670:	6279      	str	r1, [r7, #36]	@ 0x24
 8006672:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006676:	b2d2      	uxtb	r2, r2
 8006678:	701a      	strb	r2, [r3, #0]
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	09db      	lsrs	r3, r3, #7
 800667e:	623b      	str	r3, [r7, #32]
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	2b7f      	cmp	r3, #127	@ 0x7f
 8006684:	d8f0      	bhi.n	8006668 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006688:	1c5a      	adds	r2, r3, #1
 800668a:	627a      	str	r2, [r7, #36]	@ 0x24
 800668c:	6a3a      	ldr	r2, [r7, #32]
 800668e:	b2d2      	uxtb	r2, r2
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006694:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	61fb      	str	r3, [r7, #28]
 800669a:	2300      	movs	r3, #0
 800669c:	61bb      	str	r3, [r7, #24]
 800669e:	e00b      	b.n	80066b8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	1c59      	adds	r1, r3, #1
 80066a8:	61f9      	str	r1, [r7, #28]
 80066aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	701a      	strb	r2, [r3, #0]
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	09db      	lsrs	r3, r3, #7
 80066b6:	61bb      	str	r3, [r7, #24]
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80066bc:	d8f0      	bhi.n	80066a0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	1c5a      	adds	r2, r3, #1
 80066c2:	61fa      	str	r2, [r7, #28]
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	b2d2      	uxtb	r2, r2
 80066c8:	701a      	strb	r2, [r3, #0]
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80066ce:	2215      	movs	r2, #21
 80066d0:	68f9      	ldr	r1, [r7, #12]
 80066d2:	6938      	ldr	r0, [r7, #16]
 80066d4:	f7fe ff76 	bl	80055c4 <_SendPacket>
  RECORD_END();
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f383 8811 	msr	BASEPRI, r3
}
 80066de:	bf00      	nop
 80066e0:	3748      	adds	r7, #72	@ 0x48
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	2000d014 	.word	0x2000d014
 80066ec:	2000cfe4 	.word	0x2000cfe4

080066f0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80066f0:	b580      	push	{r7, lr}
 80066f2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80066f4:	4b07      	ldr	r3, [pc, #28]	@ (8006714 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d008      	beq.n	800670e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80066fc:	4b05      	ldr	r3, [pc, #20]	@ (8006714 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006706:	4b03      	ldr	r3, [pc, #12]	@ (8006714 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	4798      	blx	r3
  }
}
 800670e:	bf00      	nop
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	2000cfe4 	.word	0x2000cfe4

08006718 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006720:	f3ef 8311 	mrs	r3, BASEPRI
 8006724:	f04f 0120 	mov.w	r1, #32
 8006728:	f381 8811 	msr	BASEPRI, r1
 800672c:	617b      	str	r3, [r7, #20]
 800672e:	480b      	ldr	r0, [pc, #44]	@ (800675c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006730:	f7fe fe5c 	bl	80053ec <_PreparePacket>
 8006734:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006736:	2280      	movs	r2, #128	@ 0x80
 8006738:	6879      	ldr	r1, [r7, #4]
 800673a:	6938      	ldr	r0, [r7, #16]
 800673c:	f7fe fe26 	bl	800538c <_EncodeStr>
 8006740:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006742:	220e      	movs	r2, #14
 8006744:	68f9      	ldr	r1, [r7, #12]
 8006746:	6938      	ldr	r0, [r7, #16]
 8006748:	f7fe ff3c 	bl	80055c4 <_SendPacket>
  RECORD_END();
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f383 8811 	msr	BASEPRI, r3
}
 8006752:	bf00      	nop
 8006754:	3718      	adds	r7, #24
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	2000d014 	.word	0x2000d014

08006760 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006760:	b590      	push	{r4, r7, lr}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006766:	4b15      	ldr	r3, [pc, #84]	@ (80067bc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d01a      	beq.n	80067a4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800676e:	4b13      	ldr	r3, [pc, #76]	@ (80067bc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d015      	beq.n	80067a4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006778:	4b10      	ldr	r3, [pc, #64]	@ (80067bc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800677a:	6a1b      	ldr	r3, [r3, #32]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4798      	blx	r3
 8006780:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006784:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006786:	e9d7 0100 	ldrd	r0, r1, [r7]
 800678a:	f04f 0200 	mov.w	r2, #0
 800678e:	f04f 0300 	mov.w	r3, #0
 8006792:	000a      	movs	r2, r1
 8006794:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006796:	4613      	mov	r3, r2
 8006798:	461a      	mov	r2, r3
 800679a:	4621      	mov	r1, r4
 800679c:	200d      	movs	r0, #13
 800679e:	f7ff fcef 	bl	8006180 <SEGGER_SYSVIEW_RecordU32x2>
 80067a2:	e006      	b.n	80067b2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80067a4:	4b06      	ldr	r3, [pc, #24]	@ (80067c0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4619      	mov	r1, r3
 80067aa:	200c      	movs	r0, #12
 80067ac:	f7ff fcac 	bl	8006108 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80067b0:	bf00      	nop
 80067b2:	bf00      	nop
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd90      	pop	{r4, r7, pc}
 80067ba:	bf00      	nop
 80067bc:	2000cfe4 	.word	0x2000cfe4
 80067c0:	e0001004 	.word	0xe0001004

080067c4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067ca:	f3ef 8311 	mrs	r3, BASEPRI
 80067ce:	f04f 0120 	mov.w	r1, #32
 80067d2:	f381 8811 	msr	BASEPRI, r1
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	4819      	ldr	r0, [pc, #100]	@ (8006840 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80067da:	f7fe fe07 	bl	80053ec <_PreparePacket>
 80067de:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80067e4:	4b17      	ldr	r3, [pc, #92]	@ (8006844 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ec:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	617b      	str	r3, [r7, #20]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	613b      	str	r3, [r7, #16]
 80067f6:	e00b      	b.n	8006810 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	1c59      	adds	r1, r3, #1
 8006800:	6179      	str	r1, [r7, #20]
 8006802:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006806:	b2d2      	uxtb	r2, r2
 8006808:	701a      	strb	r2, [r3, #0]
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	09db      	lsrs	r3, r3, #7
 800680e:	613b      	str	r3, [r7, #16]
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	2b7f      	cmp	r3, #127	@ 0x7f
 8006814:	d8f0      	bhi.n	80067f8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	617a      	str	r2, [r7, #20]
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	701a      	strb	r2, [r3, #0]
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006826:	2202      	movs	r2, #2
 8006828:	6879      	ldr	r1, [r7, #4]
 800682a:	68b8      	ldr	r0, [r7, #8]
 800682c:	f7fe feca 	bl	80055c4 <_SendPacket>
  RECORD_END();
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f383 8811 	msr	BASEPRI, r3
}
 8006836:	bf00      	nop
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	2000d014 	.word	0x2000d014
 8006844:	e000ed04 	.word	0xe000ed04

08006848 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800684e:	f3ef 8311 	mrs	r3, BASEPRI
 8006852:	f04f 0120 	mov.w	r1, #32
 8006856:	f381 8811 	msr	BASEPRI, r1
 800685a:	607b      	str	r3, [r7, #4]
 800685c:	4807      	ldr	r0, [pc, #28]	@ (800687c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800685e:	f7fe fdc5 	bl	80053ec <_PreparePacket>
 8006862:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006864:	2203      	movs	r2, #3
 8006866:	6839      	ldr	r1, [r7, #0]
 8006868:	6838      	ldr	r0, [r7, #0]
 800686a:	f7fe feab 	bl	80055c4 <_SendPacket>
  RECORD_END();
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f383 8811 	msr	BASEPRI, r3
}
 8006874:	bf00      	nop
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	2000d014 	.word	0x2000d014

08006880 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006886:	f3ef 8311 	mrs	r3, BASEPRI
 800688a:	f04f 0120 	mov.w	r1, #32
 800688e:	f381 8811 	msr	BASEPRI, r1
 8006892:	607b      	str	r3, [r7, #4]
 8006894:	4807      	ldr	r0, [pc, #28]	@ (80068b4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006896:	f7fe fda9 	bl	80053ec <_PreparePacket>
 800689a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800689c:	2212      	movs	r2, #18
 800689e:	6839      	ldr	r1, [r7, #0]
 80068a0:	6838      	ldr	r0, [r7, #0]
 80068a2:	f7fe fe8f 	bl	80055c4 <_SendPacket>
  RECORD_END();
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f383 8811 	msr	BASEPRI, r3
}
 80068ac:	bf00      	nop
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	2000d014 	.word	0x2000d014

080068b8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80068be:	f3ef 8311 	mrs	r3, BASEPRI
 80068c2:	f04f 0120 	mov.w	r1, #32
 80068c6:	f381 8811 	msr	BASEPRI, r1
 80068ca:	607b      	str	r3, [r7, #4]
 80068cc:	4807      	ldr	r0, [pc, #28]	@ (80068ec <SEGGER_SYSVIEW_OnIdle+0x34>)
 80068ce:	f7fe fd8d 	bl	80053ec <_PreparePacket>
 80068d2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80068d4:	2211      	movs	r2, #17
 80068d6:	6839      	ldr	r1, [r7, #0]
 80068d8:	6838      	ldr	r0, [r7, #0]
 80068da:	f7fe fe73 	bl	80055c4 <_SendPacket>
  RECORD_END();
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f383 8811 	msr	BASEPRI, r3
}
 80068e4:	bf00      	nop
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	2000d014 	.word	0x2000d014

080068f0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b088      	sub	sp, #32
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80068f8:	f3ef 8311 	mrs	r3, BASEPRI
 80068fc:	f04f 0120 	mov.w	r1, #32
 8006900:	f381 8811 	msr	BASEPRI, r1
 8006904:	617b      	str	r3, [r7, #20]
 8006906:	4819      	ldr	r0, [pc, #100]	@ (800696c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006908:	f7fe fd70 	bl	80053ec <_PreparePacket>
 800690c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006912:	4b17      	ldr	r3, [pc, #92]	@ (8006970 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	61fb      	str	r3, [r7, #28]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	61bb      	str	r3, [r7, #24]
 8006924:	e00b      	b.n	800693e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	b2da      	uxtb	r2, r3
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	1c59      	adds	r1, r3, #1
 800692e:	61f9      	str	r1, [r7, #28]
 8006930:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006934:	b2d2      	uxtb	r2, r2
 8006936:	701a      	strb	r2, [r3, #0]
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	09db      	lsrs	r3, r3, #7
 800693c:	61bb      	str	r3, [r7, #24]
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	2b7f      	cmp	r3, #127	@ 0x7f
 8006942:	d8f0      	bhi.n	8006926 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	61fa      	str	r2, [r7, #28]
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	b2d2      	uxtb	r2, r2
 800694e:	701a      	strb	r2, [r3, #0]
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006954:	2208      	movs	r2, #8
 8006956:	68f9      	ldr	r1, [r7, #12]
 8006958:	6938      	ldr	r0, [r7, #16]
 800695a:	f7fe fe33 	bl	80055c4 <_SendPacket>
  RECORD_END();
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f383 8811 	msr	BASEPRI, r3
}
 8006964:	bf00      	nop
 8006966:	3720      	adds	r7, #32
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	2000d014 	.word	0x2000d014
 8006970:	2000cfe4 	.word	0x2000cfe4

08006974 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006974:	b580      	push	{r7, lr}
 8006976:	b088      	sub	sp, #32
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800697c:	f3ef 8311 	mrs	r3, BASEPRI
 8006980:	f04f 0120 	mov.w	r1, #32
 8006984:	f381 8811 	msr	BASEPRI, r1
 8006988:	617b      	str	r3, [r7, #20]
 800698a:	4819      	ldr	r0, [pc, #100]	@ (80069f0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800698c:	f7fe fd2e 	bl	80053ec <_PreparePacket>
 8006990:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006996:	4b17      	ldr	r3, [pc, #92]	@ (80069f4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	61fb      	str	r3, [r7, #28]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	61bb      	str	r3, [r7, #24]
 80069a8:	e00b      	b.n	80069c2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	1c59      	adds	r1, r3, #1
 80069b2:	61f9      	str	r1, [r7, #28]
 80069b4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069b8:	b2d2      	uxtb	r2, r2
 80069ba:	701a      	strb	r2, [r3, #0]
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	09db      	lsrs	r3, r3, #7
 80069c0:	61bb      	str	r3, [r7, #24]
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80069c6:	d8f0      	bhi.n	80069aa <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	61fa      	str	r2, [r7, #28]
 80069ce:	69ba      	ldr	r2, [r7, #24]
 80069d0:	b2d2      	uxtb	r2, r2
 80069d2:	701a      	strb	r2, [r3, #0]
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80069d8:	2204      	movs	r2, #4
 80069da:	68f9      	ldr	r1, [r7, #12]
 80069dc:	6938      	ldr	r0, [r7, #16]
 80069de:	f7fe fdf1 	bl	80055c4 <_SendPacket>
  RECORD_END();
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f383 8811 	msr	BASEPRI, r3
}
 80069e8:	bf00      	nop
 80069ea:	3720      	adds	r7, #32
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	2000d014 	.word	0x2000d014
 80069f4:	2000cfe4 	.word	0x2000cfe4

080069f8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b088      	sub	sp, #32
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a00:	f3ef 8311 	mrs	r3, BASEPRI
 8006a04:	f04f 0120 	mov.w	r1, #32
 8006a08:	f381 8811 	msr	BASEPRI, r1
 8006a0c:	617b      	str	r3, [r7, #20]
 8006a0e:	4819      	ldr	r0, [pc, #100]	@ (8006a74 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006a10:	f7fe fcec 	bl	80053ec <_PreparePacket>
 8006a14:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a1a:	4b17      	ldr	r3, [pc, #92]	@ (8006a78 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	61fb      	str	r3, [r7, #28]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	61bb      	str	r3, [r7, #24]
 8006a2c:	e00b      	b.n	8006a46 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	1c59      	adds	r1, r3, #1
 8006a36:	61f9      	str	r1, [r7, #28]
 8006a38:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a3c:	b2d2      	uxtb	r2, r2
 8006a3e:	701a      	strb	r2, [r3, #0]
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	09db      	lsrs	r3, r3, #7
 8006a44:	61bb      	str	r3, [r7, #24]
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a4a:	d8f0      	bhi.n	8006a2e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	1c5a      	adds	r2, r3, #1
 8006a50:	61fa      	str	r2, [r7, #28]
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	b2d2      	uxtb	r2, r2
 8006a56:	701a      	strb	r2, [r3, #0]
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006a5c:	2206      	movs	r2, #6
 8006a5e:	68f9      	ldr	r1, [r7, #12]
 8006a60:	6938      	ldr	r0, [r7, #16]
 8006a62:	f7fe fdaf 	bl	80055c4 <_SendPacket>
  RECORD_END();
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f383 8811 	msr	BASEPRI, r3
}
 8006a6c:	bf00      	nop
 8006a6e:	3720      	adds	r7, #32
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	2000d014 	.word	0x2000d014
 8006a78:	2000cfe4 	.word	0x2000cfe4

08006a7c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08c      	sub	sp, #48	@ 0x30
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	4603      	mov	r3, r0
 8006a84:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006a86:	4b40      	ldr	r3, [pc, #256]	@ (8006b88 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d077      	beq.n	8006b7e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006a8e:	4b3e      	ldr	r3, [pc, #248]	@ (8006b88 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006a94:	2300      	movs	r3, #0
 8006a96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a98:	e008      	b.n	8006aac <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8006aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d007      	beq.n	8006ab6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006aac:	79fb      	ldrb	r3, [r7, #7]
 8006aae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d3f2      	bcc.n	8006a9a <SEGGER_SYSVIEW_SendModule+0x1e>
 8006ab4:	e000      	b.n	8006ab8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006ab6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d055      	beq.n	8006b6a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006abe:	f3ef 8311 	mrs	r3, BASEPRI
 8006ac2:	f04f 0120 	mov.w	r1, #32
 8006ac6:	f381 8811 	msr	BASEPRI, r1
 8006aca:	617b      	str	r3, [r7, #20]
 8006acc:	482f      	ldr	r0, [pc, #188]	@ (8006b8c <SEGGER_SYSVIEW_SendModule+0x110>)
 8006ace:	f7fe fc8d 	bl	80053ec <_PreparePacket>
 8006ad2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	627b      	str	r3, [r7, #36]	@ 0x24
 8006adc:	79fb      	ldrb	r3, [r7, #7]
 8006ade:	623b      	str	r3, [r7, #32]
 8006ae0:	e00b      	b.n	8006afa <SEGGER_SYSVIEW_SendModule+0x7e>
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	1c59      	adds	r1, r3, #1
 8006aea:	6279      	str	r1, [r7, #36]	@ 0x24
 8006aec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006af0:	b2d2      	uxtb	r2, r2
 8006af2:	701a      	strb	r2, [r3, #0]
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	09db      	lsrs	r3, r3, #7
 8006af8:	623b      	str	r3, [r7, #32]
 8006afa:	6a3b      	ldr	r3, [r7, #32]
 8006afc:	2b7f      	cmp	r3, #127	@ 0x7f
 8006afe:	d8f0      	bhi.n	8006ae2 <SEGGER_SYSVIEW_SendModule+0x66>
 8006b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b02:	1c5a      	adds	r2, r3, #1
 8006b04:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b06:	6a3a      	ldr	r2, [r7, #32]
 8006b08:	b2d2      	uxtb	r2, r2
 8006b0a:	701a      	strb	r2, [r3, #0]
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	61fb      	str	r3, [r7, #28]
 8006b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	61bb      	str	r3, [r7, #24]
 8006b1a:	e00b      	b.n	8006b34 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	1c59      	adds	r1, r3, #1
 8006b24:	61f9      	str	r1, [r7, #28]
 8006b26:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b2a:	b2d2      	uxtb	r2, r2
 8006b2c:	701a      	strb	r2, [r3, #0]
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	09db      	lsrs	r3, r3, #7
 8006b32:	61bb      	str	r3, [r7, #24]
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b38:	d8f0      	bhi.n	8006b1c <SEGGER_SYSVIEW_SendModule+0xa0>
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	1c5a      	adds	r2, r3, #1
 8006b3e:	61fa      	str	r2, [r7, #28]
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	b2d2      	uxtb	r2, r2
 8006b44:	701a      	strb	r2, [r3, #0]
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2280      	movs	r2, #128	@ 0x80
 8006b50:	4619      	mov	r1, r3
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f7fe fc1a 	bl	800538c <_EncodeStr>
 8006b58:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006b5a:	2216      	movs	r2, #22
 8006b5c:	68f9      	ldr	r1, [r7, #12]
 8006b5e:	6938      	ldr	r0, [r7, #16]
 8006b60:	f7fe fd30 	bl	80055c4 <_SendPacket>
      RECORD_END();
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d006      	beq.n	8006b7e <SEGGER_SYSVIEW_SendModule+0x102>
 8006b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d002      	beq.n	8006b7e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	4798      	blx	r3
    }
  }
}
 8006b7e:	bf00      	nop
 8006b80:	3730      	adds	r7, #48	@ 0x30
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	2000d00c 	.word	0x2000d00c
 8006b8c:	2000d014 	.word	0x2000d014

08006b90 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006b96:	4b0c      	ldr	r3, [pc, #48]	@ (8006bc8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00f      	beq.n	8006bbe <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8006bc8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d002      	beq.n	8006bb2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1f2      	bne.n	8006ba4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006bbe:	bf00      	nop
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	2000d00c 	.word	0x2000d00c

08006bcc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006bd2:	f3ef 8311 	mrs	r3, BASEPRI
 8006bd6:	f04f 0120 	mov.w	r1, #32
 8006bda:	f381 8811 	msr	BASEPRI, r1
 8006bde:	60fb      	str	r3, [r7, #12]
 8006be0:	4817      	ldr	r0, [pc, #92]	@ (8006c40 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006be2:	f7fe fc03 	bl	80053ec <_PreparePacket>
 8006be6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	617b      	str	r3, [r7, #20]
 8006bf0:	4b14      	ldr	r3, [pc, #80]	@ (8006c44 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	613b      	str	r3, [r7, #16]
 8006bf6:	e00b      	b.n	8006c10 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	b2da      	uxtb	r2, r3
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	1c59      	adds	r1, r3, #1
 8006c00:	6179      	str	r1, [r7, #20]
 8006c02:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c06:	b2d2      	uxtb	r2, r2
 8006c08:	701a      	strb	r2, [r3, #0]
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	09db      	lsrs	r3, r3, #7
 8006c0e:	613b      	str	r3, [r7, #16]
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c14:	d8f0      	bhi.n	8006bf8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	1c5a      	adds	r2, r3, #1
 8006c1a:	617a      	str	r2, [r7, #20]
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	b2d2      	uxtb	r2, r2
 8006c20:	701a      	strb	r2, [r3, #0]
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006c26:	221b      	movs	r2, #27
 8006c28:	6879      	ldr	r1, [r7, #4]
 8006c2a:	68b8      	ldr	r0, [r7, #8]
 8006c2c:	f7fe fcca 	bl	80055c4 <_SendPacket>
  RECORD_END();
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f383 8811 	msr	BASEPRI, r3
}
 8006c36:	bf00      	nop
 8006c38:	3718      	adds	r7, #24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	2000d014 	.word	0x2000d014
 8006c44:	2000d010 	.word	0x2000d010

08006c48 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006c48:	b40f      	push	{r0, r1, r2, r3}
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b082      	sub	sp, #8
 8006c4e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006c50:	f107 0314 	add.w	r3, r7, #20
 8006c54:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006c56:	1d3b      	adds	r3, r7, #4
 8006c58:	461a      	mov	r2, r3
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	6938      	ldr	r0, [r7, #16]
 8006c5e:	f7fe ffc1 	bl	8005be4 <_VPrintTarget>
  va_end(ParamList);
}
 8006c62:	bf00      	nop
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c6c:	b004      	add	sp, #16
 8006c6e:	4770      	bx	lr

08006c70 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b08a      	sub	sp, #40	@ 0x28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c78:	f3ef 8311 	mrs	r3, BASEPRI
 8006c7c:	f04f 0120 	mov.w	r1, #32
 8006c80:	f381 8811 	msr	BASEPRI, r1
 8006c84:	617b      	str	r3, [r7, #20]
 8006c86:	4827      	ldr	r0, [pc, #156]	@ (8006d24 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006c88:	f7fe fbb0 	bl	80053ec <_PreparePacket>
 8006c8c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c8e:	2280      	movs	r2, #128	@ 0x80
 8006c90:	6879      	ldr	r1, [r7, #4]
 8006c92:	6938      	ldr	r0, [r7, #16]
 8006c94:	f7fe fb7a 	bl	800538c <_EncodeStr>
 8006c98:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	623b      	str	r3, [r7, #32]
 8006ca2:	e00b      	b.n	8006cbc <SEGGER_SYSVIEW_Warn+0x4c>
 8006ca4:	6a3b      	ldr	r3, [r7, #32]
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006caa:	1c59      	adds	r1, r3, #1
 8006cac:	6279      	str	r1, [r7, #36]	@ 0x24
 8006cae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cb2:	b2d2      	uxtb	r2, r2
 8006cb4:	701a      	strb	r2, [r3, #0]
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	09db      	lsrs	r3, r3, #7
 8006cba:	623b      	str	r3, [r7, #32]
 8006cbc:	6a3b      	ldr	r3, [r7, #32]
 8006cbe:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cc0:	d8f0      	bhi.n	8006ca4 <SEGGER_SYSVIEW_Warn+0x34>
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc4:	1c5a      	adds	r2, r3, #1
 8006cc6:	627a      	str	r2, [r7, #36]	@ 0x24
 8006cc8:	6a3a      	ldr	r2, [r7, #32]
 8006cca:	b2d2      	uxtb	r2, r2
 8006ccc:	701a      	strb	r2, [r3, #0]
 8006cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	61fb      	str	r3, [r7, #28]
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	61bb      	str	r3, [r7, #24]
 8006cda:	e00b      	b.n	8006cf4 <SEGGER_SYSVIEW_Warn+0x84>
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	b2da      	uxtb	r2, r3
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	1c59      	adds	r1, r3, #1
 8006ce4:	61f9      	str	r1, [r7, #28]
 8006ce6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	701a      	strb	r2, [r3, #0]
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	09db      	lsrs	r3, r3, #7
 8006cf2:	61bb      	str	r3, [r7, #24]
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cf8:	d8f0      	bhi.n	8006cdc <SEGGER_SYSVIEW_Warn+0x6c>
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	1c5a      	adds	r2, r3, #1
 8006cfe:	61fa      	str	r2, [r7, #28]
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	b2d2      	uxtb	r2, r2
 8006d04:	701a      	strb	r2, [r3, #0]
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006d0a:	221a      	movs	r2, #26
 8006d0c:	68f9      	ldr	r1, [r7, #12]
 8006d0e:	6938      	ldr	r0, [r7, #16]
 8006d10:	f7fe fc58 	bl	80055c4 <_SendPacket>
  RECORD_END();
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	f383 8811 	msr	BASEPRI, r3
}
 8006d1a:	bf00      	nop
 8006d1c:	3728      	adds	r7, #40	@ 0x28
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	2000d014 	.word	0x2000d014

08006d28 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
 8006d34:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	6879      	ldr	r1, [r7, #4]
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	f7fe fa30 	bl	80051a0 <SEGGER_RTT_Write>
  return len;
 8006d40:	683b      	ldr	r3, [r7, #0]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
	...

08006d4c <std>:
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	b510      	push	{r4, lr}
 8006d50:	4604      	mov	r4, r0
 8006d52:	e9c0 3300 	strd	r3, r3, [r0]
 8006d56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d5a:	6083      	str	r3, [r0, #8]
 8006d5c:	8181      	strh	r1, [r0, #12]
 8006d5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d60:	81c2      	strh	r2, [r0, #14]
 8006d62:	6183      	str	r3, [r0, #24]
 8006d64:	4619      	mov	r1, r3
 8006d66:	2208      	movs	r2, #8
 8006d68:	305c      	adds	r0, #92	@ 0x5c
 8006d6a:	f000 fa2b 	bl	80071c4 <memset>
 8006d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006da4 <std+0x58>)
 8006d70:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d72:	4b0d      	ldr	r3, [pc, #52]	@ (8006da8 <std+0x5c>)
 8006d74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d76:	4b0d      	ldr	r3, [pc, #52]	@ (8006dac <std+0x60>)
 8006d78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006db0 <std+0x64>)
 8006d7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006db4 <std+0x68>)
 8006d80:	6224      	str	r4, [r4, #32]
 8006d82:	429c      	cmp	r4, r3
 8006d84:	d006      	beq.n	8006d94 <std+0x48>
 8006d86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d8a:	4294      	cmp	r4, r2
 8006d8c:	d002      	beq.n	8006d94 <std+0x48>
 8006d8e:	33d0      	adds	r3, #208	@ 0xd0
 8006d90:	429c      	cmp	r4, r3
 8006d92:	d105      	bne.n	8006da0 <std+0x54>
 8006d94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d9c:	f000 ba72 	b.w	8007284 <__retarget_lock_init_recursive>
 8006da0:	bd10      	pop	{r4, pc}
 8006da2:	bf00      	nop
 8006da4:	08006ff5 	.word	0x08006ff5
 8006da8:	08007017 	.word	0x08007017
 8006dac:	0800704f 	.word	0x0800704f
 8006db0:	08007073 	.word	0x08007073
 8006db4:	2000d0f8 	.word	0x2000d0f8

08006db8 <stdio_exit_handler>:
 8006db8:	4a02      	ldr	r2, [pc, #8]	@ (8006dc4 <stdio_exit_handler+0xc>)
 8006dba:	4903      	ldr	r1, [pc, #12]	@ (8006dc8 <stdio_exit_handler+0x10>)
 8006dbc:	4803      	ldr	r0, [pc, #12]	@ (8006dcc <stdio_exit_handler+0x14>)
 8006dbe:	f000 b869 	b.w	8006e94 <_fwalk_sglue>
 8006dc2:	bf00      	nop
 8006dc4:	20000014 	.word	0x20000014
 8006dc8:	08007b6d 	.word	0x08007b6d
 8006dcc:	20000024 	.word	0x20000024

08006dd0 <cleanup_stdio>:
 8006dd0:	6841      	ldr	r1, [r0, #4]
 8006dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8006e04 <cleanup_stdio+0x34>)
 8006dd4:	4299      	cmp	r1, r3
 8006dd6:	b510      	push	{r4, lr}
 8006dd8:	4604      	mov	r4, r0
 8006dda:	d001      	beq.n	8006de0 <cleanup_stdio+0x10>
 8006ddc:	f000 fec6 	bl	8007b6c <_fflush_r>
 8006de0:	68a1      	ldr	r1, [r4, #8]
 8006de2:	4b09      	ldr	r3, [pc, #36]	@ (8006e08 <cleanup_stdio+0x38>)
 8006de4:	4299      	cmp	r1, r3
 8006de6:	d002      	beq.n	8006dee <cleanup_stdio+0x1e>
 8006de8:	4620      	mov	r0, r4
 8006dea:	f000 febf 	bl	8007b6c <_fflush_r>
 8006dee:	68e1      	ldr	r1, [r4, #12]
 8006df0:	4b06      	ldr	r3, [pc, #24]	@ (8006e0c <cleanup_stdio+0x3c>)
 8006df2:	4299      	cmp	r1, r3
 8006df4:	d004      	beq.n	8006e00 <cleanup_stdio+0x30>
 8006df6:	4620      	mov	r0, r4
 8006df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dfc:	f000 beb6 	b.w	8007b6c <_fflush_r>
 8006e00:	bd10      	pop	{r4, pc}
 8006e02:	bf00      	nop
 8006e04:	2000d0f8 	.word	0x2000d0f8
 8006e08:	2000d160 	.word	0x2000d160
 8006e0c:	2000d1c8 	.word	0x2000d1c8

08006e10 <global_stdio_init.part.0>:
 8006e10:	b510      	push	{r4, lr}
 8006e12:	4b0b      	ldr	r3, [pc, #44]	@ (8006e40 <global_stdio_init.part.0+0x30>)
 8006e14:	4c0b      	ldr	r4, [pc, #44]	@ (8006e44 <global_stdio_init.part.0+0x34>)
 8006e16:	4a0c      	ldr	r2, [pc, #48]	@ (8006e48 <global_stdio_init.part.0+0x38>)
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	2104      	movs	r1, #4
 8006e20:	f7ff ff94 	bl	8006d4c <std>
 8006e24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e28:	2201      	movs	r2, #1
 8006e2a:	2109      	movs	r1, #9
 8006e2c:	f7ff ff8e 	bl	8006d4c <std>
 8006e30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e34:	2202      	movs	r2, #2
 8006e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e3a:	2112      	movs	r1, #18
 8006e3c:	f7ff bf86 	b.w	8006d4c <std>
 8006e40:	2000d230 	.word	0x2000d230
 8006e44:	2000d0f8 	.word	0x2000d0f8
 8006e48:	08006db9 	.word	0x08006db9

08006e4c <__sfp_lock_acquire>:
 8006e4c:	4801      	ldr	r0, [pc, #4]	@ (8006e54 <__sfp_lock_acquire+0x8>)
 8006e4e:	f000 ba1a 	b.w	8007286 <__retarget_lock_acquire_recursive>
 8006e52:	bf00      	nop
 8006e54:	2000d239 	.word	0x2000d239

08006e58 <__sfp_lock_release>:
 8006e58:	4801      	ldr	r0, [pc, #4]	@ (8006e60 <__sfp_lock_release+0x8>)
 8006e5a:	f000 ba15 	b.w	8007288 <__retarget_lock_release_recursive>
 8006e5e:	bf00      	nop
 8006e60:	2000d239 	.word	0x2000d239

08006e64 <__sinit>:
 8006e64:	b510      	push	{r4, lr}
 8006e66:	4604      	mov	r4, r0
 8006e68:	f7ff fff0 	bl	8006e4c <__sfp_lock_acquire>
 8006e6c:	6a23      	ldr	r3, [r4, #32]
 8006e6e:	b11b      	cbz	r3, 8006e78 <__sinit+0x14>
 8006e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e74:	f7ff bff0 	b.w	8006e58 <__sfp_lock_release>
 8006e78:	4b04      	ldr	r3, [pc, #16]	@ (8006e8c <__sinit+0x28>)
 8006e7a:	6223      	str	r3, [r4, #32]
 8006e7c:	4b04      	ldr	r3, [pc, #16]	@ (8006e90 <__sinit+0x2c>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1f5      	bne.n	8006e70 <__sinit+0xc>
 8006e84:	f7ff ffc4 	bl	8006e10 <global_stdio_init.part.0>
 8006e88:	e7f2      	b.n	8006e70 <__sinit+0xc>
 8006e8a:	bf00      	nop
 8006e8c:	08006dd1 	.word	0x08006dd1
 8006e90:	2000d230 	.word	0x2000d230

08006e94 <_fwalk_sglue>:
 8006e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e98:	4607      	mov	r7, r0
 8006e9a:	4688      	mov	r8, r1
 8006e9c:	4614      	mov	r4, r2
 8006e9e:	2600      	movs	r6, #0
 8006ea0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ea4:	f1b9 0901 	subs.w	r9, r9, #1
 8006ea8:	d505      	bpl.n	8006eb6 <_fwalk_sglue+0x22>
 8006eaa:	6824      	ldr	r4, [r4, #0]
 8006eac:	2c00      	cmp	r4, #0
 8006eae:	d1f7      	bne.n	8006ea0 <_fwalk_sglue+0xc>
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eb6:	89ab      	ldrh	r3, [r5, #12]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d907      	bls.n	8006ecc <_fwalk_sglue+0x38>
 8006ebc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	d003      	beq.n	8006ecc <_fwalk_sglue+0x38>
 8006ec4:	4629      	mov	r1, r5
 8006ec6:	4638      	mov	r0, r7
 8006ec8:	47c0      	blx	r8
 8006eca:	4306      	orrs	r6, r0
 8006ecc:	3568      	adds	r5, #104	@ 0x68
 8006ece:	e7e9      	b.n	8006ea4 <_fwalk_sglue+0x10>

08006ed0 <_puts_r>:
 8006ed0:	6a03      	ldr	r3, [r0, #32]
 8006ed2:	b570      	push	{r4, r5, r6, lr}
 8006ed4:	6884      	ldr	r4, [r0, #8]
 8006ed6:	4605      	mov	r5, r0
 8006ed8:	460e      	mov	r6, r1
 8006eda:	b90b      	cbnz	r3, 8006ee0 <_puts_r+0x10>
 8006edc:	f7ff ffc2 	bl	8006e64 <__sinit>
 8006ee0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ee2:	07db      	lsls	r3, r3, #31
 8006ee4:	d405      	bmi.n	8006ef2 <_puts_r+0x22>
 8006ee6:	89a3      	ldrh	r3, [r4, #12]
 8006ee8:	0598      	lsls	r0, r3, #22
 8006eea:	d402      	bmi.n	8006ef2 <_puts_r+0x22>
 8006eec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006eee:	f000 f9ca 	bl	8007286 <__retarget_lock_acquire_recursive>
 8006ef2:	89a3      	ldrh	r3, [r4, #12]
 8006ef4:	0719      	lsls	r1, r3, #28
 8006ef6:	d502      	bpl.n	8006efe <_puts_r+0x2e>
 8006ef8:	6923      	ldr	r3, [r4, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d135      	bne.n	8006f6a <_puts_r+0x9a>
 8006efe:	4621      	mov	r1, r4
 8006f00:	4628      	mov	r0, r5
 8006f02:	f000 f8f9 	bl	80070f8 <__swsetup_r>
 8006f06:	b380      	cbz	r0, 8006f6a <_puts_r+0x9a>
 8006f08:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006f0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f0e:	07da      	lsls	r2, r3, #31
 8006f10:	d405      	bmi.n	8006f1e <_puts_r+0x4e>
 8006f12:	89a3      	ldrh	r3, [r4, #12]
 8006f14:	059b      	lsls	r3, r3, #22
 8006f16:	d402      	bmi.n	8006f1e <_puts_r+0x4e>
 8006f18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f1a:	f000 f9b5 	bl	8007288 <__retarget_lock_release_recursive>
 8006f1e:	4628      	mov	r0, r5
 8006f20:	bd70      	pop	{r4, r5, r6, pc}
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	da04      	bge.n	8006f30 <_puts_r+0x60>
 8006f26:	69a2      	ldr	r2, [r4, #24]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	dc17      	bgt.n	8006f5c <_puts_r+0x8c>
 8006f2c:	290a      	cmp	r1, #10
 8006f2e:	d015      	beq.n	8006f5c <_puts_r+0x8c>
 8006f30:	6823      	ldr	r3, [r4, #0]
 8006f32:	1c5a      	adds	r2, r3, #1
 8006f34:	6022      	str	r2, [r4, #0]
 8006f36:	7019      	strb	r1, [r3, #0]
 8006f38:	68a3      	ldr	r3, [r4, #8]
 8006f3a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	60a3      	str	r3, [r4, #8]
 8006f42:	2900      	cmp	r1, #0
 8006f44:	d1ed      	bne.n	8006f22 <_puts_r+0x52>
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	da11      	bge.n	8006f6e <_puts_r+0x9e>
 8006f4a:	4622      	mov	r2, r4
 8006f4c:	210a      	movs	r1, #10
 8006f4e:	4628      	mov	r0, r5
 8006f50:	f000 f893 	bl	800707a <__swbuf_r>
 8006f54:	3001      	adds	r0, #1
 8006f56:	d0d7      	beq.n	8006f08 <_puts_r+0x38>
 8006f58:	250a      	movs	r5, #10
 8006f5a:	e7d7      	b.n	8006f0c <_puts_r+0x3c>
 8006f5c:	4622      	mov	r2, r4
 8006f5e:	4628      	mov	r0, r5
 8006f60:	f000 f88b 	bl	800707a <__swbuf_r>
 8006f64:	3001      	adds	r0, #1
 8006f66:	d1e7      	bne.n	8006f38 <_puts_r+0x68>
 8006f68:	e7ce      	b.n	8006f08 <_puts_r+0x38>
 8006f6a:	3e01      	subs	r6, #1
 8006f6c:	e7e4      	b.n	8006f38 <_puts_r+0x68>
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	1c5a      	adds	r2, r3, #1
 8006f72:	6022      	str	r2, [r4, #0]
 8006f74:	220a      	movs	r2, #10
 8006f76:	701a      	strb	r2, [r3, #0]
 8006f78:	e7ee      	b.n	8006f58 <_puts_r+0x88>
	...

08006f7c <puts>:
 8006f7c:	4b02      	ldr	r3, [pc, #8]	@ (8006f88 <puts+0xc>)
 8006f7e:	4601      	mov	r1, r0
 8006f80:	6818      	ldr	r0, [r3, #0]
 8006f82:	f7ff bfa5 	b.w	8006ed0 <_puts_r>
 8006f86:	bf00      	nop
 8006f88:	20000020 	.word	0x20000020

08006f8c <sniprintf>:
 8006f8c:	b40c      	push	{r2, r3}
 8006f8e:	b530      	push	{r4, r5, lr}
 8006f90:	4b17      	ldr	r3, [pc, #92]	@ (8006ff0 <sniprintf+0x64>)
 8006f92:	1e0c      	subs	r4, r1, #0
 8006f94:	681d      	ldr	r5, [r3, #0]
 8006f96:	b09d      	sub	sp, #116	@ 0x74
 8006f98:	da08      	bge.n	8006fac <sniprintf+0x20>
 8006f9a:	238b      	movs	r3, #139	@ 0x8b
 8006f9c:	602b      	str	r3, [r5, #0]
 8006f9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006fa2:	b01d      	add	sp, #116	@ 0x74
 8006fa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fa8:	b002      	add	sp, #8
 8006faa:	4770      	bx	lr
 8006fac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006fb0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006fb4:	bf14      	ite	ne
 8006fb6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006fba:	4623      	moveq	r3, r4
 8006fbc:	9304      	str	r3, [sp, #16]
 8006fbe:	9307      	str	r3, [sp, #28]
 8006fc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006fc4:	9002      	str	r0, [sp, #8]
 8006fc6:	9006      	str	r0, [sp, #24]
 8006fc8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006fcc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006fce:	ab21      	add	r3, sp, #132	@ 0x84
 8006fd0:	a902      	add	r1, sp, #8
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	9301      	str	r3, [sp, #4]
 8006fd6:	f000 fabb 	bl	8007550 <_svfiprintf_r>
 8006fda:	1c43      	adds	r3, r0, #1
 8006fdc:	bfbc      	itt	lt
 8006fde:	238b      	movlt	r3, #139	@ 0x8b
 8006fe0:	602b      	strlt	r3, [r5, #0]
 8006fe2:	2c00      	cmp	r4, #0
 8006fe4:	d0dd      	beq.n	8006fa2 <sniprintf+0x16>
 8006fe6:	9b02      	ldr	r3, [sp, #8]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	701a      	strb	r2, [r3, #0]
 8006fec:	e7d9      	b.n	8006fa2 <sniprintf+0x16>
 8006fee:	bf00      	nop
 8006ff0:	20000020 	.word	0x20000020

08006ff4 <__sread>:
 8006ff4:	b510      	push	{r4, lr}
 8006ff6:	460c      	mov	r4, r1
 8006ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ffc:	f000 f90c 	bl	8007218 <_read_r>
 8007000:	2800      	cmp	r0, #0
 8007002:	bfab      	itete	ge
 8007004:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007006:	89a3      	ldrhlt	r3, [r4, #12]
 8007008:	181b      	addge	r3, r3, r0
 800700a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800700e:	bfac      	ite	ge
 8007010:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007012:	81a3      	strhlt	r3, [r4, #12]
 8007014:	bd10      	pop	{r4, pc}

08007016 <__swrite>:
 8007016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800701a:	461f      	mov	r7, r3
 800701c:	898b      	ldrh	r3, [r1, #12]
 800701e:	05db      	lsls	r3, r3, #23
 8007020:	4605      	mov	r5, r0
 8007022:	460c      	mov	r4, r1
 8007024:	4616      	mov	r6, r2
 8007026:	d505      	bpl.n	8007034 <__swrite+0x1e>
 8007028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800702c:	2302      	movs	r3, #2
 800702e:	2200      	movs	r2, #0
 8007030:	f000 f8e0 	bl	80071f4 <_lseek_r>
 8007034:	89a3      	ldrh	r3, [r4, #12]
 8007036:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800703a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800703e:	81a3      	strh	r3, [r4, #12]
 8007040:	4632      	mov	r2, r6
 8007042:	463b      	mov	r3, r7
 8007044:	4628      	mov	r0, r5
 8007046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800704a:	f7ff be6d 	b.w	8006d28 <_write_r>

0800704e <__sseek>:
 800704e:	b510      	push	{r4, lr}
 8007050:	460c      	mov	r4, r1
 8007052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007056:	f000 f8cd 	bl	80071f4 <_lseek_r>
 800705a:	1c43      	adds	r3, r0, #1
 800705c:	89a3      	ldrh	r3, [r4, #12]
 800705e:	bf15      	itete	ne
 8007060:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007062:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007066:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800706a:	81a3      	strheq	r3, [r4, #12]
 800706c:	bf18      	it	ne
 800706e:	81a3      	strhne	r3, [r4, #12]
 8007070:	bd10      	pop	{r4, pc}

08007072 <__sclose>:
 8007072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007076:	f000 b8ad 	b.w	80071d4 <_close_r>

0800707a <__swbuf_r>:
 800707a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707c:	460e      	mov	r6, r1
 800707e:	4614      	mov	r4, r2
 8007080:	4605      	mov	r5, r0
 8007082:	b118      	cbz	r0, 800708c <__swbuf_r+0x12>
 8007084:	6a03      	ldr	r3, [r0, #32]
 8007086:	b90b      	cbnz	r3, 800708c <__swbuf_r+0x12>
 8007088:	f7ff feec 	bl	8006e64 <__sinit>
 800708c:	69a3      	ldr	r3, [r4, #24]
 800708e:	60a3      	str	r3, [r4, #8]
 8007090:	89a3      	ldrh	r3, [r4, #12]
 8007092:	071a      	lsls	r2, r3, #28
 8007094:	d501      	bpl.n	800709a <__swbuf_r+0x20>
 8007096:	6923      	ldr	r3, [r4, #16]
 8007098:	b943      	cbnz	r3, 80070ac <__swbuf_r+0x32>
 800709a:	4621      	mov	r1, r4
 800709c:	4628      	mov	r0, r5
 800709e:	f000 f82b 	bl	80070f8 <__swsetup_r>
 80070a2:	b118      	cbz	r0, 80070ac <__swbuf_r+0x32>
 80070a4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80070a8:	4638      	mov	r0, r7
 80070aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070ac:	6823      	ldr	r3, [r4, #0]
 80070ae:	6922      	ldr	r2, [r4, #16]
 80070b0:	1a98      	subs	r0, r3, r2
 80070b2:	6963      	ldr	r3, [r4, #20]
 80070b4:	b2f6      	uxtb	r6, r6
 80070b6:	4283      	cmp	r3, r0
 80070b8:	4637      	mov	r7, r6
 80070ba:	dc05      	bgt.n	80070c8 <__swbuf_r+0x4e>
 80070bc:	4621      	mov	r1, r4
 80070be:	4628      	mov	r0, r5
 80070c0:	f000 fd54 	bl	8007b6c <_fflush_r>
 80070c4:	2800      	cmp	r0, #0
 80070c6:	d1ed      	bne.n	80070a4 <__swbuf_r+0x2a>
 80070c8:	68a3      	ldr	r3, [r4, #8]
 80070ca:	3b01      	subs	r3, #1
 80070cc:	60a3      	str	r3, [r4, #8]
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	1c5a      	adds	r2, r3, #1
 80070d2:	6022      	str	r2, [r4, #0]
 80070d4:	701e      	strb	r6, [r3, #0]
 80070d6:	6962      	ldr	r2, [r4, #20]
 80070d8:	1c43      	adds	r3, r0, #1
 80070da:	429a      	cmp	r2, r3
 80070dc:	d004      	beq.n	80070e8 <__swbuf_r+0x6e>
 80070de:	89a3      	ldrh	r3, [r4, #12]
 80070e0:	07db      	lsls	r3, r3, #31
 80070e2:	d5e1      	bpl.n	80070a8 <__swbuf_r+0x2e>
 80070e4:	2e0a      	cmp	r6, #10
 80070e6:	d1df      	bne.n	80070a8 <__swbuf_r+0x2e>
 80070e8:	4621      	mov	r1, r4
 80070ea:	4628      	mov	r0, r5
 80070ec:	f000 fd3e 	bl	8007b6c <_fflush_r>
 80070f0:	2800      	cmp	r0, #0
 80070f2:	d0d9      	beq.n	80070a8 <__swbuf_r+0x2e>
 80070f4:	e7d6      	b.n	80070a4 <__swbuf_r+0x2a>
	...

080070f8 <__swsetup_r>:
 80070f8:	b538      	push	{r3, r4, r5, lr}
 80070fa:	4b29      	ldr	r3, [pc, #164]	@ (80071a0 <__swsetup_r+0xa8>)
 80070fc:	4605      	mov	r5, r0
 80070fe:	6818      	ldr	r0, [r3, #0]
 8007100:	460c      	mov	r4, r1
 8007102:	b118      	cbz	r0, 800710c <__swsetup_r+0x14>
 8007104:	6a03      	ldr	r3, [r0, #32]
 8007106:	b90b      	cbnz	r3, 800710c <__swsetup_r+0x14>
 8007108:	f7ff feac 	bl	8006e64 <__sinit>
 800710c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007110:	0719      	lsls	r1, r3, #28
 8007112:	d422      	bmi.n	800715a <__swsetup_r+0x62>
 8007114:	06da      	lsls	r2, r3, #27
 8007116:	d407      	bmi.n	8007128 <__swsetup_r+0x30>
 8007118:	2209      	movs	r2, #9
 800711a:	602a      	str	r2, [r5, #0]
 800711c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007120:	81a3      	strh	r3, [r4, #12]
 8007122:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007126:	e033      	b.n	8007190 <__swsetup_r+0x98>
 8007128:	0758      	lsls	r0, r3, #29
 800712a:	d512      	bpl.n	8007152 <__swsetup_r+0x5a>
 800712c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800712e:	b141      	cbz	r1, 8007142 <__swsetup_r+0x4a>
 8007130:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007134:	4299      	cmp	r1, r3
 8007136:	d002      	beq.n	800713e <__swsetup_r+0x46>
 8007138:	4628      	mov	r0, r5
 800713a:	f000 f8b5 	bl	80072a8 <_free_r>
 800713e:	2300      	movs	r3, #0
 8007140:	6363      	str	r3, [r4, #52]	@ 0x34
 8007142:	89a3      	ldrh	r3, [r4, #12]
 8007144:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007148:	81a3      	strh	r3, [r4, #12]
 800714a:	2300      	movs	r3, #0
 800714c:	6063      	str	r3, [r4, #4]
 800714e:	6923      	ldr	r3, [r4, #16]
 8007150:	6023      	str	r3, [r4, #0]
 8007152:	89a3      	ldrh	r3, [r4, #12]
 8007154:	f043 0308 	orr.w	r3, r3, #8
 8007158:	81a3      	strh	r3, [r4, #12]
 800715a:	6923      	ldr	r3, [r4, #16]
 800715c:	b94b      	cbnz	r3, 8007172 <__swsetup_r+0x7a>
 800715e:	89a3      	ldrh	r3, [r4, #12]
 8007160:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007168:	d003      	beq.n	8007172 <__swsetup_r+0x7a>
 800716a:	4621      	mov	r1, r4
 800716c:	4628      	mov	r0, r5
 800716e:	f000 fd4b 	bl	8007c08 <__smakebuf_r>
 8007172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007176:	f013 0201 	ands.w	r2, r3, #1
 800717a:	d00a      	beq.n	8007192 <__swsetup_r+0x9a>
 800717c:	2200      	movs	r2, #0
 800717e:	60a2      	str	r2, [r4, #8]
 8007180:	6962      	ldr	r2, [r4, #20]
 8007182:	4252      	negs	r2, r2
 8007184:	61a2      	str	r2, [r4, #24]
 8007186:	6922      	ldr	r2, [r4, #16]
 8007188:	b942      	cbnz	r2, 800719c <__swsetup_r+0xa4>
 800718a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800718e:	d1c5      	bne.n	800711c <__swsetup_r+0x24>
 8007190:	bd38      	pop	{r3, r4, r5, pc}
 8007192:	0799      	lsls	r1, r3, #30
 8007194:	bf58      	it	pl
 8007196:	6962      	ldrpl	r2, [r4, #20]
 8007198:	60a2      	str	r2, [r4, #8]
 800719a:	e7f4      	b.n	8007186 <__swsetup_r+0x8e>
 800719c:	2000      	movs	r0, #0
 800719e:	e7f7      	b.n	8007190 <__swsetup_r+0x98>
 80071a0:	20000020 	.word	0x20000020

080071a4 <memcmp>:
 80071a4:	b510      	push	{r4, lr}
 80071a6:	3901      	subs	r1, #1
 80071a8:	4402      	add	r2, r0
 80071aa:	4290      	cmp	r0, r2
 80071ac:	d101      	bne.n	80071b2 <memcmp+0xe>
 80071ae:	2000      	movs	r0, #0
 80071b0:	e005      	b.n	80071be <memcmp+0x1a>
 80071b2:	7803      	ldrb	r3, [r0, #0]
 80071b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80071b8:	42a3      	cmp	r3, r4
 80071ba:	d001      	beq.n	80071c0 <memcmp+0x1c>
 80071bc:	1b18      	subs	r0, r3, r4
 80071be:	bd10      	pop	{r4, pc}
 80071c0:	3001      	adds	r0, #1
 80071c2:	e7f2      	b.n	80071aa <memcmp+0x6>

080071c4 <memset>:
 80071c4:	4402      	add	r2, r0
 80071c6:	4603      	mov	r3, r0
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d100      	bne.n	80071ce <memset+0xa>
 80071cc:	4770      	bx	lr
 80071ce:	f803 1b01 	strb.w	r1, [r3], #1
 80071d2:	e7f9      	b.n	80071c8 <memset+0x4>

080071d4 <_close_r>:
 80071d4:	b538      	push	{r3, r4, r5, lr}
 80071d6:	4d06      	ldr	r5, [pc, #24]	@ (80071f0 <_close_r+0x1c>)
 80071d8:	2300      	movs	r3, #0
 80071da:	4604      	mov	r4, r0
 80071dc:	4608      	mov	r0, r1
 80071de:	602b      	str	r3, [r5, #0]
 80071e0:	f7f9 fd49 	bl	8000c76 <_close>
 80071e4:	1c43      	adds	r3, r0, #1
 80071e6:	d102      	bne.n	80071ee <_close_r+0x1a>
 80071e8:	682b      	ldr	r3, [r5, #0]
 80071ea:	b103      	cbz	r3, 80071ee <_close_r+0x1a>
 80071ec:	6023      	str	r3, [r4, #0]
 80071ee:	bd38      	pop	{r3, r4, r5, pc}
 80071f0:	2000d234 	.word	0x2000d234

080071f4 <_lseek_r>:
 80071f4:	b538      	push	{r3, r4, r5, lr}
 80071f6:	4d07      	ldr	r5, [pc, #28]	@ (8007214 <_lseek_r+0x20>)
 80071f8:	4604      	mov	r4, r0
 80071fa:	4608      	mov	r0, r1
 80071fc:	4611      	mov	r1, r2
 80071fe:	2200      	movs	r2, #0
 8007200:	602a      	str	r2, [r5, #0]
 8007202:	461a      	mov	r2, r3
 8007204:	f7f9 fd5e 	bl	8000cc4 <_lseek>
 8007208:	1c43      	adds	r3, r0, #1
 800720a:	d102      	bne.n	8007212 <_lseek_r+0x1e>
 800720c:	682b      	ldr	r3, [r5, #0]
 800720e:	b103      	cbz	r3, 8007212 <_lseek_r+0x1e>
 8007210:	6023      	str	r3, [r4, #0]
 8007212:	bd38      	pop	{r3, r4, r5, pc}
 8007214:	2000d234 	.word	0x2000d234

08007218 <_read_r>:
 8007218:	b538      	push	{r3, r4, r5, lr}
 800721a:	4d07      	ldr	r5, [pc, #28]	@ (8007238 <_read_r+0x20>)
 800721c:	4604      	mov	r4, r0
 800721e:	4608      	mov	r0, r1
 8007220:	4611      	mov	r1, r2
 8007222:	2200      	movs	r2, #0
 8007224:	602a      	str	r2, [r5, #0]
 8007226:	461a      	mov	r2, r3
 8007228:	f7f9 fd08 	bl	8000c3c <_read>
 800722c:	1c43      	adds	r3, r0, #1
 800722e:	d102      	bne.n	8007236 <_read_r+0x1e>
 8007230:	682b      	ldr	r3, [r5, #0]
 8007232:	b103      	cbz	r3, 8007236 <_read_r+0x1e>
 8007234:	6023      	str	r3, [r4, #0]
 8007236:	bd38      	pop	{r3, r4, r5, pc}
 8007238:	2000d234 	.word	0x2000d234

0800723c <__libc_init_array>:
 800723c:	b570      	push	{r4, r5, r6, lr}
 800723e:	4d0d      	ldr	r5, [pc, #52]	@ (8007274 <__libc_init_array+0x38>)
 8007240:	4c0d      	ldr	r4, [pc, #52]	@ (8007278 <__libc_init_array+0x3c>)
 8007242:	1b64      	subs	r4, r4, r5
 8007244:	10a4      	asrs	r4, r4, #2
 8007246:	2600      	movs	r6, #0
 8007248:	42a6      	cmp	r6, r4
 800724a:	d109      	bne.n	8007260 <__libc_init_array+0x24>
 800724c:	4d0b      	ldr	r5, [pc, #44]	@ (800727c <__libc_init_array+0x40>)
 800724e:	4c0c      	ldr	r4, [pc, #48]	@ (8007280 <__libc_init_array+0x44>)
 8007250:	f000 fda6 	bl	8007da0 <_init>
 8007254:	1b64      	subs	r4, r4, r5
 8007256:	10a4      	asrs	r4, r4, #2
 8007258:	2600      	movs	r6, #0
 800725a:	42a6      	cmp	r6, r4
 800725c:	d105      	bne.n	800726a <__libc_init_array+0x2e>
 800725e:	bd70      	pop	{r4, r5, r6, pc}
 8007260:	f855 3b04 	ldr.w	r3, [r5], #4
 8007264:	4798      	blx	r3
 8007266:	3601      	adds	r6, #1
 8007268:	e7ee      	b.n	8007248 <__libc_init_array+0xc>
 800726a:	f855 3b04 	ldr.w	r3, [r5], #4
 800726e:	4798      	blx	r3
 8007270:	3601      	adds	r6, #1
 8007272:	e7f2      	b.n	800725a <__libc_init_array+0x1e>
 8007274:	08007f74 	.word	0x08007f74
 8007278:	08007f74 	.word	0x08007f74
 800727c:	08007f74 	.word	0x08007f74
 8007280:	08007f78 	.word	0x08007f78

08007284 <__retarget_lock_init_recursive>:
 8007284:	4770      	bx	lr

08007286 <__retarget_lock_acquire_recursive>:
 8007286:	4770      	bx	lr

08007288 <__retarget_lock_release_recursive>:
 8007288:	4770      	bx	lr

0800728a <memcpy>:
 800728a:	440a      	add	r2, r1
 800728c:	4291      	cmp	r1, r2
 800728e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007292:	d100      	bne.n	8007296 <memcpy+0xc>
 8007294:	4770      	bx	lr
 8007296:	b510      	push	{r4, lr}
 8007298:	f811 4b01 	ldrb.w	r4, [r1], #1
 800729c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072a0:	4291      	cmp	r1, r2
 80072a2:	d1f9      	bne.n	8007298 <memcpy+0xe>
 80072a4:	bd10      	pop	{r4, pc}
	...

080072a8 <_free_r>:
 80072a8:	b538      	push	{r3, r4, r5, lr}
 80072aa:	4605      	mov	r5, r0
 80072ac:	2900      	cmp	r1, #0
 80072ae:	d041      	beq.n	8007334 <_free_r+0x8c>
 80072b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072b4:	1f0c      	subs	r4, r1, #4
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	bfb8      	it	lt
 80072ba:	18e4      	addlt	r4, r4, r3
 80072bc:	f000 f8e0 	bl	8007480 <__malloc_lock>
 80072c0:	4a1d      	ldr	r2, [pc, #116]	@ (8007338 <_free_r+0x90>)
 80072c2:	6813      	ldr	r3, [r2, #0]
 80072c4:	b933      	cbnz	r3, 80072d4 <_free_r+0x2c>
 80072c6:	6063      	str	r3, [r4, #4]
 80072c8:	6014      	str	r4, [r2, #0]
 80072ca:	4628      	mov	r0, r5
 80072cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072d0:	f000 b8dc 	b.w	800748c <__malloc_unlock>
 80072d4:	42a3      	cmp	r3, r4
 80072d6:	d908      	bls.n	80072ea <_free_r+0x42>
 80072d8:	6820      	ldr	r0, [r4, #0]
 80072da:	1821      	adds	r1, r4, r0
 80072dc:	428b      	cmp	r3, r1
 80072de:	bf01      	itttt	eq
 80072e0:	6819      	ldreq	r1, [r3, #0]
 80072e2:	685b      	ldreq	r3, [r3, #4]
 80072e4:	1809      	addeq	r1, r1, r0
 80072e6:	6021      	streq	r1, [r4, #0]
 80072e8:	e7ed      	b.n	80072c6 <_free_r+0x1e>
 80072ea:	461a      	mov	r2, r3
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	b10b      	cbz	r3, 80072f4 <_free_r+0x4c>
 80072f0:	42a3      	cmp	r3, r4
 80072f2:	d9fa      	bls.n	80072ea <_free_r+0x42>
 80072f4:	6811      	ldr	r1, [r2, #0]
 80072f6:	1850      	adds	r0, r2, r1
 80072f8:	42a0      	cmp	r0, r4
 80072fa:	d10b      	bne.n	8007314 <_free_r+0x6c>
 80072fc:	6820      	ldr	r0, [r4, #0]
 80072fe:	4401      	add	r1, r0
 8007300:	1850      	adds	r0, r2, r1
 8007302:	4283      	cmp	r3, r0
 8007304:	6011      	str	r1, [r2, #0]
 8007306:	d1e0      	bne.n	80072ca <_free_r+0x22>
 8007308:	6818      	ldr	r0, [r3, #0]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	6053      	str	r3, [r2, #4]
 800730e:	4408      	add	r0, r1
 8007310:	6010      	str	r0, [r2, #0]
 8007312:	e7da      	b.n	80072ca <_free_r+0x22>
 8007314:	d902      	bls.n	800731c <_free_r+0x74>
 8007316:	230c      	movs	r3, #12
 8007318:	602b      	str	r3, [r5, #0]
 800731a:	e7d6      	b.n	80072ca <_free_r+0x22>
 800731c:	6820      	ldr	r0, [r4, #0]
 800731e:	1821      	adds	r1, r4, r0
 8007320:	428b      	cmp	r3, r1
 8007322:	bf04      	itt	eq
 8007324:	6819      	ldreq	r1, [r3, #0]
 8007326:	685b      	ldreq	r3, [r3, #4]
 8007328:	6063      	str	r3, [r4, #4]
 800732a:	bf04      	itt	eq
 800732c:	1809      	addeq	r1, r1, r0
 800732e:	6021      	streq	r1, [r4, #0]
 8007330:	6054      	str	r4, [r2, #4]
 8007332:	e7ca      	b.n	80072ca <_free_r+0x22>
 8007334:	bd38      	pop	{r3, r4, r5, pc}
 8007336:	bf00      	nop
 8007338:	2000d240 	.word	0x2000d240

0800733c <sbrk_aligned>:
 800733c:	b570      	push	{r4, r5, r6, lr}
 800733e:	4e0f      	ldr	r6, [pc, #60]	@ (800737c <sbrk_aligned+0x40>)
 8007340:	460c      	mov	r4, r1
 8007342:	6831      	ldr	r1, [r6, #0]
 8007344:	4605      	mov	r5, r0
 8007346:	b911      	cbnz	r1, 800734e <sbrk_aligned+0x12>
 8007348:	f000 fcd6 	bl	8007cf8 <_sbrk_r>
 800734c:	6030      	str	r0, [r6, #0]
 800734e:	4621      	mov	r1, r4
 8007350:	4628      	mov	r0, r5
 8007352:	f000 fcd1 	bl	8007cf8 <_sbrk_r>
 8007356:	1c43      	adds	r3, r0, #1
 8007358:	d103      	bne.n	8007362 <sbrk_aligned+0x26>
 800735a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800735e:	4620      	mov	r0, r4
 8007360:	bd70      	pop	{r4, r5, r6, pc}
 8007362:	1cc4      	adds	r4, r0, #3
 8007364:	f024 0403 	bic.w	r4, r4, #3
 8007368:	42a0      	cmp	r0, r4
 800736a:	d0f8      	beq.n	800735e <sbrk_aligned+0x22>
 800736c:	1a21      	subs	r1, r4, r0
 800736e:	4628      	mov	r0, r5
 8007370:	f000 fcc2 	bl	8007cf8 <_sbrk_r>
 8007374:	3001      	adds	r0, #1
 8007376:	d1f2      	bne.n	800735e <sbrk_aligned+0x22>
 8007378:	e7ef      	b.n	800735a <sbrk_aligned+0x1e>
 800737a:	bf00      	nop
 800737c:	2000d23c 	.word	0x2000d23c

08007380 <_malloc_r>:
 8007380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007384:	1ccd      	adds	r5, r1, #3
 8007386:	f025 0503 	bic.w	r5, r5, #3
 800738a:	3508      	adds	r5, #8
 800738c:	2d0c      	cmp	r5, #12
 800738e:	bf38      	it	cc
 8007390:	250c      	movcc	r5, #12
 8007392:	2d00      	cmp	r5, #0
 8007394:	4606      	mov	r6, r0
 8007396:	db01      	blt.n	800739c <_malloc_r+0x1c>
 8007398:	42a9      	cmp	r1, r5
 800739a:	d904      	bls.n	80073a6 <_malloc_r+0x26>
 800739c:	230c      	movs	r3, #12
 800739e:	6033      	str	r3, [r6, #0]
 80073a0:	2000      	movs	r0, #0
 80073a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800747c <_malloc_r+0xfc>
 80073aa:	f000 f869 	bl	8007480 <__malloc_lock>
 80073ae:	f8d8 3000 	ldr.w	r3, [r8]
 80073b2:	461c      	mov	r4, r3
 80073b4:	bb44      	cbnz	r4, 8007408 <_malloc_r+0x88>
 80073b6:	4629      	mov	r1, r5
 80073b8:	4630      	mov	r0, r6
 80073ba:	f7ff ffbf 	bl	800733c <sbrk_aligned>
 80073be:	1c43      	adds	r3, r0, #1
 80073c0:	4604      	mov	r4, r0
 80073c2:	d158      	bne.n	8007476 <_malloc_r+0xf6>
 80073c4:	f8d8 4000 	ldr.w	r4, [r8]
 80073c8:	4627      	mov	r7, r4
 80073ca:	2f00      	cmp	r7, #0
 80073cc:	d143      	bne.n	8007456 <_malloc_r+0xd6>
 80073ce:	2c00      	cmp	r4, #0
 80073d0:	d04b      	beq.n	800746a <_malloc_r+0xea>
 80073d2:	6823      	ldr	r3, [r4, #0]
 80073d4:	4639      	mov	r1, r7
 80073d6:	4630      	mov	r0, r6
 80073d8:	eb04 0903 	add.w	r9, r4, r3
 80073dc:	f000 fc8c 	bl	8007cf8 <_sbrk_r>
 80073e0:	4581      	cmp	r9, r0
 80073e2:	d142      	bne.n	800746a <_malloc_r+0xea>
 80073e4:	6821      	ldr	r1, [r4, #0]
 80073e6:	1a6d      	subs	r5, r5, r1
 80073e8:	4629      	mov	r1, r5
 80073ea:	4630      	mov	r0, r6
 80073ec:	f7ff ffa6 	bl	800733c <sbrk_aligned>
 80073f0:	3001      	adds	r0, #1
 80073f2:	d03a      	beq.n	800746a <_malloc_r+0xea>
 80073f4:	6823      	ldr	r3, [r4, #0]
 80073f6:	442b      	add	r3, r5
 80073f8:	6023      	str	r3, [r4, #0]
 80073fa:	f8d8 3000 	ldr.w	r3, [r8]
 80073fe:	685a      	ldr	r2, [r3, #4]
 8007400:	bb62      	cbnz	r2, 800745c <_malloc_r+0xdc>
 8007402:	f8c8 7000 	str.w	r7, [r8]
 8007406:	e00f      	b.n	8007428 <_malloc_r+0xa8>
 8007408:	6822      	ldr	r2, [r4, #0]
 800740a:	1b52      	subs	r2, r2, r5
 800740c:	d420      	bmi.n	8007450 <_malloc_r+0xd0>
 800740e:	2a0b      	cmp	r2, #11
 8007410:	d917      	bls.n	8007442 <_malloc_r+0xc2>
 8007412:	1961      	adds	r1, r4, r5
 8007414:	42a3      	cmp	r3, r4
 8007416:	6025      	str	r5, [r4, #0]
 8007418:	bf18      	it	ne
 800741a:	6059      	strne	r1, [r3, #4]
 800741c:	6863      	ldr	r3, [r4, #4]
 800741e:	bf08      	it	eq
 8007420:	f8c8 1000 	streq.w	r1, [r8]
 8007424:	5162      	str	r2, [r4, r5]
 8007426:	604b      	str	r3, [r1, #4]
 8007428:	4630      	mov	r0, r6
 800742a:	f000 f82f 	bl	800748c <__malloc_unlock>
 800742e:	f104 000b 	add.w	r0, r4, #11
 8007432:	1d23      	adds	r3, r4, #4
 8007434:	f020 0007 	bic.w	r0, r0, #7
 8007438:	1ac2      	subs	r2, r0, r3
 800743a:	bf1c      	itt	ne
 800743c:	1a1b      	subne	r3, r3, r0
 800743e:	50a3      	strne	r3, [r4, r2]
 8007440:	e7af      	b.n	80073a2 <_malloc_r+0x22>
 8007442:	6862      	ldr	r2, [r4, #4]
 8007444:	42a3      	cmp	r3, r4
 8007446:	bf0c      	ite	eq
 8007448:	f8c8 2000 	streq.w	r2, [r8]
 800744c:	605a      	strne	r2, [r3, #4]
 800744e:	e7eb      	b.n	8007428 <_malloc_r+0xa8>
 8007450:	4623      	mov	r3, r4
 8007452:	6864      	ldr	r4, [r4, #4]
 8007454:	e7ae      	b.n	80073b4 <_malloc_r+0x34>
 8007456:	463c      	mov	r4, r7
 8007458:	687f      	ldr	r7, [r7, #4]
 800745a:	e7b6      	b.n	80073ca <_malloc_r+0x4a>
 800745c:	461a      	mov	r2, r3
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	42a3      	cmp	r3, r4
 8007462:	d1fb      	bne.n	800745c <_malloc_r+0xdc>
 8007464:	2300      	movs	r3, #0
 8007466:	6053      	str	r3, [r2, #4]
 8007468:	e7de      	b.n	8007428 <_malloc_r+0xa8>
 800746a:	230c      	movs	r3, #12
 800746c:	6033      	str	r3, [r6, #0]
 800746e:	4630      	mov	r0, r6
 8007470:	f000 f80c 	bl	800748c <__malloc_unlock>
 8007474:	e794      	b.n	80073a0 <_malloc_r+0x20>
 8007476:	6005      	str	r5, [r0, #0]
 8007478:	e7d6      	b.n	8007428 <_malloc_r+0xa8>
 800747a:	bf00      	nop
 800747c:	2000d240 	.word	0x2000d240

08007480 <__malloc_lock>:
 8007480:	4801      	ldr	r0, [pc, #4]	@ (8007488 <__malloc_lock+0x8>)
 8007482:	f7ff bf00 	b.w	8007286 <__retarget_lock_acquire_recursive>
 8007486:	bf00      	nop
 8007488:	2000d238 	.word	0x2000d238

0800748c <__malloc_unlock>:
 800748c:	4801      	ldr	r0, [pc, #4]	@ (8007494 <__malloc_unlock+0x8>)
 800748e:	f7ff befb 	b.w	8007288 <__retarget_lock_release_recursive>
 8007492:	bf00      	nop
 8007494:	2000d238 	.word	0x2000d238

08007498 <__ssputs_r>:
 8007498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800749c:	688e      	ldr	r6, [r1, #8]
 800749e:	461f      	mov	r7, r3
 80074a0:	42be      	cmp	r6, r7
 80074a2:	680b      	ldr	r3, [r1, #0]
 80074a4:	4682      	mov	sl, r0
 80074a6:	460c      	mov	r4, r1
 80074a8:	4690      	mov	r8, r2
 80074aa:	d82d      	bhi.n	8007508 <__ssputs_r+0x70>
 80074ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80074b4:	d026      	beq.n	8007504 <__ssputs_r+0x6c>
 80074b6:	6965      	ldr	r5, [r4, #20]
 80074b8:	6909      	ldr	r1, [r1, #16]
 80074ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074be:	eba3 0901 	sub.w	r9, r3, r1
 80074c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074c6:	1c7b      	adds	r3, r7, #1
 80074c8:	444b      	add	r3, r9
 80074ca:	106d      	asrs	r5, r5, #1
 80074cc:	429d      	cmp	r5, r3
 80074ce:	bf38      	it	cc
 80074d0:	461d      	movcc	r5, r3
 80074d2:	0553      	lsls	r3, r2, #21
 80074d4:	d527      	bpl.n	8007526 <__ssputs_r+0x8e>
 80074d6:	4629      	mov	r1, r5
 80074d8:	f7ff ff52 	bl	8007380 <_malloc_r>
 80074dc:	4606      	mov	r6, r0
 80074de:	b360      	cbz	r0, 800753a <__ssputs_r+0xa2>
 80074e0:	6921      	ldr	r1, [r4, #16]
 80074e2:	464a      	mov	r2, r9
 80074e4:	f7ff fed1 	bl	800728a <memcpy>
 80074e8:	89a3      	ldrh	r3, [r4, #12]
 80074ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80074ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074f2:	81a3      	strh	r3, [r4, #12]
 80074f4:	6126      	str	r6, [r4, #16]
 80074f6:	6165      	str	r5, [r4, #20]
 80074f8:	444e      	add	r6, r9
 80074fa:	eba5 0509 	sub.w	r5, r5, r9
 80074fe:	6026      	str	r6, [r4, #0]
 8007500:	60a5      	str	r5, [r4, #8]
 8007502:	463e      	mov	r6, r7
 8007504:	42be      	cmp	r6, r7
 8007506:	d900      	bls.n	800750a <__ssputs_r+0x72>
 8007508:	463e      	mov	r6, r7
 800750a:	6820      	ldr	r0, [r4, #0]
 800750c:	4632      	mov	r2, r6
 800750e:	4641      	mov	r1, r8
 8007510:	f000 fbb6 	bl	8007c80 <memmove>
 8007514:	68a3      	ldr	r3, [r4, #8]
 8007516:	1b9b      	subs	r3, r3, r6
 8007518:	60a3      	str	r3, [r4, #8]
 800751a:	6823      	ldr	r3, [r4, #0]
 800751c:	4433      	add	r3, r6
 800751e:	6023      	str	r3, [r4, #0]
 8007520:	2000      	movs	r0, #0
 8007522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007526:	462a      	mov	r2, r5
 8007528:	f000 fbf6 	bl	8007d18 <_realloc_r>
 800752c:	4606      	mov	r6, r0
 800752e:	2800      	cmp	r0, #0
 8007530:	d1e0      	bne.n	80074f4 <__ssputs_r+0x5c>
 8007532:	6921      	ldr	r1, [r4, #16]
 8007534:	4650      	mov	r0, sl
 8007536:	f7ff feb7 	bl	80072a8 <_free_r>
 800753a:	230c      	movs	r3, #12
 800753c:	f8ca 3000 	str.w	r3, [sl]
 8007540:	89a3      	ldrh	r3, [r4, #12]
 8007542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007546:	81a3      	strh	r3, [r4, #12]
 8007548:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800754c:	e7e9      	b.n	8007522 <__ssputs_r+0x8a>
	...

08007550 <_svfiprintf_r>:
 8007550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007554:	4698      	mov	r8, r3
 8007556:	898b      	ldrh	r3, [r1, #12]
 8007558:	061b      	lsls	r3, r3, #24
 800755a:	b09d      	sub	sp, #116	@ 0x74
 800755c:	4607      	mov	r7, r0
 800755e:	460d      	mov	r5, r1
 8007560:	4614      	mov	r4, r2
 8007562:	d510      	bpl.n	8007586 <_svfiprintf_r+0x36>
 8007564:	690b      	ldr	r3, [r1, #16]
 8007566:	b973      	cbnz	r3, 8007586 <_svfiprintf_r+0x36>
 8007568:	2140      	movs	r1, #64	@ 0x40
 800756a:	f7ff ff09 	bl	8007380 <_malloc_r>
 800756e:	6028      	str	r0, [r5, #0]
 8007570:	6128      	str	r0, [r5, #16]
 8007572:	b930      	cbnz	r0, 8007582 <_svfiprintf_r+0x32>
 8007574:	230c      	movs	r3, #12
 8007576:	603b      	str	r3, [r7, #0]
 8007578:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800757c:	b01d      	add	sp, #116	@ 0x74
 800757e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007582:	2340      	movs	r3, #64	@ 0x40
 8007584:	616b      	str	r3, [r5, #20]
 8007586:	2300      	movs	r3, #0
 8007588:	9309      	str	r3, [sp, #36]	@ 0x24
 800758a:	2320      	movs	r3, #32
 800758c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007590:	f8cd 800c 	str.w	r8, [sp, #12]
 8007594:	2330      	movs	r3, #48	@ 0x30
 8007596:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007734 <_svfiprintf_r+0x1e4>
 800759a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800759e:	f04f 0901 	mov.w	r9, #1
 80075a2:	4623      	mov	r3, r4
 80075a4:	469a      	mov	sl, r3
 80075a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075aa:	b10a      	cbz	r2, 80075b0 <_svfiprintf_r+0x60>
 80075ac:	2a25      	cmp	r2, #37	@ 0x25
 80075ae:	d1f9      	bne.n	80075a4 <_svfiprintf_r+0x54>
 80075b0:	ebba 0b04 	subs.w	fp, sl, r4
 80075b4:	d00b      	beq.n	80075ce <_svfiprintf_r+0x7e>
 80075b6:	465b      	mov	r3, fp
 80075b8:	4622      	mov	r2, r4
 80075ba:	4629      	mov	r1, r5
 80075bc:	4638      	mov	r0, r7
 80075be:	f7ff ff6b 	bl	8007498 <__ssputs_r>
 80075c2:	3001      	adds	r0, #1
 80075c4:	f000 80a7 	beq.w	8007716 <_svfiprintf_r+0x1c6>
 80075c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075ca:	445a      	add	r2, fp
 80075cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80075ce:	f89a 3000 	ldrb.w	r3, [sl]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 809f 	beq.w	8007716 <_svfiprintf_r+0x1c6>
 80075d8:	2300      	movs	r3, #0
 80075da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80075de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075e2:	f10a 0a01 	add.w	sl, sl, #1
 80075e6:	9304      	str	r3, [sp, #16]
 80075e8:	9307      	str	r3, [sp, #28]
 80075ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80075ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80075f0:	4654      	mov	r4, sl
 80075f2:	2205      	movs	r2, #5
 80075f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075f8:	484e      	ldr	r0, [pc, #312]	@ (8007734 <_svfiprintf_r+0x1e4>)
 80075fa:	f7f8 fe71 	bl	80002e0 <memchr>
 80075fe:	9a04      	ldr	r2, [sp, #16]
 8007600:	b9d8      	cbnz	r0, 800763a <_svfiprintf_r+0xea>
 8007602:	06d0      	lsls	r0, r2, #27
 8007604:	bf44      	itt	mi
 8007606:	2320      	movmi	r3, #32
 8007608:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800760c:	0711      	lsls	r1, r2, #28
 800760e:	bf44      	itt	mi
 8007610:	232b      	movmi	r3, #43	@ 0x2b
 8007612:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007616:	f89a 3000 	ldrb.w	r3, [sl]
 800761a:	2b2a      	cmp	r3, #42	@ 0x2a
 800761c:	d015      	beq.n	800764a <_svfiprintf_r+0xfa>
 800761e:	9a07      	ldr	r2, [sp, #28]
 8007620:	4654      	mov	r4, sl
 8007622:	2000      	movs	r0, #0
 8007624:	f04f 0c0a 	mov.w	ip, #10
 8007628:	4621      	mov	r1, r4
 800762a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800762e:	3b30      	subs	r3, #48	@ 0x30
 8007630:	2b09      	cmp	r3, #9
 8007632:	d94b      	bls.n	80076cc <_svfiprintf_r+0x17c>
 8007634:	b1b0      	cbz	r0, 8007664 <_svfiprintf_r+0x114>
 8007636:	9207      	str	r2, [sp, #28]
 8007638:	e014      	b.n	8007664 <_svfiprintf_r+0x114>
 800763a:	eba0 0308 	sub.w	r3, r0, r8
 800763e:	fa09 f303 	lsl.w	r3, r9, r3
 8007642:	4313      	orrs	r3, r2
 8007644:	9304      	str	r3, [sp, #16]
 8007646:	46a2      	mov	sl, r4
 8007648:	e7d2      	b.n	80075f0 <_svfiprintf_r+0xa0>
 800764a:	9b03      	ldr	r3, [sp, #12]
 800764c:	1d19      	adds	r1, r3, #4
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	9103      	str	r1, [sp, #12]
 8007652:	2b00      	cmp	r3, #0
 8007654:	bfbb      	ittet	lt
 8007656:	425b      	neglt	r3, r3
 8007658:	f042 0202 	orrlt.w	r2, r2, #2
 800765c:	9307      	strge	r3, [sp, #28]
 800765e:	9307      	strlt	r3, [sp, #28]
 8007660:	bfb8      	it	lt
 8007662:	9204      	strlt	r2, [sp, #16]
 8007664:	7823      	ldrb	r3, [r4, #0]
 8007666:	2b2e      	cmp	r3, #46	@ 0x2e
 8007668:	d10a      	bne.n	8007680 <_svfiprintf_r+0x130>
 800766a:	7863      	ldrb	r3, [r4, #1]
 800766c:	2b2a      	cmp	r3, #42	@ 0x2a
 800766e:	d132      	bne.n	80076d6 <_svfiprintf_r+0x186>
 8007670:	9b03      	ldr	r3, [sp, #12]
 8007672:	1d1a      	adds	r2, r3, #4
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	9203      	str	r2, [sp, #12]
 8007678:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800767c:	3402      	adds	r4, #2
 800767e:	9305      	str	r3, [sp, #20]
 8007680:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007744 <_svfiprintf_r+0x1f4>
 8007684:	7821      	ldrb	r1, [r4, #0]
 8007686:	2203      	movs	r2, #3
 8007688:	4650      	mov	r0, sl
 800768a:	f7f8 fe29 	bl	80002e0 <memchr>
 800768e:	b138      	cbz	r0, 80076a0 <_svfiprintf_r+0x150>
 8007690:	9b04      	ldr	r3, [sp, #16]
 8007692:	eba0 000a 	sub.w	r0, r0, sl
 8007696:	2240      	movs	r2, #64	@ 0x40
 8007698:	4082      	lsls	r2, r0
 800769a:	4313      	orrs	r3, r2
 800769c:	3401      	adds	r4, #1
 800769e:	9304      	str	r3, [sp, #16]
 80076a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076a4:	4824      	ldr	r0, [pc, #144]	@ (8007738 <_svfiprintf_r+0x1e8>)
 80076a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80076aa:	2206      	movs	r2, #6
 80076ac:	f7f8 fe18 	bl	80002e0 <memchr>
 80076b0:	2800      	cmp	r0, #0
 80076b2:	d036      	beq.n	8007722 <_svfiprintf_r+0x1d2>
 80076b4:	4b21      	ldr	r3, [pc, #132]	@ (800773c <_svfiprintf_r+0x1ec>)
 80076b6:	bb1b      	cbnz	r3, 8007700 <_svfiprintf_r+0x1b0>
 80076b8:	9b03      	ldr	r3, [sp, #12]
 80076ba:	3307      	adds	r3, #7
 80076bc:	f023 0307 	bic.w	r3, r3, #7
 80076c0:	3308      	adds	r3, #8
 80076c2:	9303      	str	r3, [sp, #12]
 80076c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076c6:	4433      	add	r3, r6
 80076c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80076ca:	e76a      	b.n	80075a2 <_svfiprintf_r+0x52>
 80076cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80076d0:	460c      	mov	r4, r1
 80076d2:	2001      	movs	r0, #1
 80076d4:	e7a8      	b.n	8007628 <_svfiprintf_r+0xd8>
 80076d6:	2300      	movs	r3, #0
 80076d8:	3401      	adds	r4, #1
 80076da:	9305      	str	r3, [sp, #20]
 80076dc:	4619      	mov	r1, r3
 80076de:	f04f 0c0a 	mov.w	ip, #10
 80076e2:	4620      	mov	r0, r4
 80076e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076e8:	3a30      	subs	r2, #48	@ 0x30
 80076ea:	2a09      	cmp	r2, #9
 80076ec:	d903      	bls.n	80076f6 <_svfiprintf_r+0x1a6>
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d0c6      	beq.n	8007680 <_svfiprintf_r+0x130>
 80076f2:	9105      	str	r1, [sp, #20]
 80076f4:	e7c4      	b.n	8007680 <_svfiprintf_r+0x130>
 80076f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80076fa:	4604      	mov	r4, r0
 80076fc:	2301      	movs	r3, #1
 80076fe:	e7f0      	b.n	80076e2 <_svfiprintf_r+0x192>
 8007700:	ab03      	add	r3, sp, #12
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	462a      	mov	r2, r5
 8007706:	4b0e      	ldr	r3, [pc, #56]	@ (8007740 <_svfiprintf_r+0x1f0>)
 8007708:	a904      	add	r1, sp, #16
 800770a:	4638      	mov	r0, r7
 800770c:	f3af 8000 	nop.w
 8007710:	1c42      	adds	r2, r0, #1
 8007712:	4606      	mov	r6, r0
 8007714:	d1d6      	bne.n	80076c4 <_svfiprintf_r+0x174>
 8007716:	89ab      	ldrh	r3, [r5, #12]
 8007718:	065b      	lsls	r3, r3, #25
 800771a:	f53f af2d 	bmi.w	8007578 <_svfiprintf_r+0x28>
 800771e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007720:	e72c      	b.n	800757c <_svfiprintf_r+0x2c>
 8007722:	ab03      	add	r3, sp, #12
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	462a      	mov	r2, r5
 8007728:	4b05      	ldr	r3, [pc, #20]	@ (8007740 <_svfiprintf_r+0x1f0>)
 800772a:	a904      	add	r1, sp, #16
 800772c:	4638      	mov	r0, r7
 800772e:	f000 f879 	bl	8007824 <_printf_i>
 8007732:	e7ed      	b.n	8007710 <_svfiprintf_r+0x1c0>
 8007734:	08007f38 	.word	0x08007f38
 8007738:	08007f42 	.word	0x08007f42
 800773c:	00000000 	.word	0x00000000
 8007740:	08007499 	.word	0x08007499
 8007744:	08007f3e 	.word	0x08007f3e

08007748 <_printf_common>:
 8007748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800774c:	4616      	mov	r6, r2
 800774e:	4698      	mov	r8, r3
 8007750:	688a      	ldr	r2, [r1, #8]
 8007752:	690b      	ldr	r3, [r1, #16]
 8007754:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007758:	4293      	cmp	r3, r2
 800775a:	bfb8      	it	lt
 800775c:	4613      	movlt	r3, r2
 800775e:	6033      	str	r3, [r6, #0]
 8007760:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007764:	4607      	mov	r7, r0
 8007766:	460c      	mov	r4, r1
 8007768:	b10a      	cbz	r2, 800776e <_printf_common+0x26>
 800776a:	3301      	adds	r3, #1
 800776c:	6033      	str	r3, [r6, #0]
 800776e:	6823      	ldr	r3, [r4, #0]
 8007770:	0699      	lsls	r1, r3, #26
 8007772:	bf42      	ittt	mi
 8007774:	6833      	ldrmi	r3, [r6, #0]
 8007776:	3302      	addmi	r3, #2
 8007778:	6033      	strmi	r3, [r6, #0]
 800777a:	6825      	ldr	r5, [r4, #0]
 800777c:	f015 0506 	ands.w	r5, r5, #6
 8007780:	d106      	bne.n	8007790 <_printf_common+0x48>
 8007782:	f104 0a19 	add.w	sl, r4, #25
 8007786:	68e3      	ldr	r3, [r4, #12]
 8007788:	6832      	ldr	r2, [r6, #0]
 800778a:	1a9b      	subs	r3, r3, r2
 800778c:	42ab      	cmp	r3, r5
 800778e:	dc26      	bgt.n	80077de <_printf_common+0x96>
 8007790:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007794:	6822      	ldr	r2, [r4, #0]
 8007796:	3b00      	subs	r3, #0
 8007798:	bf18      	it	ne
 800779a:	2301      	movne	r3, #1
 800779c:	0692      	lsls	r2, r2, #26
 800779e:	d42b      	bmi.n	80077f8 <_printf_common+0xb0>
 80077a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80077a4:	4641      	mov	r1, r8
 80077a6:	4638      	mov	r0, r7
 80077a8:	47c8      	blx	r9
 80077aa:	3001      	adds	r0, #1
 80077ac:	d01e      	beq.n	80077ec <_printf_common+0xa4>
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	6922      	ldr	r2, [r4, #16]
 80077b2:	f003 0306 	and.w	r3, r3, #6
 80077b6:	2b04      	cmp	r3, #4
 80077b8:	bf02      	ittt	eq
 80077ba:	68e5      	ldreq	r5, [r4, #12]
 80077bc:	6833      	ldreq	r3, [r6, #0]
 80077be:	1aed      	subeq	r5, r5, r3
 80077c0:	68a3      	ldr	r3, [r4, #8]
 80077c2:	bf0c      	ite	eq
 80077c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077c8:	2500      	movne	r5, #0
 80077ca:	4293      	cmp	r3, r2
 80077cc:	bfc4      	itt	gt
 80077ce:	1a9b      	subgt	r3, r3, r2
 80077d0:	18ed      	addgt	r5, r5, r3
 80077d2:	2600      	movs	r6, #0
 80077d4:	341a      	adds	r4, #26
 80077d6:	42b5      	cmp	r5, r6
 80077d8:	d11a      	bne.n	8007810 <_printf_common+0xc8>
 80077da:	2000      	movs	r0, #0
 80077dc:	e008      	b.n	80077f0 <_printf_common+0xa8>
 80077de:	2301      	movs	r3, #1
 80077e0:	4652      	mov	r2, sl
 80077e2:	4641      	mov	r1, r8
 80077e4:	4638      	mov	r0, r7
 80077e6:	47c8      	blx	r9
 80077e8:	3001      	adds	r0, #1
 80077ea:	d103      	bne.n	80077f4 <_printf_common+0xac>
 80077ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077f4:	3501      	adds	r5, #1
 80077f6:	e7c6      	b.n	8007786 <_printf_common+0x3e>
 80077f8:	18e1      	adds	r1, r4, r3
 80077fa:	1c5a      	adds	r2, r3, #1
 80077fc:	2030      	movs	r0, #48	@ 0x30
 80077fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007802:	4422      	add	r2, r4
 8007804:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007808:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800780c:	3302      	adds	r3, #2
 800780e:	e7c7      	b.n	80077a0 <_printf_common+0x58>
 8007810:	2301      	movs	r3, #1
 8007812:	4622      	mov	r2, r4
 8007814:	4641      	mov	r1, r8
 8007816:	4638      	mov	r0, r7
 8007818:	47c8      	blx	r9
 800781a:	3001      	adds	r0, #1
 800781c:	d0e6      	beq.n	80077ec <_printf_common+0xa4>
 800781e:	3601      	adds	r6, #1
 8007820:	e7d9      	b.n	80077d6 <_printf_common+0x8e>
	...

08007824 <_printf_i>:
 8007824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007828:	7e0f      	ldrb	r7, [r1, #24]
 800782a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800782c:	2f78      	cmp	r7, #120	@ 0x78
 800782e:	4691      	mov	r9, r2
 8007830:	4680      	mov	r8, r0
 8007832:	460c      	mov	r4, r1
 8007834:	469a      	mov	sl, r3
 8007836:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800783a:	d807      	bhi.n	800784c <_printf_i+0x28>
 800783c:	2f62      	cmp	r7, #98	@ 0x62
 800783e:	d80a      	bhi.n	8007856 <_printf_i+0x32>
 8007840:	2f00      	cmp	r7, #0
 8007842:	f000 80d2 	beq.w	80079ea <_printf_i+0x1c6>
 8007846:	2f58      	cmp	r7, #88	@ 0x58
 8007848:	f000 80b9 	beq.w	80079be <_printf_i+0x19a>
 800784c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007850:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007854:	e03a      	b.n	80078cc <_printf_i+0xa8>
 8007856:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800785a:	2b15      	cmp	r3, #21
 800785c:	d8f6      	bhi.n	800784c <_printf_i+0x28>
 800785e:	a101      	add	r1, pc, #4	@ (adr r1, 8007864 <_printf_i+0x40>)
 8007860:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007864:	080078bd 	.word	0x080078bd
 8007868:	080078d1 	.word	0x080078d1
 800786c:	0800784d 	.word	0x0800784d
 8007870:	0800784d 	.word	0x0800784d
 8007874:	0800784d 	.word	0x0800784d
 8007878:	0800784d 	.word	0x0800784d
 800787c:	080078d1 	.word	0x080078d1
 8007880:	0800784d 	.word	0x0800784d
 8007884:	0800784d 	.word	0x0800784d
 8007888:	0800784d 	.word	0x0800784d
 800788c:	0800784d 	.word	0x0800784d
 8007890:	080079d1 	.word	0x080079d1
 8007894:	080078fb 	.word	0x080078fb
 8007898:	0800798b 	.word	0x0800798b
 800789c:	0800784d 	.word	0x0800784d
 80078a0:	0800784d 	.word	0x0800784d
 80078a4:	080079f3 	.word	0x080079f3
 80078a8:	0800784d 	.word	0x0800784d
 80078ac:	080078fb 	.word	0x080078fb
 80078b0:	0800784d 	.word	0x0800784d
 80078b4:	0800784d 	.word	0x0800784d
 80078b8:	08007993 	.word	0x08007993
 80078bc:	6833      	ldr	r3, [r6, #0]
 80078be:	1d1a      	adds	r2, r3, #4
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	6032      	str	r2, [r6, #0]
 80078c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80078cc:	2301      	movs	r3, #1
 80078ce:	e09d      	b.n	8007a0c <_printf_i+0x1e8>
 80078d0:	6833      	ldr	r3, [r6, #0]
 80078d2:	6820      	ldr	r0, [r4, #0]
 80078d4:	1d19      	adds	r1, r3, #4
 80078d6:	6031      	str	r1, [r6, #0]
 80078d8:	0606      	lsls	r6, r0, #24
 80078da:	d501      	bpl.n	80078e0 <_printf_i+0xbc>
 80078dc:	681d      	ldr	r5, [r3, #0]
 80078de:	e003      	b.n	80078e8 <_printf_i+0xc4>
 80078e0:	0645      	lsls	r5, r0, #25
 80078e2:	d5fb      	bpl.n	80078dc <_printf_i+0xb8>
 80078e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80078e8:	2d00      	cmp	r5, #0
 80078ea:	da03      	bge.n	80078f4 <_printf_i+0xd0>
 80078ec:	232d      	movs	r3, #45	@ 0x2d
 80078ee:	426d      	negs	r5, r5
 80078f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078f4:	4859      	ldr	r0, [pc, #356]	@ (8007a5c <_printf_i+0x238>)
 80078f6:	230a      	movs	r3, #10
 80078f8:	e011      	b.n	800791e <_printf_i+0xfa>
 80078fa:	6821      	ldr	r1, [r4, #0]
 80078fc:	6833      	ldr	r3, [r6, #0]
 80078fe:	0608      	lsls	r0, r1, #24
 8007900:	f853 5b04 	ldr.w	r5, [r3], #4
 8007904:	d402      	bmi.n	800790c <_printf_i+0xe8>
 8007906:	0649      	lsls	r1, r1, #25
 8007908:	bf48      	it	mi
 800790a:	b2ad      	uxthmi	r5, r5
 800790c:	2f6f      	cmp	r7, #111	@ 0x6f
 800790e:	4853      	ldr	r0, [pc, #332]	@ (8007a5c <_printf_i+0x238>)
 8007910:	6033      	str	r3, [r6, #0]
 8007912:	bf14      	ite	ne
 8007914:	230a      	movne	r3, #10
 8007916:	2308      	moveq	r3, #8
 8007918:	2100      	movs	r1, #0
 800791a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800791e:	6866      	ldr	r6, [r4, #4]
 8007920:	60a6      	str	r6, [r4, #8]
 8007922:	2e00      	cmp	r6, #0
 8007924:	bfa2      	ittt	ge
 8007926:	6821      	ldrge	r1, [r4, #0]
 8007928:	f021 0104 	bicge.w	r1, r1, #4
 800792c:	6021      	strge	r1, [r4, #0]
 800792e:	b90d      	cbnz	r5, 8007934 <_printf_i+0x110>
 8007930:	2e00      	cmp	r6, #0
 8007932:	d04b      	beq.n	80079cc <_printf_i+0x1a8>
 8007934:	4616      	mov	r6, r2
 8007936:	fbb5 f1f3 	udiv	r1, r5, r3
 800793a:	fb03 5711 	mls	r7, r3, r1, r5
 800793e:	5dc7      	ldrb	r7, [r0, r7]
 8007940:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007944:	462f      	mov	r7, r5
 8007946:	42bb      	cmp	r3, r7
 8007948:	460d      	mov	r5, r1
 800794a:	d9f4      	bls.n	8007936 <_printf_i+0x112>
 800794c:	2b08      	cmp	r3, #8
 800794e:	d10b      	bne.n	8007968 <_printf_i+0x144>
 8007950:	6823      	ldr	r3, [r4, #0]
 8007952:	07df      	lsls	r7, r3, #31
 8007954:	d508      	bpl.n	8007968 <_printf_i+0x144>
 8007956:	6923      	ldr	r3, [r4, #16]
 8007958:	6861      	ldr	r1, [r4, #4]
 800795a:	4299      	cmp	r1, r3
 800795c:	bfde      	ittt	le
 800795e:	2330      	movle	r3, #48	@ 0x30
 8007960:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007964:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007968:	1b92      	subs	r2, r2, r6
 800796a:	6122      	str	r2, [r4, #16]
 800796c:	f8cd a000 	str.w	sl, [sp]
 8007970:	464b      	mov	r3, r9
 8007972:	aa03      	add	r2, sp, #12
 8007974:	4621      	mov	r1, r4
 8007976:	4640      	mov	r0, r8
 8007978:	f7ff fee6 	bl	8007748 <_printf_common>
 800797c:	3001      	adds	r0, #1
 800797e:	d14a      	bne.n	8007a16 <_printf_i+0x1f2>
 8007980:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007984:	b004      	add	sp, #16
 8007986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800798a:	6823      	ldr	r3, [r4, #0]
 800798c:	f043 0320 	orr.w	r3, r3, #32
 8007990:	6023      	str	r3, [r4, #0]
 8007992:	4833      	ldr	r0, [pc, #204]	@ (8007a60 <_printf_i+0x23c>)
 8007994:	2778      	movs	r7, #120	@ 0x78
 8007996:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800799a:	6823      	ldr	r3, [r4, #0]
 800799c:	6831      	ldr	r1, [r6, #0]
 800799e:	061f      	lsls	r7, r3, #24
 80079a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80079a4:	d402      	bmi.n	80079ac <_printf_i+0x188>
 80079a6:	065f      	lsls	r7, r3, #25
 80079a8:	bf48      	it	mi
 80079aa:	b2ad      	uxthmi	r5, r5
 80079ac:	6031      	str	r1, [r6, #0]
 80079ae:	07d9      	lsls	r1, r3, #31
 80079b0:	bf44      	itt	mi
 80079b2:	f043 0320 	orrmi.w	r3, r3, #32
 80079b6:	6023      	strmi	r3, [r4, #0]
 80079b8:	b11d      	cbz	r5, 80079c2 <_printf_i+0x19e>
 80079ba:	2310      	movs	r3, #16
 80079bc:	e7ac      	b.n	8007918 <_printf_i+0xf4>
 80079be:	4827      	ldr	r0, [pc, #156]	@ (8007a5c <_printf_i+0x238>)
 80079c0:	e7e9      	b.n	8007996 <_printf_i+0x172>
 80079c2:	6823      	ldr	r3, [r4, #0]
 80079c4:	f023 0320 	bic.w	r3, r3, #32
 80079c8:	6023      	str	r3, [r4, #0]
 80079ca:	e7f6      	b.n	80079ba <_printf_i+0x196>
 80079cc:	4616      	mov	r6, r2
 80079ce:	e7bd      	b.n	800794c <_printf_i+0x128>
 80079d0:	6833      	ldr	r3, [r6, #0]
 80079d2:	6825      	ldr	r5, [r4, #0]
 80079d4:	6961      	ldr	r1, [r4, #20]
 80079d6:	1d18      	adds	r0, r3, #4
 80079d8:	6030      	str	r0, [r6, #0]
 80079da:	062e      	lsls	r6, r5, #24
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	d501      	bpl.n	80079e4 <_printf_i+0x1c0>
 80079e0:	6019      	str	r1, [r3, #0]
 80079e2:	e002      	b.n	80079ea <_printf_i+0x1c6>
 80079e4:	0668      	lsls	r0, r5, #25
 80079e6:	d5fb      	bpl.n	80079e0 <_printf_i+0x1bc>
 80079e8:	8019      	strh	r1, [r3, #0]
 80079ea:	2300      	movs	r3, #0
 80079ec:	6123      	str	r3, [r4, #16]
 80079ee:	4616      	mov	r6, r2
 80079f0:	e7bc      	b.n	800796c <_printf_i+0x148>
 80079f2:	6833      	ldr	r3, [r6, #0]
 80079f4:	1d1a      	adds	r2, r3, #4
 80079f6:	6032      	str	r2, [r6, #0]
 80079f8:	681e      	ldr	r6, [r3, #0]
 80079fa:	6862      	ldr	r2, [r4, #4]
 80079fc:	2100      	movs	r1, #0
 80079fe:	4630      	mov	r0, r6
 8007a00:	f7f8 fc6e 	bl	80002e0 <memchr>
 8007a04:	b108      	cbz	r0, 8007a0a <_printf_i+0x1e6>
 8007a06:	1b80      	subs	r0, r0, r6
 8007a08:	6060      	str	r0, [r4, #4]
 8007a0a:	6863      	ldr	r3, [r4, #4]
 8007a0c:	6123      	str	r3, [r4, #16]
 8007a0e:	2300      	movs	r3, #0
 8007a10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a14:	e7aa      	b.n	800796c <_printf_i+0x148>
 8007a16:	6923      	ldr	r3, [r4, #16]
 8007a18:	4632      	mov	r2, r6
 8007a1a:	4649      	mov	r1, r9
 8007a1c:	4640      	mov	r0, r8
 8007a1e:	47d0      	blx	sl
 8007a20:	3001      	adds	r0, #1
 8007a22:	d0ad      	beq.n	8007980 <_printf_i+0x15c>
 8007a24:	6823      	ldr	r3, [r4, #0]
 8007a26:	079b      	lsls	r3, r3, #30
 8007a28:	d413      	bmi.n	8007a52 <_printf_i+0x22e>
 8007a2a:	68e0      	ldr	r0, [r4, #12]
 8007a2c:	9b03      	ldr	r3, [sp, #12]
 8007a2e:	4298      	cmp	r0, r3
 8007a30:	bfb8      	it	lt
 8007a32:	4618      	movlt	r0, r3
 8007a34:	e7a6      	b.n	8007984 <_printf_i+0x160>
 8007a36:	2301      	movs	r3, #1
 8007a38:	4632      	mov	r2, r6
 8007a3a:	4649      	mov	r1, r9
 8007a3c:	4640      	mov	r0, r8
 8007a3e:	47d0      	blx	sl
 8007a40:	3001      	adds	r0, #1
 8007a42:	d09d      	beq.n	8007980 <_printf_i+0x15c>
 8007a44:	3501      	adds	r5, #1
 8007a46:	68e3      	ldr	r3, [r4, #12]
 8007a48:	9903      	ldr	r1, [sp, #12]
 8007a4a:	1a5b      	subs	r3, r3, r1
 8007a4c:	42ab      	cmp	r3, r5
 8007a4e:	dcf2      	bgt.n	8007a36 <_printf_i+0x212>
 8007a50:	e7eb      	b.n	8007a2a <_printf_i+0x206>
 8007a52:	2500      	movs	r5, #0
 8007a54:	f104 0619 	add.w	r6, r4, #25
 8007a58:	e7f5      	b.n	8007a46 <_printf_i+0x222>
 8007a5a:	bf00      	nop
 8007a5c:	08007f49 	.word	0x08007f49
 8007a60:	08007f5a 	.word	0x08007f5a

08007a64 <__sflush_r>:
 8007a64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a6c:	0716      	lsls	r6, r2, #28
 8007a6e:	4605      	mov	r5, r0
 8007a70:	460c      	mov	r4, r1
 8007a72:	d454      	bmi.n	8007b1e <__sflush_r+0xba>
 8007a74:	684b      	ldr	r3, [r1, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	dc02      	bgt.n	8007a80 <__sflush_r+0x1c>
 8007a7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	dd48      	ble.n	8007b12 <__sflush_r+0xae>
 8007a80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a82:	2e00      	cmp	r6, #0
 8007a84:	d045      	beq.n	8007b12 <__sflush_r+0xae>
 8007a86:	2300      	movs	r3, #0
 8007a88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007a8c:	682f      	ldr	r7, [r5, #0]
 8007a8e:	6a21      	ldr	r1, [r4, #32]
 8007a90:	602b      	str	r3, [r5, #0]
 8007a92:	d030      	beq.n	8007af6 <__sflush_r+0x92>
 8007a94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007a96:	89a3      	ldrh	r3, [r4, #12]
 8007a98:	0759      	lsls	r1, r3, #29
 8007a9a:	d505      	bpl.n	8007aa8 <__sflush_r+0x44>
 8007a9c:	6863      	ldr	r3, [r4, #4]
 8007a9e:	1ad2      	subs	r2, r2, r3
 8007aa0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007aa2:	b10b      	cbz	r3, 8007aa8 <__sflush_r+0x44>
 8007aa4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007aa6:	1ad2      	subs	r2, r2, r3
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007aac:	6a21      	ldr	r1, [r4, #32]
 8007aae:	4628      	mov	r0, r5
 8007ab0:	47b0      	blx	r6
 8007ab2:	1c43      	adds	r3, r0, #1
 8007ab4:	89a3      	ldrh	r3, [r4, #12]
 8007ab6:	d106      	bne.n	8007ac6 <__sflush_r+0x62>
 8007ab8:	6829      	ldr	r1, [r5, #0]
 8007aba:	291d      	cmp	r1, #29
 8007abc:	d82b      	bhi.n	8007b16 <__sflush_r+0xb2>
 8007abe:	4a2a      	ldr	r2, [pc, #168]	@ (8007b68 <__sflush_r+0x104>)
 8007ac0:	410a      	asrs	r2, r1
 8007ac2:	07d6      	lsls	r6, r2, #31
 8007ac4:	d427      	bmi.n	8007b16 <__sflush_r+0xb2>
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	6062      	str	r2, [r4, #4]
 8007aca:	04d9      	lsls	r1, r3, #19
 8007acc:	6922      	ldr	r2, [r4, #16]
 8007ace:	6022      	str	r2, [r4, #0]
 8007ad0:	d504      	bpl.n	8007adc <__sflush_r+0x78>
 8007ad2:	1c42      	adds	r2, r0, #1
 8007ad4:	d101      	bne.n	8007ada <__sflush_r+0x76>
 8007ad6:	682b      	ldr	r3, [r5, #0]
 8007ad8:	b903      	cbnz	r3, 8007adc <__sflush_r+0x78>
 8007ada:	6560      	str	r0, [r4, #84]	@ 0x54
 8007adc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ade:	602f      	str	r7, [r5, #0]
 8007ae0:	b1b9      	cbz	r1, 8007b12 <__sflush_r+0xae>
 8007ae2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ae6:	4299      	cmp	r1, r3
 8007ae8:	d002      	beq.n	8007af0 <__sflush_r+0x8c>
 8007aea:	4628      	mov	r0, r5
 8007aec:	f7ff fbdc 	bl	80072a8 <_free_r>
 8007af0:	2300      	movs	r3, #0
 8007af2:	6363      	str	r3, [r4, #52]	@ 0x34
 8007af4:	e00d      	b.n	8007b12 <__sflush_r+0xae>
 8007af6:	2301      	movs	r3, #1
 8007af8:	4628      	mov	r0, r5
 8007afa:	47b0      	blx	r6
 8007afc:	4602      	mov	r2, r0
 8007afe:	1c50      	adds	r0, r2, #1
 8007b00:	d1c9      	bne.n	8007a96 <__sflush_r+0x32>
 8007b02:	682b      	ldr	r3, [r5, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d0c6      	beq.n	8007a96 <__sflush_r+0x32>
 8007b08:	2b1d      	cmp	r3, #29
 8007b0a:	d001      	beq.n	8007b10 <__sflush_r+0xac>
 8007b0c:	2b16      	cmp	r3, #22
 8007b0e:	d11e      	bne.n	8007b4e <__sflush_r+0xea>
 8007b10:	602f      	str	r7, [r5, #0]
 8007b12:	2000      	movs	r0, #0
 8007b14:	e022      	b.n	8007b5c <__sflush_r+0xf8>
 8007b16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b1a:	b21b      	sxth	r3, r3
 8007b1c:	e01b      	b.n	8007b56 <__sflush_r+0xf2>
 8007b1e:	690f      	ldr	r7, [r1, #16]
 8007b20:	2f00      	cmp	r7, #0
 8007b22:	d0f6      	beq.n	8007b12 <__sflush_r+0xae>
 8007b24:	0793      	lsls	r3, r2, #30
 8007b26:	680e      	ldr	r6, [r1, #0]
 8007b28:	bf08      	it	eq
 8007b2a:	694b      	ldreq	r3, [r1, #20]
 8007b2c:	600f      	str	r7, [r1, #0]
 8007b2e:	bf18      	it	ne
 8007b30:	2300      	movne	r3, #0
 8007b32:	eba6 0807 	sub.w	r8, r6, r7
 8007b36:	608b      	str	r3, [r1, #8]
 8007b38:	f1b8 0f00 	cmp.w	r8, #0
 8007b3c:	dde9      	ble.n	8007b12 <__sflush_r+0xae>
 8007b3e:	6a21      	ldr	r1, [r4, #32]
 8007b40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007b42:	4643      	mov	r3, r8
 8007b44:	463a      	mov	r2, r7
 8007b46:	4628      	mov	r0, r5
 8007b48:	47b0      	blx	r6
 8007b4a:	2800      	cmp	r0, #0
 8007b4c:	dc08      	bgt.n	8007b60 <__sflush_r+0xfc>
 8007b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b56:	81a3      	strh	r3, [r4, #12]
 8007b58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b60:	4407      	add	r7, r0
 8007b62:	eba8 0800 	sub.w	r8, r8, r0
 8007b66:	e7e7      	b.n	8007b38 <__sflush_r+0xd4>
 8007b68:	dfbffffe 	.word	0xdfbffffe

08007b6c <_fflush_r>:
 8007b6c:	b538      	push	{r3, r4, r5, lr}
 8007b6e:	690b      	ldr	r3, [r1, #16]
 8007b70:	4605      	mov	r5, r0
 8007b72:	460c      	mov	r4, r1
 8007b74:	b913      	cbnz	r3, 8007b7c <_fflush_r+0x10>
 8007b76:	2500      	movs	r5, #0
 8007b78:	4628      	mov	r0, r5
 8007b7a:	bd38      	pop	{r3, r4, r5, pc}
 8007b7c:	b118      	cbz	r0, 8007b86 <_fflush_r+0x1a>
 8007b7e:	6a03      	ldr	r3, [r0, #32]
 8007b80:	b90b      	cbnz	r3, 8007b86 <_fflush_r+0x1a>
 8007b82:	f7ff f96f 	bl	8006e64 <__sinit>
 8007b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d0f3      	beq.n	8007b76 <_fflush_r+0xa>
 8007b8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007b90:	07d0      	lsls	r0, r2, #31
 8007b92:	d404      	bmi.n	8007b9e <_fflush_r+0x32>
 8007b94:	0599      	lsls	r1, r3, #22
 8007b96:	d402      	bmi.n	8007b9e <_fflush_r+0x32>
 8007b98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b9a:	f7ff fb74 	bl	8007286 <__retarget_lock_acquire_recursive>
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	4621      	mov	r1, r4
 8007ba2:	f7ff ff5f 	bl	8007a64 <__sflush_r>
 8007ba6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ba8:	07da      	lsls	r2, r3, #31
 8007baa:	4605      	mov	r5, r0
 8007bac:	d4e4      	bmi.n	8007b78 <_fflush_r+0xc>
 8007bae:	89a3      	ldrh	r3, [r4, #12]
 8007bb0:	059b      	lsls	r3, r3, #22
 8007bb2:	d4e1      	bmi.n	8007b78 <_fflush_r+0xc>
 8007bb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bb6:	f7ff fb67 	bl	8007288 <__retarget_lock_release_recursive>
 8007bba:	e7dd      	b.n	8007b78 <_fflush_r+0xc>

08007bbc <__swhatbuf_r>:
 8007bbc:	b570      	push	{r4, r5, r6, lr}
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc4:	2900      	cmp	r1, #0
 8007bc6:	b096      	sub	sp, #88	@ 0x58
 8007bc8:	4615      	mov	r5, r2
 8007bca:	461e      	mov	r6, r3
 8007bcc:	da0d      	bge.n	8007bea <__swhatbuf_r+0x2e>
 8007bce:	89a3      	ldrh	r3, [r4, #12]
 8007bd0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007bd4:	f04f 0100 	mov.w	r1, #0
 8007bd8:	bf14      	ite	ne
 8007bda:	2340      	movne	r3, #64	@ 0x40
 8007bdc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007be0:	2000      	movs	r0, #0
 8007be2:	6031      	str	r1, [r6, #0]
 8007be4:	602b      	str	r3, [r5, #0]
 8007be6:	b016      	add	sp, #88	@ 0x58
 8007be8:	bd70      	pop	{r4, r5, r6, pc}
 8007bea:	466a      	mov	r2, sp
 8007bec:	f000 f862 	bl	8007cb4 <_fstat_r>
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	dbec      	blt.n	8007bce <__swhatbuf_r+0x12>
 8007bf4:	9901      	ldr	r1, [sp, #4]
 8007bf6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007bfa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007bfe:	4259      	negs	r1, r3
 8007c00:	4159      	adcs	r1, r3
 8007c02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c06:	e7eb      	b.n	8007be0 <__swhatbuf_r+0x24>

08007c08 <__smakebuf_r>:
 8007c08:	898b      	ldrh	r3, [r1, #12]
 8007c0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c0c:	079d      	lsls	r5, r3, #30
 8007c0e:	4606      	mov	r6, r0
 8007c10:	460c      	mov	r4, r1
 8007c12:	d507      	bpl.n	8007c24 <__smakebuf_r+0x1c>
 8007c14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007c18:	6023      	str	r3, [r4, #0]
 8007c1a:	6123      	str	r3, [r4, #16]
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	6163      	str	r3, [r4, #20]
 8007c20:	b003      	add	sp, #12
 8007c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c24:	ab01      	add	r3, sp, #4
 8007c26:	466a      	mov	r2, sp
 8007c28:	f7ff ffc8 	bl	8007bbc <__swhatbuf_r>
 8007c2c:	9f00      	ldr	r7, [sp, #0]
 8007c2e:	4605      	mov	r5, r0
 8007c30:	4639      	mov	r1, r7
 8007c32:	4630      	mov	r0, r6
 8007c34:	f7ff fba4 	bl	8007380 <_malloc_r>
 8007c38:	b948      	cbnz	r0, 8007c4e <__smakebuf_r+0x46>
 8007c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c3e:	059a      	lsls	r2, r3, #22
 8007c40:	d4ee      	bmi.n	8007c20 <__smakebuf_r+0x18>
 8007c42:	f023 0303 	bic.w	r3, r3, #3
 8007c46:	f043 0302 	orr.w	r3, r3, #2
 8007c4a:	81a3      	strh	r3, [r4, #12]
 8007c4c:	e7e2      	b.n	8007c14 <__smakebuf_r+0xc>
 8007c4e:	89a3      	ldrh	r3, [r4, #12]
 8007c50:	6020      	str	r0, [r4, #0]
 8007c52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c56:	81a3      	strh	r3, [r4, #12]
 8007c58:	9b01      	ldr	r3, [sp, #4]
 8007c5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007c5e:	b15b      	cbz	r3, 8007c78 <__smakebuf_r+0x70>
 8007c60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c64:	4630      	mov	r0, r6
 8007c66:	f000 f837 	bl	8007cd8 <_isatty_r>
 8007c6a:	b128      	cbz	r0, 8007c78 <__smakebuf_r+0x70>
 8007c6c:	89a3      	ldrh	r3, [r4, #12]
 8007c6e:	f023 0303 	bic.w	r3, r3, #3
 8007c72:	f043 0301 	orr.w	r3, r3, #1
 8007c76:	81a3      	strh	r3, [r4, #12]
 8007c78:	89a3      	ldrh	r3, [r4, #12]
 8007c7a:	431d      	orrs	r5, r3
 8007c7c:	81a5      	strh	r5, [r4, #12]
 8007c7e:	e7cf      	b.n	8007c20 <__smakebuf_r+0x18>

08007c80 <memmove>:
 8007c80:	4288      	cmp	r0, r1
 8007c82:	b510      	push	{r4, lr}
 8007c84:	eb01 0402 	add.w	r4, r1, r2
 8007c88:	d902      	bls.n	8007c90 <memmove+0x10>
 8007c8a:	4284      	cmp	r4, r0
 8007c8c:	4623      	mov	r3, r4
 8007c8e:	d807      	bhi.n	8007ca0 <memmove+0x20>
 8007c90:	1e43      	subs	r3, r0, #1
 8007c92:	42a1      	cmp	r1, r4
 8007c94:	d008      	beq.n	8007ca8 <memmove+0x28>
 8007c96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c9e:	e7f8      	b.n	8007c92 <memmove+0x12>
 8007ca0:	4402      	add	r2, r0
 8007ca2:	4601      	mov	r1, r0
 8007ca4:	428a      	cmp	r2, r1
 8007ca6:	d100      	bne.n	8007caa <memmove+0x2a>
 8007ca8:	bd10      	pop	{r4, pc}
 8007caa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cb2:	e7f7      	b.n	8007ca4 <memmove+0x24>

08007cb4 <_fstat_r>:
 8007cb4:	b538      	push	{r3, r4, r5, lr}
 8007cb6:	4d07      	ldr	r5, [pc, #28]	@ (8007cd4 <_fstat_r+0x20>)
 8007cb8:	2300      	movs	r3, #0
 8007cba:	4604      	mov	r4, r0
 8007cbc:	4608      	mov	r0, r1
 8007cbe:	4611      	mov	r1, r2
 8007cc0:	602b      	str	r3, [r5, #0]
 8007cc2:	f7f8 ffe4 	bl	8000c8e <_fstat>
 8007cc6:	1c43      	adds	r3, r0, #1
 8007cc8:	d102      	bne.n	8007cd0 <_fstat_r+0x1c>
 8007cca:	682b      	ldr	r3, [r5, #0]
 8007ccc:	b103      	cbz	r3, 8007cd0 <_fstat_r+0x1c>
 8007cce:	6023      	str	r3, [r4, #0]
 8007cd0:	bd38      	pop	{r3, r4, r5, pc}
 8007cd2:	bf00      	nop
 8007cd4:	2000d234 	.word	0x2000d234

08007cd8 <_isatty_r>:
 8007cd8:	b538      	push	{r3, r4, r5, lr}
 8007cda:	4d06      	ldr	r5, [pc, #24]	@ (8007cf4 <_isatty_r+0x1c>)
 8007cdc:	2300      	movs	r3, #0
 8007cde:	4604      	mov	r4, r0
 8007ce0:	4608      	mov	r0, r1
 8007ce2:	602b      	str	r3, [r5, #0]
 8007ce4:	f7f8 ffe3 	bl	8000cae <_isatty>
 8007ce8:	1c43      	adds	r3, r0, #1
 8007cea:	d102      	bne.n	8007cf2 <_isatty_r+0x1a>
 8007cec:	682b      	ldr	r3, [r5, #0]
 8007cee:	b103      	cbz	r3, 8007cf2 <_isatty_r+0x1a>
 8007cf0:	6023      	str	r3, [r4, #0]
 8007cf2:	bd38      	pop	{r3, r4, r5, pc}
 8007cf4:	2000d234 	.word	0x2000d234

08007cf8 <_sbrk_r>:
 8007cf8:	b538      	push	{r3, r4, r5, lr}
 8007cfa:	4d06      	ldr	r5, [pc, #24]	@ (8007d14 <_sbrk_r+0x1c>)
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	4604      	mov	r4, r0
 8007d00:	4608      	mov	r0, r1
 8007d02:	602b      	str	r3, [r5, #0]
 8007d04:	f000 f83e 	bl	8007d84 <_sbrk>
 8007d08:	1c43      	adds	r3, r0, #1
 8007d0a:	d102      	bne.n	8007d12 <_sbrk_r+0x1a>
 8007d0c:	682b      	ldr	r3, [r5, #0]
 8007d0e:	b103      	cbz	r3, 8007d12 <_sbrk_r+0x1a>
 8007d10:	6023      	str	r3, [r4, #0]
 8007d12:	bd38      	pop	{r3, r4, r5, pc}
 8007d14:	2000d234 	.word	0x2000d234

08007d18 <_realloc_r>:
 8007d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d1c:	4680      	mov	r8, r0
 8007d1e:	4615      	mov	r5, r2
 8007d20:	460c      	mov	r4, r1
 8007d22:	b921      	cbnz	r1, 8007d2e <_realloc_r+0x16>
 8007d24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d28:	4611      	mov	r1, r2
 8007d2a:	f7ff bb29 	b.w	8007380 <_malloc_r>
 8007d2e:	b92a      	cbnz	r2, 8007d3c <_realloc_r+0x24>
 8007d30:	f7ff faba 	bl	80072a8 <_free_r>
 8007d34:	2400      	movs	r4, #0
 8007d36:	4620      	mov	r0, r4
 8007d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d3c:	f000 f81a 	bl	8007d74 <_malloc_usable_size_r>
 8007d40:	4285      	cmp	r5, r0
 8007d42:	4606      	mov	r6, r0
 8007d44:	d802      	bhi.n	8007d4c <_realloc_r+0x34>
 8007d46:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007d4a:	d8f4      	bhi.n	8007d36 <_realloc_r+0x1e>
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	4640      	mov	r0, r8
 8007d50:	f7ff fb16 	bl	8007380 <_malloc_r>
 8007d54:	4607      	mov	r7, r0
 8007d56:	2800      	cmp	r0, #0
 8007d58:	d0ec      	beq.n	8007d34 <_realloc_r+0x1c>
 8007d5a:	42b5      	cmp	r5, r6
 8007d5c:	462a      	mov	r2, r5
 8007d5e:	4621      	mov	r1, r4
 8007d60:	bf28      	it	cs
 8007d62:	4632      	movcs	r2, r6
 8007d64:	f7ff fa91 	bl	800728a <memcpy>
 8007d68:	4621      	mov	r1, r4
 8007d6a:	4640      	mov	r0, r8
 8007d6c:	f7ff fa9c 	bl	80072a8 <_free_r>
 8007d70:	463c      	mov	r4, r7
 8007d72:	e7e0      	b.n	8007d36 <_realloc_r+0x1e>

08007d74 <_malloc_usable_size_r>:
 8007d74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d78:	1f18      	subs	r0, r3, #4
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	bfbc      	itt	lt
 8007d7e:	580b      	ldrlt	r3, [r1, r0]
 8007d80:	18c0      	addlt	r0, r0, r3
 8007d82:	4770      	bx	lr

08007d84 <_sbrk>:
 8007d84:	4a04      	ldr	r2, [pc, #16]	@ (8007d98 <_sbrk+0x14>)
 8007d86:	6811      	ldr	r1, [r2, #0]
 8007d88:	4603      	mov	r3, r0
 8007d8a:	b909      	cbnz	r1, 8007d90 <_sbrk+0xc>
 8007d8c:	4903      	ldr	r1, [pc, #12]	@ (8007d9c <_sbrk+0x18>)
 8007d8e:	6011      	str	r1, [r2, #0]
 8007d90:	6810      	ldr	r0, [r2, #0]
 8007d92:	4403      	add	r3, r0
 8007d94:	6013      	str	r3, [r2, #0]
 8007d96:	4770      	bx	lr
 8007d98:	2000d244 	.word	0x2000d244
 8007d9c:	2000d248 	.word	0x2000d248

08007da0 <_init>:
 8007da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da2:	bf00      	nop
 8007da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007da6:	bc08      	pop	{r3}
 8007da8:	469e      	mov	lr, r3
 8007daa:	4770      	bx	lr

08007dac <_fini>:
 8007dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dae:	bf00      	nop
 8007db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007db2:	bc08      	pop	{r3}
 8007db4:	469e      	mov	lr, r3
 8007db6:	4770      	bx	lr
