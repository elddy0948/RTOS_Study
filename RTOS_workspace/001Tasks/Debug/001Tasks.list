
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fcc  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080051cc  080051cc  000061cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800524c  0800524c  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  0800524c  0800524c  0000624c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005254  08005254  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005254  08005254  00006254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005258  08005258  00006258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800525c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bb60  20000070  080052cc  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000bbd0  080052cc  00007bd0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb23  00000000  00000000  0000709e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002857  00000000  00000000  00016bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  00019418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c2d  00000000  00000000  0001a3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029c84  00000000  00000000  0001b01d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000129a5  00000000  00000000  00044ca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100d2a  00000000  00000000  00057646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00158370  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004838  00000000  00000000  001583b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0015cbec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	080051b4 	.word	0x080051b4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	080051b4 	.word	0x080051b4

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000254:	f000 b96a 	b.w	800052c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	460c      	mov	r4, r1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d14e      	bne.n	800031a <__udivmoddi4+0xaa>
 800027c:	4694      	mov	ip, r2
 800027e:	458c      	cmp	ip, r1
 8000280:	4686      	mov	lr, r0
 8000282:	fab2 f282 	clz	r2, r2
 8000286:	d962      	bls.n	800034e <__udivmoddi4+0xde>
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0320 	rsb	r3, r2, #32
 800028e:	4091      	lsls	r1, r2
 8000290:	fa20 f303 	lsr.w	r3, r0, r3
 8000294:	fa0c fc02 	lsl.w	ip, ip, r2
 8000298:	4319      	orrs	r1, r3
 800029a:	fa00 fe02 	lsl.w	lr, r0, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f f68c 	uxth.w	r6, ip
 80002a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	fb07 1114 	mls	r1, r7, r4, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb04 f106 	mul.w	r1, r4, r6
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002c6:	f080 8112 	bcs.w	80004ee <__udivmoddi4+0x27e>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 810f 	bls.w	80004ee <__udivmoddi4+0x27e>
 80002d0:	3c02      	subs	r4, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb1 f0f7 	udiv	r0, r1, r7
 80002de:	fb07 1110 	mls	r1, r7, r0, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb00 f606 	mul.w	r6, r0, r6
 80002ea:	429e      	cmp	r6, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x94>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002f6:	f080 80fc 	bcs.w	80004f2 <__udivmoddi4+0x282>
 80002fa:	429e      	cmp	r6, r3
 80002fc:	f240 80f9 	bls.w	80004f2 <__udivmoddi4+0x282>
 8000300:	4463      	add	r3, ip
 8000302:	3802      	subs	r0, #2
 8000304:	1b9b      	subs	r3, r3, r6
 8000306:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800030a:	2100      	movs	r1, #0
 800030c:	b11d      	cbz	r5, 8000316 <__udivmoddi4+0xa6>
 800030e:	40d3      	lsrs	r3, r2
 8000310:	2200      	movs	r2, #0
 8000312:	e9c5 3200 	strd	r3, r2, [r5]
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d905      	bls.n	800032a <__udivmoddi4+0xba>
 800031e:	b10d      	cbz	r5, 8000324 <__udivmoddi4+0xb4>
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	2100      	movs	r1, #0
 8000326:	4608      	mov	r0, r1
 8000328:	e7f5      	b.n	8000316 <__udivmoddi4+0xa6>
 800032a:	fab3 f183 	clz	r1, r3
 800032e:	2900      	cmp	r1, #0
 8000330:	d146      	bne.n	80003c0 <__udivmoddi4+0x150>
 8000332:	42a3      	cmp	r3, r4
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xcc>
 8000336:	4290      	cmp	r0, r2
 8000338:	f0c0 80f0 	bcc.w	800051c <__udivmoddi4+0x2ac>
 800033c:	1a86      	subs	r6, r0, r2
 800033e:	eb64 0303 	sbc.w	r3, r4, r3
 8000342:	2001      	movs	r0, #1
 8000344:	2d00      	cmp	r5, #0
 8000346:	d0e6      	beq.n	8000316 <__udivmoddi4+0xa6>
 8000348:	e9c5 6300 	strd	r6, r3, [r5]
 800034c:	e7e3      	b.n	8000316 <__udivmoddi4+0xa6>
 800034e:	2a00      	cmp	r2, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x204>
 8000354:	eba1 040c 	sub.w	r4, r1, ip
 8000358:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800035c:	fa1f f78c 	uxth.w	r7, ip
 8000360:	2101      	movs	r1, #1
 8000362:	fbb4 f6f8 	udiv	r6, r4, r8
 8000366:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036a:	fb08 4416 	mls	r4, r8, r6, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb07 f006 	mul.w	r0, r7, r6
 8000376:	4298      	cmp	r0, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x11c>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x11a>
 8000384:	4298      	cmp	r0, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 800038a:	4626      	mov	r6, r4
 800038c:	1a1c      	subs	r4, r3, r0
 800038e:	fa1f f38e 	uxth.w	r3, lr
 8000392:	fbb4 f0f8 	udiv	r0, r4, r8
 8000396:	fb08 4410 	mls	r4, r8, r0, r4
 800039a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039e:	fb00 f707 	mul.w	r7, r0, r7
 80003a2:	429f      	cmp	r7, r3
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x148>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x146>
 80003b0:	429f      	cmp	r7, r3
 80003b2:	f200 80b0 	bhi.w	8000516 <__udivmoddi4+0x2a6>
 80003b6:	4620      	mov	r0, r4
 80003b8:	1bdb      	subs	r3, r3, r7
 80003ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003be:	e7a5      	b.n	800030c <__udivmoddi4+0x9c>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ca:	431f      	orrs	r7, r3
 80003cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d0:	fa04 f301 	lsl.w	r3, r4, r1
 80003d4:	ea43 030c 	orr.w	r3, r3, ip
 80003d8:	40f4      	lsrs	r4, r6
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb4 fef0 	udiv	lr, r4, r0
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	fb00 441e 	mls	r4, r0, lr, r4
 80003f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f4:	fb0e f90c 	mul.w	r9, lr, ip
 80003f8:	45a1      	cmp	r9, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90a      	bls.n	8000416 <__udivmoddi4+0x1a6>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000406:	f080 8084 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 800040a:	45a1      	cmp	r9, r4
 800040c:	f240 8081 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000410:	f1ae 0e02 	sub.w	lr, lr, #2
 8000414:	443c      	add	r4, r7
 8000416:	eba4 0409 	sub.w	r4, r4, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000422:	fb00 4413 	mls	r4, r0, r3, r4
 8000426:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	45a4      	cmp	ip, r4
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1d2>
 8000432:	193c      	adds	r4, r7, r4
 8000434:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000438:	d267      	bcs.n	800050a <__udivmoddi4+0x29a>
 800043a:	45a4      	cmp	ip, r4
 800043c:	d965      	bls.n	800050a <__udivmoddi4+0x29a>
 800043e:	3b02      	subs	r3, #2
 8000440:	443c      	add	r4, r7
 8000442:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000446:	fba0 9302 	umull	r9, r3, r0, r2
 800044a:	eba4 040c 	sub.w	r4, r4, ip
 800044e:	429c      	cmp	r4, r3
 8000450:	46ce      	mov	lr, r9
 8000452:	469c      	mov	ip, r3
 8000454:	d351      	bcc.n	80004fa <__udivmoddi4+0x28a>
 8000456:	d04e      	beq.n	80004f6 <__udivmoddi4+0x286>
 8000458:	b155      	cbz	r5, 8000470 <__udivmoddi4+0x200>
 800045a:	ebb8 030e 	subs.w	r3, r8, lr
 800045e:	eb64 040c 	sbc.w	r4, r4, ip
 8000462:	fa04 f606 	lsl.w	r6, r4, r6
 8000466:	40cb      	lsrs	r3, r1
 8000468:	431e      	orrs	r6, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c5 6400 	strd	r6, r4, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	e750      	b.n	8000316 <__udivmoddi4+0xa6>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f103 	lsr.w	r1, r0, r3
 800047c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000480:	fa24 f303 	lsr.w	r3, r4, r3
 8000484:	4094      	lsls	r4, r2
 8000486:	430c      	orrs	r4, r1
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000490:	fa1f f78c 	uxth.w	r7, ip
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3110 	mls	r1, r8, r0, r3
 800049c:	0c23      	lsrs	r3, r4, #16
 800049e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a2:	fb00 f107 	mul.w	r1, r0, r7
 80004a6:	4299      	cmp	r1, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x24c>
 80004aa:	eb1c 0303 	adds.w	r3, ip, r3
 80004ae:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004b2:	d22c      	bcs.n	800050e <__udivmoddi4+0x29e>
 80004b4:	4299      	cmp	r1, r3
 80004b6:	d92a      	bls.n	800050e <__udivmoddi4+0x29e>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c4:	fb08 3311 	mls	r3, r8, r1, r3
 80004c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004cc:	fb01 f307 	mul.w	r3, r1, r7
 80004d0:	42a3      	cmp	r3, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x276>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004dc:	d213      	bcs.n	8000506 <__udivmoddi4+0x296>
 80004de:	42a3      	cmp	r3, r4
 80004e0:	d911      	bls.n	8000506 <__udivmoddi4+0x296>
 80004e2:	3902      	subs	r1, #2
 80004e4:	4464      	add	r4, ip
 80004e6:	1ae4      	subs	r4, r4, r3
 80004e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ec:	e739      	b.n	8000362 <__udivmoddi4+0xf2>
 80004ee:	4604      	mov	r4, r0
 80004f0:	e6f0      	b.n	80002d4 <__udivmoddi4+0x64>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e706      	b.n	8000304 <__udivmoddi4+0x94>
 80004f6:	45c8      	cmp	r8, r9
 80004f8:	d2ae      	bcs.n	8000458 <__udivmoddi4+0x1e8>
 80004fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000502:	3801      	subs	r0, #1
 8000504:	e7a8      	b.n	8000458 <__udivmoddi4+0x1e8>
 8000506:	4631      	mov	r1, r6
 8000508:	e7ed      	b.n	80004e6 <__udivmoddi4+0x276>
 800050a:	4603      	mov	r3, r0
 800050c:	e799      	b.n	8000442 <__udivmoddi4+0x1d2>
 800050e:	4630      	mov	r0, r6
 8000510:	e7d4      	b.n	80004bc <__udivmoddi4+0x24c>
 8000512:	46d6      	mov	lr, sl
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1a6>
 8000516:	4463      	add	r3, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74d      	b.n	80003b8 <__udivmoddi4+0x148>
 800051c:	4606      	mov	r6, r0
 800051e:	4623      	mov	r3, r4
 8000520:	4608      	mov	r0, r1
 8000522:	e70f      	b.n	8000344 <__udivmoddi4+0xd4>
 8000524:	3e02      	subs	r6, #2
 8000526:	4463      	add	r3, ip
 8000528:	e730      	b.n	800038c <__udivmoddi4+0x11c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000536:	f000 fb7c 	bl	8000c32 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800053a:	f000 f84b 	bl	80005d4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800053e:	f000 f8a5 	bl	800068c <MX_GPIO_Init>

	status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 8000542:	f107 0308 	add.w	r3, r7, #8
 8000546:	9301      	str	r3, [sp, #4]
 8000548:	2302      	movs	r3, #2
 800054a:	9300      	str	r3, [sp, #0]
 800054c:	4b1b      	ldr	r3, [pc, #108]	@ (80005bc <main+0x8c>)
 800054e:	22c8      	movs	r2, #200	@ 0xc8
 8000550:	491b      	ldr	r1, [pc, #108]	@ (80005c0 <main+0x90>)
 8000552:	481c      	ldr	r0, [pc, #112]	@ (80005c4 <main+0x94>)
 8000554:	f002 fa9d 	bl	8002a92 <xTaskCreate>
 8000558:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d00d      	beq.n	800057c <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000560:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8000564:	b672      	cpsid	i
 8000566:	f383 8811 	msr	BASEPRI, r3
 800056a:	f3bf 8f6f 	isb	sy
 800056e:	f3bf 8f4f 	dsb	sy
 8000572:	b662      	cpsie	i
 8000574:	613b      	str	r3, [r7, #16]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000576:	bf00      	nop
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <main+0x48>
	status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	2302      	movs	r3, #2
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	4b10      	ldr	r3, [pc, #64]	@ (80005c8 <main+0x98>)
 8000586:	22c8      	movs	r2, #200	@ 0xc8
 8000588:	4910      	ldr	r1, [pc, #64]	@ (80005cc <main+0x9c>)
 800058a:	4811      	ldr	r0, [pc, #68]	@ (80005d0 <main+0xa0>)
 800058c:	f002 fa81 	bl	8002a92 <xTaskCreate>
 8000590:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d00d      	beq.n	80005b4 <main+0x84>
        __asm volatile
 8000598:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800059c:	b672      	cpsid	i
 800059e:	f383 8811 	msr	BASEPRI, r3
 80005a2:	f3bf 8f6f 	isb	sy
 80005a6:	f3bf 8f4f 	dsb	sy
 80005aa:	b662      	cpsie	i
 80005ac:	60fb      	str	r3, [r7, #12]
    }
 80005ae:	bf00      	nop
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <main+0x80>


	// start the FreeRTOS Scheduler

	vTaskStartScheduler();
 80005b4:	f002 fbde 	bl	8002d74 <vTaskStartScheduler>



	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <main+0x88>
 80005bc:	080051cc 	.word	0x080051cc
 80005c0:	080051e4 	.word	0x080051e4
 80005c4:	080008b9 	.word	0x080008b9
 80005c8:	080051ec 	.word	0x080051ec
 80005cc:	08005204 	.word	0x08005204
 80005d0:	080008c9 	.word	0x080008c9

080005d4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	@ 0x50
 80005d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	2234      	movs	r2, #52	@ 0x34
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f004 fb1c 	bl	8004c20 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 0308 	add.w	r3, r7, #8
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	4b22      	ldr	r3, [pc, #136]	@ (8000684 <SystemClock_Config+0xb0>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005fc:	4a21      	ldr	r2, [pc, #132]	@ (8000684 <SystemClock_Config+0xb0>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	@ 0x40
 8000604:	4b1f      	ldr	r3, [pc, #124]	@ (8000684 <SystemClock_Config+0xb0>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000610:	4b1d      	ldr	r3, [pc, #116]	@ (8000688 <SystemClock_Config+0xb4>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000618:	4a1b      	ldr	r2, [pc, #108]	@ (8000688 <SystemClock_Config+0xb4>)
 800061a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b19      	ldr	r3, [pc, #100]	@ (8000688 <SystemClock_Config+0xb4>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062c:	2302      	movs	r3, #2
 800062e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	2301      	movs	r3, #1
 8000632:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000634:	2310      	movs	r3, #16
 8000636:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000638:	2300      	movs	r3, #0
 800063a:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 031c 	add.w	r3, r7, #28
 8000640:	4618      	mov	r0, r3
 8000642:	f000 fdcb 	bl	80011dc <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x7c>
	{
		Error_Handler();
 800064c:	f000 f956 	bl	80008fc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000660:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000666:	f107 0308 	add.w	r3, r7, #8
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f001 f863 	bl	8001738 <HAL_RCC_ClockConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0xa8>
	{
		Error_Handler();
 8000678:	f000 f940 	bl	80008fc <Error_Handler>
	}
}
 800067c:	bf00      	nop
 800067e:	3750      	adds	r7, #80	@ 0x50
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	@ 0x30
 8000690:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006a2:	4b7f      	ldr	r3, [pc, #508]	@ (80008a0 <MX_GPIO_Init+0x214>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	4a7e      	ldr	r2, [pc, #504]	@ (80008a0 <MX_GPIO_Init+0x214>)
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ae:	4b7c      	ldr	r3, [pc, #496]	@ (80008a0 <MX_GPIO_Init+0x214>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	f003 0304 	and.w	r3, r3, #4
 80006b6:	61bb      	str	r3, [r7, #24]
 80006b8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80006ba:	4b79      	ldr	r3, [pc, #484]	@ (80008a0 <MX_GPIO_Init+0x214>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a78      	ldr	r2, [pc, #480]	@ (80008a0 <MX_GPIO_Init+0x214>)
 80006c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b76      	ldr	r3, [pc, #472]	@ (80008a0 <MX_GPIO_Init+0x214>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b73      	ldr	r3, [pc, #460]	@ (80008a0 <MX_GPIO_Init+0x214>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	4a72      	ldr	r2, [pc, #456]	@ (80008a0 <MX_GPIO_Init+0x214>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006de:	4b70      	ldr	r3, [pc, #448]	@ (80008a0 <MX_GPIO_Init+0x214>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	4b6d      	ldr	r3, [pc, #436]	@ (80008a0 <MX_GPIO_Init+0x214>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	4a6c      	ldr	r2, [pc, #432]	@ (80008a0 <MX_GPIO_Init+0x214>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f6:	4b6a      	ldr	r3, [pc, #424]	@ (80008a0 <MX_GPIO_Init+0x214>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000702:	4b67      	ldr	r3, [pc, #412]	@ (80008a0 <MX_GPIO_Init+0x214>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a66      	ldr	r2, [pc, #408]	@ (80008a0 <MX_GPIO_Init+0x214>)
 8000708:	f043 0308 	orr.w	r3, r3, #8
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b64      	ldr	r3, [pc, #400]	@ (80008a0 <MX_GPIO_Init+0x214>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0308 	and.w	r3, r3, #8
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800071a:	4b61      	ldr	r3, [pc, #388]	@ (80008a0 <MX_GPIO_Init+0x214>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a60      	ldr	r2, [pc, #384]	@ (80008a0 <MX_GPIO_Init+0x214>)
 8000720:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b5e      	ldr	r3, [pc, #376]	@ (80008a0 <MX_GPIO_Init+0x214>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000738:	485a      	ldr	r0, [pc, #360]	@ (80008a4 <MX_GPIO_Init+0x218>)
 800073a:	f000 fd35 	bl	80011a8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2140      	movs	r1, #64	@ 0x40
 8000742:	4859      	ldr	r0, [pc, #356]	@ (80008a8 <MX_GPIO_Init+0x21c>)
 8000744:	f000 fd30 	bl	80011a8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000748:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800074c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800074e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000752:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	4619      	mov	r1, r3
 800075e:	4853      	ldr	r0, [pc, #332]	@ (80008ac <MX_GPIO_Init+0x220>)
 8000760:	f000 fb76 	bl	8000e50 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000764:	2332      	movs	r3, #50	@ 0x32
 8000766:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000768:	2302      	movs	r3, #2
 800076a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000770:	2303      	movs	r3, #3
 8000772:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000774:	230b      	movs	r3, #11
 8000776:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	4619      	mov	r1, r3
 800077e:	484b      	ldr	r0, [pc, #300]	@ (80008ac <MX_GPIO_Init+0x220>)
 8000780:	f000 fb66 	bl	8000e50 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000784:	2386      	movs	r3, #134	@ 0x86
 8000786:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000790:	2303      	movs	r3, #3
 8000792:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000794:	230b      	movs	r3, #11
 8000796:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000798:	f107 031c 	add.w	r3, r7, #28
 800079c:	4619      	mov	r1, r3
 800079e:	4844      	ldr	r0, [pc, #272]	@ (80008b0 <MX_GPIO_Init+0x224>)
 80007a0:	f000 fb56 	bl	8000e50 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007a4:	f244 0381 	movw	r3, #16513	@ 0x4081
 80007a8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	4839      	ldr	r0, [pc, #228]	@ (80008a4 <MX_GPIO_Init+0x218>)
 80007be:	f000 fb47 	bl	8000e50 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d0:	2303      	movs	r3, #3
 80007d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d4:	230b      	movs	r3, #11
 80007d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4619      	mov	r1, r3
 80007de:	4831      	ldr	r0, [pc, #196]	@ (80008a4 <MX_GPIO_Init+0x218>)
 80007e0:	f000 fb36 	bl	8000e50 <HAL_GPIO_Init>

	/*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
	GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80007e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007e8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	2302      	movs	r3, #2
 80007ec:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f2:	2303      	movs	r3, #3
 80007f4:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007f6:	2307      	movs	r3, #7
 80007f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	482c      	ldr	r0, [pc, #176]	@ (80008b4 <MX_GPIO_Init+0x228>)
 8000802:	f000 fb25 	bl	8000e50 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000806:	2340      	movs	r3, #64	@ 0x40
 8000808:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	4822      	ldr	r0, [pc, #136]	@ (80008a8 <MX_GPIO_Init+0x21c>)
 800081e:	f000 fb17 	bl	8000e50 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000822:	2380      	movs	r3, #128	@ 0x80
 8000824:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	481c      	ldr	r0, [pc, #112]	@ (80008a8 <MX_GPIO_Init+0x21c>)
 8000836:	f000 fb0b 	bl	8000e50 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800083a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800083e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2302      	movs	r3, #2
 8000842:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000848:	2303      	movs	r3, #3
 800084a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800084c:	230a      	movs	r3, #10
 800084e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	4816      	ldr	r0, [pc, #88]	@ (80008b0 <MX_GPIO_Init+0x224>)
 8000858:	f000 fafa 	bl	8000e50 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800085c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000860:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000862:	2300      	movs	r3, #0
 8000864:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	480f      	ldr	r0, [pc, #60]	@ (80008b0 <MX_GPIO_Init+0x224>)
 8000872:	f000 faed 	bl	8000e50 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000876:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800087a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000888:	230b      	movs	r3, #11
 800088a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_GPIO_Init+0x21c>)
 8000894:	f000 fadc 	bl	8000e50 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000898:	bf00      	nop
 800089a:	3730      	adds	r7, #48	@ 0x30
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020400 	.word	0x40020400
 80008a8:	40021800 	.word	0x40021800
 80008ac:	40020800 	.word	0x40020800
 80008b0:	40020000 	.word	0x40020000
 80008b4:	40020c00 	.word	0x40020c00

080008b8 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n", (char*)parameters);
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f004 f8cd 	bl	8004a60 <puts>
 80008c6:	e7fb      	b.n	80008c0 <task1_handler+0x8>

080008c8 <task2_handler>:
	}
}

static void task2_handler(void* parameters)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n", (char*)parameters);
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f004 f8c5 	bl	8004a60 <puts>
 80008d6:	e7fb      	b.n	80008d0 <task2_handler+0x8>

080008d8 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a04      	ldr	r2, [pc, #16]	@ (80008f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d101      	bne.n	80008ee <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80008ea:	f000 f9af 	bl	8000c4c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40001000 	.word	0x40001000

080008fc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <Error_Handler+0x8>

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800090e:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <HAL_MspInit+0x44>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000912:	4a0e      	ldr	r2, [pc, #56]	@ (800094c <HAL_MspInit+0x44>)
 8000914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000918:	6413      	str	r3, [r2, #64]	@ 0x40
 800091a:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <HAL_MspInit+0x44>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	4b09      	ldr	r3, [pc, #36]	@ (800094c <HAL_MspInit+0x44>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092a:	4a08      	ldr	r2, [pc, #32]	@ (800094c <HAL_MspInit+0x44>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000930:	6453      	str	r3, [r2, #68]	@ 0x44
 8000932:	4b06      	ldr	r3, [pc, #24]	@ (800094c <HAL_MspInit+0x44>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000936:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800

08000950 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08e      	sub	sp, #56	@ 0x38
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000958:	2300      	movs	r3, #0
 800095a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000960:	4b33      	ldr	r3, [pc, #204]	@ (8000a30 <HAL_InitTick+0xe0>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000964:	4a32      	ldr	r2, [pc, #200]	@ (8000a30 <HAL_InitTick+0xe0>)
 8000966:	f043 0310 	orr.w	r3, r3, #16
 800096a:	6413      	str	r3, [r2, #64]	@ 0x40
 800096c:	4b30      	ldr	r3, [pc, #192]	@ (8000a30 <HAL_InitTick+0xe0>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000970:	f003 0310 	and.w	r3, r3, #16
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000978:	f107 0210 	add.w	r2, r7, #16
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4611      	mov	r1, r2
 8000982:	4618      	mov	r0, r3
 8000984:	f001 f8e8 	bl	8001b58 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000988:	6a3b      	ldr	r3, [r7, #32]
 800098a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800098c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800098e:	2b00      	cmp	r3, #0
 8000990:	d103      	bne.n	800099a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000992:	f001 f8cd 	bl	8001b30 <HAL_RCC_GetPCLK1Freq>
 8000996:	6378      	str	r0, [r7, #52]	@ 0x34
 8000998:	e004      	b.n	80009a4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800099a:	f001 f8c9 	bl	8001b30 <HAL_RCC_GetPCLK1Freq>
 800099e:	4603      	mov	r3, r0
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009a6:	4a23      	ldr	r2, [pc, #140]	@ (8000a34 <HAL_InitTick+0xe4>)
 80009a8:	fba2 2303 	umull	r2, r3, r2, r3
 80009ac:	0c9b      	lsrs	r3, r3, #18
 80009ae:	3b01      	subs	r3, #1
 80009b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009b2:	4b21      	ldr	r3, [pc, #132]	@ (8000a38 <HAL_InitTick+0xe8>)
 80009b4:	4a21      	ldr	r2, [pc, #132]	@ (8000a3c <HAL_InitTick+0xec>)
 80009b6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a38 <HAL_InitTick+0xe8>)
 80009ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009be:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009c0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a38 <HAL_InitTick+0xe8>)
 80009c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009c4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a38 <HAL_InitTick+0xe8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a38 <HAL_InitTick+0xe8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d2:	4b19      	ldr	r3, [pc, #100]	@ (8000a38 <HAL_InitTick+0xe8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80009d8:	4817      	ldr	r0, [pc, #92]	@ (8000a38 <HAL_InitTick+0xe8>)
 80009da:	f001 f8ef 	bl	8001bbc <HAL_TIM_Base_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80009e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d11b      	bne.n	8000a24 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80009ec:	4812      	ldr	r0, [pc, #72]	@ (8000a38 <HAL_InitTick+0xe8>)
 80009ee:	f001 f947 	bl	8001c80 <HAL_TIM_Base_Start_IT>
 80009f2:	4603      	mov	r3, r0
 80009f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d111      	bne.n	8000a24 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a00:	2036      	movs	r0, #54	@ 0x36
 8000a02:	f000 fa17 	bl	8000e34 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2b0f      	cmp	r3, #15
 8000a0a:	d808      	bhi.n	8000a1e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	2036      	movs	r0, #54	@ 0x36
 8000a12:	f000 f9f3 	bl	8000dfc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a16:	4a0a      	ldr	r2, [pc, #40]	@ (8000a40 <HAL_InitTick+0xf0>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6013      	str	r3, [r2, #0]
 8000a1c:	e002      	b.n	8000a24 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3738      	adds	r7, #56	@ 0x38
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40023800 	.word	0x40023800
 8000a34:	431bde83 	.word	0x431bde83
 8000a38:	2000008c 	.word	0x2000008c
 8000a3c:	40001000 	.word	0x40001000
 8000a40:	20000004 	.word	0x20000004

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <NMI_Handler+0x4>

08000a4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <BusFault_Handler+0x4>

08000a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <UsageFault_Handler+0x4>

08000a6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
	...

08000a7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a80:	4802      	ldr	r0, [pc, #8]	@ (8000a8c <TIM6_DAC_IRQHandler+0x10>)
 8000a82:	f001 f975 	bl	8001d70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	2000008c 	.word	0x2000008c

08000a90 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <ITM_SendChar+0x48>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ad8 <ITM_SendChar+0x48>)
 8000aa0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000aa4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8000adc <ITM_SendChar+0x4c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a0c      	ldr	r2, [pc, #48]	@ (8000adc <ITM_SendChar+0x4c>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000ab2:	bf00      	nop
 8000ab4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d0f8      	beq.n	8000ab4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000ac2:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	6013      	str	r3, [r2, #0]
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000edfc 	.word	0xe000edfc
 8000adc:	e0000e00 	.word	0xe0000e00

08000ae0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	e00a      	b.n	8000b08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000af2:	f3af 8000 	nop.w
 8000af6:	4601      	mov	r1, r0
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	1c5a      	adds	r2, r3, #1
 8000afc:	60ba      	str	r2, [r7, #8]
 8000afe:	b2ca      	uxtb	r2, r1
 8000b00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	3301      	adds	r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	697a      	ldr	r2, [r7, #20]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	dbf0      	blt.n	8000af2 <_read+0x12>
  }

  return len;
 8000b10:	687b      	ldr	r3, [r7, #4]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3718      	adds	r7, #24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b086      	sub	sp, #24
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	60f8      	str	r0, [r7, #12]
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	e009      	b.n	8000b40 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	1c5a      	adds	r2, r3, #1
 8000b30:	60ba      	str	r2, [r7, #8]
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ffab 	bl	8000a90 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697a      	ldr	r2, [r7, #20]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	dbf1      	blt.n	8000b2c <_write+0x12>
  }
  return len;
 8000b48:	687b      	ldr	r3, [r7, #4]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <_close>:

int _close(int file)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
 8000b72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b7a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <_isatty>:

int _isatty(int file)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b92:	2301      	movs	r3, #1
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3714      	adds	r7, #20
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <SystemInit+0x20>)
 8000bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bc6:	4a05      	ldr	r2, [pc, #20]	@ (8000bdc <SystemInit+0x20>)
 8000bc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000be0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be4:	480d      	ldr	r0, [pc, #52]	@ (8000c1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000be6:	490e      	ldr	r1, [pc, #56]	@ (8000c20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000be8:	4a0e      	ldr	r2, [pc, #56]	@ (8000c24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0b      	ldr	r2, [pc, #44]	@ (8000c28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bfc:	4c0b      	ldr	r4, [pc, #44]	@ (8000c2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c0a:	f7ff ffd7 	bl	8000bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c0e:	f004 f855 	bl	8004cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c12:	f7ff fc8d 	bl	8000530 <main>
  bx  lr    
 8000c16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c18:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c20:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c24:	0800525c 	.word	0x0800525c
  ldr r2, =_sbss
 8000c28:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c2c:	2000bbd0 	.word	0x2000bbd0

08000c30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c30:	e7fe      	b.n	8000c30 <ADC_IRQHandler>

08000c32 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c36:	2003      	movs	r0, #3
 8000c38:	f000 f8d5 	bl	8000de6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3c:	200f      	movs	r0, #15
 8000c3e:	f7ff fe87 	bl	8000950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c42:	f7ff fe61 	bl	8000908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c46:	2300      	movs	r3, #0
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <HAL_IncTick+0x20>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <HAL_IncTick+0x24>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a04      	ldr	r2, [pc, #16]	@ (8000c70 <HAL_IncTick+0x24>)
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	200000d8 	.word	0x200000d8

08000c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return uwTick;
 8000c78:	4b03      	ldr	r3, [pc, #12]	@ (8000c88 <HAL_GetTick+0x14>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	200000d8 	.word	0x200000d8

08000c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <__NVIC_SetPriorityGrouping+0x40>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cba:	4a04      	ldr	r2, [pc, #16]	@ (8000ccc <__NVIC_SetPriorityGrouping+0x40>)
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	60d3      	str	r3, [r2, #12]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00
 8000cd0:	05fa0000 	.word	0x05fa0000

08000cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd8:	4b04      	ldr	r3, [pc, #16]	@ (8000cec <__NVIC_GetPriorityGrouping+0x18>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	0a1b      	lsrs	r3, r3, #8
 8000cde:	f003 0307 	and.w	r3, r3, #7
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	db0b      	blt.n	8000d1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	f003 021f 	and.w	r2, r3, #31
 8000d08:	4907      	ldr	r1, [pc, #28]	@ (8000d28 <__NVIC_EnableIRQ+0x38>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	095b      	lsrs	r3, r3, #5
 8000d10:	2001      	movs	r0, #1
 8000d12:	fa00 f202 	lsl.w	r2, r0, r2
 8000d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000e100 	.word	0xe000e100

08000d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	6039      	str	r1, [r7, #0]
 8000d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	db0a      	blt.n	8000d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	490c      	ldr	r1, [pc, #48]	@ (8000d78 <__NVIC_SetPriority+0x4c>)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	0112      	lsls	r2, r2, #4
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	440b      	add	r3, r1
 8000d50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d54:	e00a      	b.n	8000d6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4908      	ldr	r1, [pc, #32]	@ (8000d7c <__NVIC_SetPriority+0x50>)
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	f003 030f 	and.w	r3, r3, #15
 8000d62:	3b04      	subs	r3, #4
 8000d64:	0112      	lsls	r2, r2, #4
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	440b      	add	r3, r1
 8000d6a:	761a      	strb	r2, [r3, #24]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000e100 	.word	0xe000e100
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	@ 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f1c3 0307 	rsb	r3, r3, #7
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	bf28      	it	cs
 8000d9e:	2304      	movcs	r3, #4
 8000da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3304      	adds	r3, #4
 8000da6:	2b06      	cmp	r3, #6
 8000da8:	d902      	bls.n	8000db0 <NVIC_EncodePriority+0x30>
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3b03      	subs	r3, #3
 8000dae:	e000      	b.n	8000db2 <NVIC_EncodePriority+0x32>
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd2:	43d9      	mvns	r1, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	4313      	orrs	r3, r2
         );
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3724      	adds	r7, #36	@ 0x24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff ff4c 	bl	8000c8c <__NVIC_SetPriorityGrouping>
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
 8000e08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e0e:	f7ff ff61 	bl	8000cd4 <__NVIC_GetPriorityGrouping>
 8000e12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	68b9      	ldr	r1, [r7, #8]
 8000e18:	6978      	ldr	r0, [r7, #20]
 8000e1a:	f7ff ffb1 	bl	8000d80 <NVIC_EncodePriority>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e24:	4611      	mov	r1, r2
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ff80 	bl	8000d2c <__NVIC_SetPriority>
}
 8000e2c:	bf00      	nop
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ff54 	bl	8000cf0 <__NVIC_EnableIRQ>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	@ 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
 8000e6e:	e175      	b.n	800115c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e70:	2201      	movs	r2, #1
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	697a      	ldr	r2, [r7, #20]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	f040 8164 	bne.w	8001156 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 0303 	and.w	r3, r3, #3
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d005      	beq.n	8000ea6 <HAL_GPIO_Init+0x56>
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d130      	bne.n	8000f08 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	68da      	ldr	r2, [r3, #12]
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000edc:	2201      	movs	r2, #1
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	091b      	lsrs	r3, r3, #4
 8000ef2:	f003 0201 	and.w	r2, r3, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d017      	beq.n	8000f44 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d123      	bne.n	8000f98 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	08da      	lsrs	r2, r3, #3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3208      	adds	r2, #8
 8000f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	f003 0307 	and.w	r3, r3, #7
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	220f      	movs	r2, #15
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	691a      	ldr	r2, [r3, #16]
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	08da      	lsrs	r2, r3, #3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3208      	adds	r2, #8
 8000f92:	69b9      	ldr	r1, [r7, #24]
 8000f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 0203 	and.w	r2, r3, #3
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f000 80be 	beq.w	8001156 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fda:	4b66      	ldr	r3, [pc, #408]	@ (8001174 <HAL_GPIO_Init+0x324>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fde:	4a65      	ldr	r2, [pc, #404]	@ (8001174 <HAL_GPIO_Init+0x324>)
 8000fe0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fe4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fe6:	4b63      	ldr	r3, [pc, #396]	@ (8001174 <HAL_GPIO_Init+0x324>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ff2:	4a61      	ldr	r2, [pc, #388]	@ (8001178 <HAL_GPIO_Init+0x328>)
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	089b      	lsrs	r3, r3, #2
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	220f      	movs	r2, #15
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4013      	ands	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a58      	ldr	r2, [pc, #352]	@ (800117c <HAL_GPIO_Init+0x32c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d037      	beq.n	800108e <HAL_GPIO_Init+0x23e>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a57      	ldr	r2, [pc, #348]	@ (8001180 <HAL_GPIO_Init+0x330>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d031      	beq.n	800108a <HAL_GPIO_Init+0x23a>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a56      	ldr	r2, [pc, #344]	@ (8001184 <HAL_GPIO_Init+0x334>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d02b      	beq.n	8001086 <HAL_GPIO_Init+0x236>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a55      	ldr	r2, [pc, #340]	@ (8001188 <HAL_GPIO_Init+0x338>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d025      	beq.n	8001082 <HAL_GPIO_Init+0x232>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a54      	ldr	r2, [pc, #336]	@ (800118c <HAL_GPIO_Init+0x33c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d01f      	beq.n	800107e <HAL_GPIO_Init+0x22e>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a53      	ldr	r2, [pc, #332]	@ (8001190 <HAL_GPIO_Init+0x340>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d019      	beq.n	800107a <HAL_GPIO_Init+0x22a>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a52      	ldr	r2, [pc, #328]	@ (8001194 <HAL_GPIO_Init+0x344>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d013      	beq.n	8001076 <HAL_GPIO_Init+0x226>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a51      	ldr	r2, [pc, #324]	@ (8001198 <HAL_GPIO_Init+0x348>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d00d      	beq.n	8001072 <HAL_GPIO_Init+0x222>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a50      	ldr	r2, [pc, #320]	@ (800119c <HAL_GPIO_Init+0x34c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d007      	beq.n	800106e <HAL_GPIO_Init+0x21e>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a4f      	ldr	r2, [pc, #316]	@ (80011a0 <HAL_GPIO_Init+0x350>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d101      	bne.n	800106a <HAL_GPIO_Init+0x21a>
 8001066:	2309      	movs	r3, #9
 8001068:	e012      	b.n	8001090 <HAL_GPIO_Init+0x240>
 800106a:	230a      	movs	r3, #10
 800106c:	e010      	b.n	8001090 <HAL_GPIO_Init+0x240>
 800106e:	2308      	movs	r3, #8
 8001070:	e00e      	b.n	8001090 <HAL_GPIO_Init+0x240>
 8001072:	2307      	movs	r3, #7
 8001074:	e00c      	b.n	8001090 <HAL_GPIO_Init+0x240>
 8001076:	2306      	movs	r3, #6
 8001078:	e00a      	b.n	8001090 <HAL_GPIO_Init+0x240>
 800107a:	2305      	movs	r3, #5
 800107c:	e008      	b.n	8001090 <HAL_GPIO_Init+0x240>
 800107e:	2304      	movs	r3, #4
 8001080:	e006      	b.n	8001090 <HAL_GPIO_Init+0x240>
 8001082:	2303      	movs	r3, #3
 8001084:	e004      	b.n	8001090 <HAL_GPIO_Init+0x240>
 8001086:	2302      	movs	r3, #2
 8001088:	e002      	b.n	8001090 <HAL_GPIO_Init+0x240>
 800108a:	2301      	movs	r3, #1
 800108c:	e000      	b.n	8001090 <HAL_GPIO_Init+0x240>
 800108e:	2300      	movs	r3, #0
 8001090:	69fa      	ldr	r2, [r7, #28]
 8001092:	f002 0203 	and.w	r2, r2, #3
 8001096:	0092      	lsls	r2, r2, #2
 8001098:	4093      	lsls	r3, r2
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80010a0:	4935      	ldr	r1, [pc, #212]	@ (8001178 <HAL_GPIO_Init+0x328>)
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	089b      	lsrs	r3, r3, #2
 80010a6:	3302      	adds	r3, #2
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ae:	4b3d      	ldr	r3, [pc, #244]	@ (80011a4 <HAL_GPIO_Init+0x354>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010d2:	4a34      	ldr	r2, [pc, #208]	@ (80011a4 <HAL_GPIO_Init+0x354>)
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010d8:	4b32      	ldr	r3, [pc, #200]	@ (80011a4 <HAL_GPIO_Init+0x354>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010fc:	4a29      	ldr	r2, [pc, #164]	@ (80011a4 <HAL_GPIO_Init+0x354>)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001102:	4b28      	ldr	r3, [pc, #160]	@ (80011a4 <HAL_GPIO_Init+0x354>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001126:	4a1f      	ldr	r2, [pc, #124]	@ (80011a4 <HAL_GPIO_Init+0x354>)
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800112c:	4b1d      	ldr	r3, [pc, #116]	@ (80011a4 <HAL_GPIO_Init+0x354>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001150:	4a14      	ldr	r2, [pc, #80]	@ (80011a4 <HAL_GPIO_Init+0x354>)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3301      	adds	r3, #1
 800115a:	61fb      	str	r3, [r7, #28]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	2b0f      	cmp	r3, #15
 8001160:	f67f ae86 	bls.w	8000e70 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	3724      	adds	r7, #36	@ 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800
 8001178:	40013800 	.word	0x40013800
 800117c:	40020000 	.word	0x40020000
 8001180:	40020400 	.word	0x40020400
 8001184:	40020800 	.word	0x40020800
 8001188:	40020c00 	.word	0x40020c00
 800118c:	40021000 	.word	0x40021000
 8001190:	40021400 	.word	0x40021400
 8001194:	40021800 	.word	0x40021800
 8001198:	40021c00 	.word	0x40021c00
 800119c:	40022000 	.word	0x40022000
 80011a0:	40022400 	.word	0x40022400
 80011a4:	40013c00 	.word	0x40013c00

080011a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	807b      	strh	r3, [r7, #2]
 80011b4:	4613      	mov	r3, r2
 80011b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b8:	787b      	ldrb	r3, [r7, #1]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011be:	887a      	ldrh	r2, [r7, #2]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80011c4:	e003      	b.n	80011ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011c6:	887b      	ldrh	r3, [r7, #2]
 80011c8:	041a      	lsls	r2, r3, #16
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	619a      	str	r2, [r3, #24]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80011e4:	2300      	movs	r3, #0
 80011e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e29b      	b.n	800172a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f000 8087 	beq.w	800130e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001200:	4b96      	ldr	r3, [pc, #600]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f003 030c 	and.w	r3, r3, #12
 8001208:	2b04      	cmp	r3, #4
 800120a:	d00c      	beq.n	8001226 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800120c:	4b93      	ldr	r3, [pc, #588]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 030c 	and.w	r3, r3, #12
 8001214:	2b08      	cmp	r3, #8
 8001216:	d112      	bne.n	800123e <HAL_RCC_OscConfig+0x62>
 8001218:	4b90      	ldr	r3, [pc, #576]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001220:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001224:	d10b      	bne.n	800123e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001226:	4b8d      	ldr	r3, [pc, #564]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d06c      	beq.n	800130c <HAL_RCC_OscConfig+0x130>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d168      	bne.n	800130c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e275      	b.n	800172a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001246:	d106      	bne.n	8001256 <HAL_RCC_OscConfig+0x7a>
 8001248:	4b84      	ldr	r3, [pc, #528]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a83      	ldr	r2, [pc, #524]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 800124e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	e02e      	b.n	80012b4 <HAL_RCC_OscConfig+0xd8>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d10c      	bne.n	8001278 <HAL_RCC_OscConfig+0x9c>
 800125e:	4b7f      	ldr	r3, [pc, #508]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a7e      	ldr	r2, [pc, #504]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 8001264:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	4b7c      	ldr	r3, [pc, #496]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a7b      	ldr	r2, [pc, #492]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 8001270:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e01d      	b.n	80012b4 <HAL_RCC_OscConfig+0xd8>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001280:	d10c      	bne.n	800129c <HAL_RCC_OscConfig+0xc0>
 8001282:	4b76      	ldr	r3, [pc, #472]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a75      	ldr	r2, [pc, #468]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 8001288:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	4b73      	ldr	r3, [pc, #460]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a72      	ldr	r2, [pc, #456]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 8001294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e00b      	b.n	80012b4 <HAL_RCC_OscConfig+0xd8>
 800129c:	4b6f      	ldr	r3, [pc, #444]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a6e      	ldr	r2, [pc, #440]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 80012a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b6c      	ldr	r3, [pc, #432]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a6b      	ldr	r2, [pc, #428]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 80012ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d013      	beq.n	80012e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012bc:	f7ff fcda 	bl	8000c74 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c4:	f7ff fcd6 	bl	8000c74 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	@ 0x64
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e229      	b.n	800172a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d6:	4b61      	ldr	r3, [pc, #388]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0f0      	beq.n	80012c4 <HAL_RCC_OscConfig+0xe8>
 80012e2:	e014      	b.n	800130e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e4:	f7ff fcc6 	bl	8000c74 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012ec:	f7ff fcc2 	bl	8000c74 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b64      	cmp	r3, #100	@ 0x64
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e215      	b.n	800172a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fe:	4b57      	ldr	r3, [pc, #348]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f0      	bne.n	80012ec <HAL_RCC_OscConfig+0x110>
 800130a:	e000      	b.n	800130e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d069      	beq.n	80013ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800131a:	4b50      	ldr	r3, [pc, #320]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 030c 	and.w	r3, r3, #12
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00b      	beq.n	800133e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001326:	4b4d      	ldr	r3, [pc, #308]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	2b08      	cmp	r3, #8
 8001330:	d11c      	bne.n	800136c <HAL_RCC_OscConfig+0x190>
 8001332:	4b4a      	ldr	r3, [pc, #296]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d116      	bne.n	800136c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133e:	4b47      	ldr	r3, [pc, #284]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d005      	beq.n	8001356 <HAL_RCC_OscConfig+0x17a>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d001      	beq.n	8001356 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e1e9      	b.n	800172a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001356:	4b41      	ldr	r3, [pc, #260]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	493d      	ldr	r1, [pc, #244]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 8001366:	4313      	orrs	r3, r2
 8001368:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136a:	e040      	b.n	80013ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d023      	beq.n	80013bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001374:	4b39      	ldr	r3, [pc, #228]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a38      	ldr	r2, [pc, #224]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001380:	f7ff fc78 	bl	8000c74 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001388:	f7ff fc74 	bl	8000c74 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e1c7      	b.n	800172a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139a:	4b30      	ldr	r3, [pc, #192]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a6:	4b2d      	ldr	r3, [pc, #180]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	4929      	ldr	r1, [pc, #164]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]
 80013ba:	e018      	b.n	80013ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013bc:	4b27      	ldr	r3, [pc, #156]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a26      	ldr	r2, [pc, #152]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 80013c2:	f023 0301 	bic.w	r3, r3, #1
 80013c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c8:	f7ff fc54 	bl	8000c74 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013d0:	f7ff fc50 	bl	8000c74 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e1a3      	b.n	800172a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e2:	4b1e      	ldr	r3, [pc, #120]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f0      	bne.n	80013d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0308 	and.w	r3, r3, #8
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d038      	beq.n	800146c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d019      	beq.n	8001436 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001402:	4b16      	ldr	r3, [pc, #88]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 8001404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001406:	4a15      	ldr	r2, [pc, #84]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800140e:	f7ff fc31 	bl	8000c74 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001416:	f7ff fc2d 	bl	8000c74 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e180      	b.n	800172a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001428:	4b0c      	ldr	r3, [pc, #48]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 800142a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0x23a>
 8001434:	e01a      	b.n	800146c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001436:	4b09      	ldr	r3, [pc, #36]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 8001438:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800143a:	4a08      	ldr	r2, [pc, #32]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 800143c:	f023 0301 	bic.w	r3, r3, #1
 8001440:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001442:	f7ff fc17 	bl	8000c74 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001448:	e00a      	b.n	8001460 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800144a:	f7ff fc13 	bl	8000c74 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d903      	bls.n	8001460 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e166      	b.n	800172a <HAL_RCC_OscConfig+0x54e>
 800145c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001460:	4b92      	ldr	r3, [pc, #584]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 8001462:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1ee      	bne.n	800144a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 80a4 	beq.w	80015c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800147a:	4b8c      	ldr	r3, [pc, #560]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10d      	bne.n	80014a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001486:	4b89      	ldr	r3, [pc, #548]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	4a88      	ldr	r2, [pc, #544]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001490:	6413      	str	r3, [r2, #64]	@ 0x40
 8001492:	4b86      	ldr	r3, [pc, #536]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800149e:	2301      	movs	r3, #1
 80014a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a2:	4b83      	ldr	r3, [pc, #524]	@ (80016b0 <HAL_RCC_OscConfig+0x4d4>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d118      	bne.n	80014e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80014ae:	4b80      	ldr	r3, [pc, #512]	@ (80016b0 <HAL_RCC_OscConfig+0x4d4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a7f      	ldr	r2, [pc, #508]	@ (80016b0 <HAL_RCC_OscConfig+0x4d4>)
 80014b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ba:	f7ff fbdb 	bl	8000c74 <HAL_GetTick>
 80014be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c2:	f7ff fbd7 	bl	8000c74 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b64      	cmp	r3, #100	@ 0x64
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e12a      	b.n	800172a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014d4:	4b76      	ldr	r3, [pc, #472]	@ (80016b0 <HAL_RCC_OscConfig+0x4d4>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d106      	bne.n	80014f6 <HAL_RCC_OscConfig+0x31a>
 80014e8:	4b70      	ldr	r3, [pc, #448]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 80014ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ec:	4a6f      	ldr	r2, [pc, #444]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80014f4:	e02d      	b.n	8001552 <HAL_RCC_OscConfig+0x376>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10c      	bne.n	8001518 <HAL_RCC_OscConfig+0x33c>
 80014fe:	4b6b      	ldr	r3, [pc, #428]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 8001500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001502:	4a6a      	ldr	r2, [pc, #424]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 8001504:	f023 0301 	bic.w	r3, r3, #1
 8001508:	6713      	str	r3, [r2, #112]	@ 0x70
 800150a:	4b68      	ldr	r3, [pc, #416]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 800150c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800150e:	4a67      	ldr	r2, [pc, #412]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 8001510:	f023 0304 	bic.w	r3, r3, #4
 8001514:	6713      	str	r3, [r2, #112]	@ 0x70
 8001516:	e01c      	b.n	8001552 <HAL_RCC_OscConfig+0x376>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b05      	cmp	r3, #5
 800151e:	d10c      	bne.n	800153a <HAL_RCC_OscConfig+0x35e>
 8001520:	4b62      	ldr	r3, [pc, #392]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 8001522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001524:	4a61      	ldr	r2, [pc, #388]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 8001526:	f043 0304 	orr.w	r3, r3, #4
 800152a:	6713      	str	r3, [r2, #112]	@ 0x70
 800152c:	4b5f      	ldr	r3, [pc, #380]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 800152e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001530:	4a5e      	ldr	r2, [pc, #376]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6713      	str	r3, [r2, #112]	@ 0x70
 8001538:	e00b      	b.n	8001552 <HAL_RCC_OscConfig+0x376>
 800153a:	4b5c      	ldr	r3, [pc, #368]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 800153c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800153e:	4a5b      	ldr	r2, [pc, #364]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 8001540:	f023 0301 	bic.w	r3, r3, #1
 8001544:	6713      	str	r3, [r2, #112]	@ 0x70
 8001546:	4b59      	ldr	r3, [pc, #356]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 8001548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800154a:	4a58      	ldr	r2, [pc, #352]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 800154c:	f023 0304 	bic.w	r3, r3, #4
 8001550:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d015      	beq.n	8001586 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155a:	f7ff fb8b 	bl	8000c74 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001560:	e00a      	b.n	8001578 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001562:	f7ff fb87 	bl	8000c74 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001570:	4293      	cmp	r3, r2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e0d8      	b.n	800172a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001578:	4b4c      	ldr	r3, [pc, #304]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 800157a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0ee      	beq.n	8001562 <HAL_RCC_OscConfig+0x386>
 8001584:	e014      	b.n	80015b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001586:	f7ff fb75 	bl	8000c74 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800158c:	e00a      	b.n	80015a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800158e:	f7ff fb71 	bl	8000c74 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800159c:	4293      	cmp	r3, r2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e0c2      	b.n	800172a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a4:	4b41      	ldr	r3, [pc, #260]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 80015a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1ee      	bne.n	800158e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d105      	bne.n	80015c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b6:	4b3d      	ldr	r3, [pc, #244]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	4a3c      	ldr	r2, [pc, #240]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 80015bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015c0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 80ae 	beq.w	8001728 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015cc:	4b37      	ldr	r3, [pc, #220]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f003 030c 	and.w	r3, r3, #12
 80015d4:	2b08      	cmp	r3, #8
 80015d6:	d06d      	beq.n	80016b4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d14b      	bne.n	8001678 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e0:	4b32      	ldr	r3, [pc, #200]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a31      	ldr	r2, [pc, #196]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 80015e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80015ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ec:	f7ff fb42 	bl	8000c74 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f4:	f7ff fb3e 	bl	8000c74 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e091      	b.n	800172a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001606:	4b29      	ldr	r3, [pc, #164]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69da      	ldr	r2, [r3, #28]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001620:	019b      	lsls	r3, r3, #6
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001628:	085b      	lsrs	r3, r3, #1
 800162a:	3b01      	subs	r3, #1
 800162c:	041b      	lsls	r3, r3, #16
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001634:	061b      	lsls	r3, r3, #24
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163c:	071b      	lsls	r3, r3, #28
 800163e:	491b      	ldr	r1, [pc, #108]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001644:	4b19      	ldr	r3, [pc, #100]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a18      	ldr	r2, [pc, #96]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 800164a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800164e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001650:	f7ff fb10 	bl	8000c74 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001658:	f7ff fb0c 	bl	8000c74 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e05f      	b.n	800172a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166a:	4b10      	ldr	r3, [pc, #64]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f0      	beq.n	8001658 <HAL_RCC_OscConfig+0x47c>
 8001676:	e057      	b.n	8001728 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001678:	4b0c      	ldr	r3, [pc, #48]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0b      	ldr	r2, [pc, #44]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 800167e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001684:	f7ff faf6 	bl	8000c74 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800168c:	f7ff faf2 	bl	8000c74 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e045      	b.n	800172a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169e:	4b03      	ldr	r3, [pc, #12]	@ (80016ac <HAL_RCC_OscConfig+0x4d0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x4b0>
 80016aa:	e03d      	b.n	8001728 <HAL_RCC_OscConfig+0x54c>
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80016b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001734 <HAL_RCC_OscConfig+0x558>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d030      	beq.n	8001724 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d129      	bne.n	8001724 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016da:	429a      	cmp	r2, r3
 80016dc:	d122      	bne.n	8001724 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016e4:	4013      	ands	r3, r2
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d119      	bne.n	8001724 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016fa:	085b      	lsrs	r3, r3, #1
 80016fc:	3b01      	subs	r3, #1
 80016fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001700:	429a      	cmp	r2, r3
 8001702:	d10f      	bne.n	8001724 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800170e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001710:	429a      	cmp	r2, r3
 8001712:	d107      	bne.n	8001724 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001720:	429a      	cmp	r2, r3
 8001722:	d001      	beq.n	8001728 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800

08001738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0d0      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001750:	4b6a      	ldr	r3, [pc, #424]	@ (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 030f 	and.w	r3, r3, #15
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d910      	bls.n	8001780 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b67      	ldr	r3, [pc, #412]	@ (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f023 020f 	bic.w	r2, r3, #15
 8001766:	4965      	ldr	r1, [pc, #404]	@ (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	4313      	orrs	r3, r2
 800176c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800176e:	4b63      	ldr	r3, [pc, #396]	@ (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0b8      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d020      	beq.n	80017ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001798:	4b59      	ldr	r3, [pc, #356]	@ (8001900 <HAL_RCC_ClockConfig+0x1c8>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a58      	ldr	r2, [pc, #352]	@ (8001900 <HAL_RCC_ClockConfig+0x1c8>)
 800179e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b0:	4b53      	ldr	r3, [pc, #332]	@ (8001900 <HAL_RCC_ClockConfig+0x1c8>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	4a52      	ldr	r2, [pc, #328]	@ (8001900 <HAL_RCC_ClockConfig+0x1c8>)
 80017b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017bc:	4b50      	ldr	r3, [pc, #320]	@ (8001900 <HAL_RCC_ClockConfig+0x1c8>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	494d      	ldr	r1, [pc, #308]	@ (8001900 <HAL_RCC_ClockConfig+0x1c8>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d040      	beq.n	800185c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d107      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	4b47      	ldr	r3, [pc, #284]	@ (8001900 <HAL_RCC_ClockConfig+0x1c8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d115      	bne.n	800181a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e07f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d107      	bne.n	800180a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fa:	4b41      	ldr	r3, [pc, #260]	@ (8001900 <HAL_RCC_ClockConfig+0x1c8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d109      	bne.n	800181a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e073      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180a:	4b3d      	ldr	r3, [pc, #244]	@ (8001900 <HAL_RCC_ClockConfig+0x1c8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e06b      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181a:	4b39      	ldr	r3, [pc, #228]	@ (8001900 <HAL_RCC_ClockConfig+0x1c8>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f023 0203 	bic.w	r2, r3, #3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	4936      	ldr	r1, [pc, #216]	@ (8001900 <HAL_RCC_ClockConfig+0x1c8>)
 8001828:	4313      	orrs	r3, r2
 800182a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800182c:	f7ff fa22 	bl	8000c74 <HAL_GetTick>
 8001830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001832:	e00a      	b.n	800184a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001834:	f7ff fa1e 	bl	8000c74 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001842:	4293      	cmp	r3, r2
 8001844:	d901      	bls.n	800184a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e053      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184a:	4b2d      	ldr	r3, [pc, #180]	@ (8001900 <HAL_RCC_ClockConfig+0x1c8>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 020c 	and.w	r2, r3, #12
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	429a      	cmp	r2, r3
 800185a:	d1eb      	bne.n	8001834 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800185c:	4b27      	ldr	r3, [pc, #156]	@ (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 030f 	and.w	r3, r3, #15
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d210      	bcs.n	800188c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186a:	4b24      	ldr	r3, [pc, #144]	@ (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f023 020f 	bic.w	r2, r3, #15
 8001872:	4922      	ldr	r1, [pc, #136]	@ (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	4313      	orrs	r3, r2
 8001878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800187a:	4b20      	ldr	r3, [pc, #128]	@ (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d001      	beq.n	800188c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e032      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d008      	beq.n	80018aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001898:	4b19      	ldr	r3, [pc, #100]	@ (8001900 <HAL_RCC_ClockConfig+0x1c8>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	4916      	ldr	r1, [pc, #88]	@ (8001900 <HAL_RCC_ClockConfig+0x1c8>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d009      	beq.n	80018ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018b6:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <HAL_RCC_ClockConfig+0x1c8>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	490e      	ldr	r1, [pc, #56]	@ (8001900 <HAL_RCC_ClockConfig+0x1c8>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018ca:	f000 f821 	bl	8001910 <HAL_RCC_GetSysClockFreq>
 80018ce:	4602      	mov	r2, r0
 80018d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <HAL_RCC_ClockConfig+0x1c8>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	490a      	ldr	r1, [pc, #40]	@ (8001904 <HAL_RCC_ClockConfig+0x1cc>)
 80018dc:	5ccb      	ldrb	r3, [r1, r3]
 80018de:	fa22 f303 	lsr.w	r3, r2, r3
 80018e2:	4a09      	ldr	r2, [pc, #36]	@ (8001908 <HAL_RCC_ClockConfig+0x1d0>)
 80018e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018e6:	4b09      	ldr	r3, [pc, #36]	@ (800190c <HAL_RCC_ClockConfig+0x1d4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff f830 	bl	8000950 <HAL_InitTick>

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023c00 	.word	0x40023c00
 8001900:	40023800 	.word	0x40023800
 8001904:	08005234 	.word	0x08005234
 8001908:	20000000 	.word	0x20000000
 800190c:	20000004 	.word	0x20000004

08001910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001914:	b094      	sub	sp, #80	@ 0x50
 8001916:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	647b      	str	r3, [r7, #68]	@ 0x44
 800191c:	2300      	movs	r3, #0
 800191e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001920:	2300      	movs	r3, #0
 8001922:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001928:	4b79      	ldr	r3, [pc, #484]	@ (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b08      	cmp	r3, #8
 8001932:	d00d      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x40>
 8001934:	2b08      	cmp	r3, #8
 8001936:	f200 80e1 	bhi.w	8001afc <HAL_RCC_GetSysClockFreq+0x1ec>
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x34>
 800193e:	2b04      	cmp	r3, #4
 8001940:	d003      	beq.n	800194a <HAL_RCC_GetSysClockFreq+0x3a>
 8001942:	e0db      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001944:	4b73      	ldr	r3, [pc, #460]	@ (8001b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001946:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001948:	e0db      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800194a:	4b72      	ldr	r3, [pc, #456]	@ (8001b14 <HAL_RCC_GetSysClockFreq+0x204>)
 800194c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800194e:	e0d8      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001950:	4b6f      	ldr	r3, [pc, #444]	@ (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001958:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800195a:	4b6d      	ldr	r3, [pc, #436]	@ (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d063      	beq.n	8001a2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001966:	4b6a      	ldr	r3, [pc, #424]	@ (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	099b      	lsrs	r3, r3, #6
 800196c:	2200      	movs	r2, #0
 800196e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001970:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001978:	633b      	str	r3, [r7, #48]	@ 0x30
 800197a:	2300      	movs	r3, #0
 800197c:	637b      	str	r3, [r7, #52]	@ 0x34
 800197e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001982:	4622      	mov	r2, r4
 8001984:	462b      	mov	r3, r5
 8001986:	f04f 0000 	mov.w	r0, #0
 800198a:	f04f 0100 	mov.w	r1, #0
 800198e:	0159      	lsls	r1, r3, #5
 8001990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001994:	0150      	lsls	r0, r2, #5
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4621      	mov	r1, r4
 800199c:	1a51      	subs	r1, r2, r1
 800199e:	6139      	str	r1, [r7, #16]
 80019a0:	4629      	mov	r1, r5
 80019a2:	eb63 0301 	sbc.w	r3, r3, r1
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019b4:	4659      	mov	r1, fp
 80019b6:	018b      	lsls	r3, r1, #6
 80019b8:	4651      	mov	r1, sl
 80019ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019be:	4651      	mov	r1, sl
 80019c0:	018a      	lsls	r2, r1, #6
 80019c2:	4651      	mov	r1, sl
 80019c4:	ebb2 0801 	subs.w	r8, r2, r1
 80019c8:	4659      	mov	r1, fp
 80019ca:	eb63 0901 	sbc.w	r9, r3, r1
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019e2:	4690      	mov	r8, r2
 80019e4:	4699      	mov	r9, r3
 80019e6:	4623      	mov	r3, r4
 80019e8:	eb18 0303 	adds.w	r3, r8, r3
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	462b      	mov	r3, r5
 80019f0:	eb49 0303 	adc.w	r3, r9, r3
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a02:	4629      	mov	r1, r5
 8001a04:	028b      	lsls	r3, r1, #10
 8001a06:	4621      	mov	r1, r4
 8001a08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a0c:	4621      	mov	r1, r4
 8001a0e:	028a      	lsls	r2, r1, #10
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a16:	2200      	movs	r2, #0
 8001a18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a20:	f7fe fc0e 	bl	8000240 <__aeabi_uldivmod>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4613      	mov	r3, r2
 8001a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a2c:	e058      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a2e:	4b38      	ldr	r3, [pc, #224]	@ (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	099b      	lsrs	r3, r3, #6
 8001a34:	2200      	movs	r2, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	4611      	mov	r1, r2
 8001a3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a3e:	623b      	str	r3, [r7, #32]
 8001a40:	2300      	movs	r3, #0
 8001a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a48:	4642      	mov	r2, r8
 8001a4a:	464b      	mov	r3, r9
 8001a4c:	f04f 0000 	mov.w	r0, #0
 8001a50:	f04f 0100 	mov.w	r1, #0
 8001a54:	0159      	lsls	r1, r3, #5
 8001a56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a5a:	0150      	lsls	r0, r2, #5
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4641      	mov	r1, r8
 8001a62:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a66:	4649      	mov	r1, r9
 8001a68:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a80:	ebb2 040a 	subs.w	r4, r2, sl
 8001a84:	eb63 050b 	sbc.w	r5, r3, fp
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	00eb      	lsls	r3, r5, #3
 8001a92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a96:	00e2      	lsls	r2, r4, #3
 8001a98:	4614      	mov	r4, r2
 8001a9a:	461d      	mov	r5, r3
 8001a9c:	4643      	mov	r3, r8
 8001a9e:	18e3      	adds	r3, r4, r3
 8001aa0:	603b      	str	r3, [r7, #0]
 8001aa2:	464b      	mov	r3, r9
 8001aa4:	eb45 0303 	adc.w	r3, r5, r3
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	f04f 0300 	mov.w	r3, #0
 8001ab2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	028b      	lsls	r3, r1, #10
 8001aba:	4621      	mov	r1, r4
 8001abc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	028a      	lsls	r2, r1, #10
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001aca:	2200      	movs	r2, #0
 8001acc:	61bb      	str	r3, [r7, #24]
 8001ace:	61fa      	str	r2, [r7, #28]
 8001ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ad4:	f7fe fbb4 	bl	8000240 <__aeabi_uldivmod>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4613      	mov	r3, r2
 8001ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	0c1b      	lsrs	r3, r3, #16
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	3301      	adds	r3, #1
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001af0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001af2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001afa:	e002      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001afc:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001afe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3750      	adds	r7, #80	@ 0x50
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	00f42400 	.word	0x00f42400

08001b18 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	@ (8001b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000000 	.word	0x20000000

08001b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b34:	f7ff fff0 	bl	8001b18 <HAL_RCC_GetHCLKFreq>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4b05      	ldr	r3, [pc, #20]	@ (8001b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	0a9b      	lsrs	r3, r3, #10
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	4903      	ldr	r1, [pc, #12]	@ (8001b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b46:	5ccb      	ldrb	r3, [r1, r3]
 8001b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40023800 	.word	0x40023800
 8001b54:	08005244 	.word	0x08005244

08001b58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	220f      	movs	r2, #15
 8001b66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b68:	4b12      	ldr	r3, [pc, #72]	@ (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 0203 	and.w	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b74:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b80:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001b8c:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	08db      	lsrs	r3, r3, #3
 8001b92:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b9a:	4b07      	ldr	r3, [pc, #28]	@ (8001bb8 <HAL_RCC_GetClockConfig+0x60>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 020f 	and.w	r2, r3, #15
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	601a      	str	r2, [r3, #0]
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40023c00 	.word	0x40023c00

08001bbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e049      	b.n	8001c62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f841 	bl	8001c6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2202      	movs	r2, #2
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	f000 fa00 	bl	8002000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d001      	beq.n	8001c98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e054      	b.n	8001d42 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a26      	ldr	r2, [pc, #152]	@ (8001d50 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d022      	beq.n	8001d00 <HAL_TIM_Base_Start_IT+0x80>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cc2:	d01d      	beq.n	8001d00 <HAL_TIM_Base_Start_IT+0x80>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a22      	ldr	r2, [pc, #136]	@ (8001d54 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d018      	beq.n	8001d00 <HAL_TIM_Base_Start_IT+0x80>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a21      	ldr	r2, [pc, #132]	@ (8001d58 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d013      	beq.n	8001d00 <HAL_TIM_Base_Start_IT+0x80>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a1f      	ldr	r2, [pc, #124]	@ (8001d5c <HAL_TIM_Base_Start_IT+0xdc>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d00e      	beq.n	8001d00 <HAL_TIM_Base_Start_IT+0x80>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a1e      	ldr	r2, [pc, #120]	@ (8001d60 <HAL_TIM_Base_Start_IT+0xe0>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d009      	beq.n	8001d00 <HAL_TIM_Base_Start_IT+0x80>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8001d64 <HAL_TIM_Base_Start_IT+0xe4>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d004      	beq.n	8001d00 <HAL_TIM_Base_Start_IT+0x80>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a1b      	ldr	r2, [pc, #108]	@ (8001d68 <HAL_TIM_Base_Start_IT+0xe8>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d115      	bne.n	8001d2c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	4b19      	ldr	r3, [pc, #100]	@ (8001d6c <HAL_TIM_Base_Start_IT+0xec>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b06      	cmp	r3, #6
 8001d10:	d015      	beq.n	8001d3e <HAL_TIM_Base_Start_IT+0xbe>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d18:	d011      	beq.n	8001d3e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 0201 	orr.w	r2, r2, #1
 8001d28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d2a:	e008      	b.n	8001d3e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0201 	orr.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	e000      	b.n	8001d40 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40010000 	.word	0x40010000
 8001d54:	40000400 	.word	0x40000400
 8001d58:	40000800 	.word	0x40000800
 8001d5c:	40000c00 	.word	0x40000c00
 8001d60:	40010400 	.word	0x40010400
 8001d64:	40014000 	.word	0x40014000
 8001d68:	40001800 	.word	0x40001800
 8001d6c:	00010007 	.word	0x00010007

08001d70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d122      	bne.n	8001dcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d11b      	bne.n	8001dcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0202 	mvn.w	r2, #2
 8001d9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f905 	bl	8001fc2 <HAL_TIM_IC_CaptureCallback>
 8001db8:	e005      	b.n	8001dc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f8f7 	bl	8001fae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f908 	bl	8001fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d122      	bne.n	8001e20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d11b      	bne.n	8001e20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f06f 0204 	mvn.w	r2, #4
 8001df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2202      	movs	r2, #2
 8001df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8db 	bl	8001fc2 <HAL_TIM_IC_CaptureCallback>
 8001e0c:	e005      	b.n	8001e1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f8cd 	bl	8001fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f8de 	bl	8001fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b08      	cmp	r3, #8
 8001e2c:	d122      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d11b      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0208 	mvn.w	r2, #8
 8001e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2204      	movs	r2, #4
 8001e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f8b1 	bl	8001fc2 <HAL_TIM_IC_CaptureCallback>
 8001e60:	e005      	b.n	8001e6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f8a3 	bl	8001fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f8b4 	bl	8001fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f003 0310 	and.w	r3, r3, #16
 8001e7e:	2b10      	cmp	r3, #16
 8001e80:	d122      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f003 0310 	and.w	r3, r3, #16
 8001e8c:	2b10      	cmp	r3, #16
 8001e8e:	d11b      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0210 	mvn.w	r2, #16
 8001e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2208      	movs	r2, #8
 8001e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f887 	bl	8001fc2 <HAL_TIM_IC_CaptureCallback>
 8001eb4:	e005      	b.n	8001ec2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f879 	bl	8001fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f88a 	bl	8001fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d10e      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d107      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f06f 0201 	mvn.w	r2, #1
 8001eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7fe fcf2 	bl	80008d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001efe:	2b80      	cmp	r3, #128	@ 0x80
 8001f00:	d10e      	bne.n	8001f20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f0c:	2b80      	cmp	r3, #128	@ 0x80
 8001f0e:	d107      	bne.n	8001f20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f91a 	bl	8002154 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f2e:	d10e      	bne.n	8001f4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f3a:	2b80      	cmp	r3, #128	@ 0x80
 8001f3c:	d107      	bne.n	8001f4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f90d 	bl	8002168 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f58:	2b40      	cmp	r3, #64	@ 0x40
 8001f5a:	d10e      	bne.n	8001f7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f66:	2b40      	cmp	r3, #64	@ 0x40
 8001f68:	d107      	bne.n	8001f7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f838 	bl	8001fea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	f003 0320 	and.w	r3, r3, #32
 8001f84:	2b20      	cmp	r3, #32
 8001f86:	d10e      	bne.n	8001fa6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	f003 0320 	and.w	r3, r3, #32
 8001f92:	2b20      	cmp	r3, #32
 8001f94:	d107      	bne.n	8001fa6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f06f 0220 	mvn.w	r2, #32
 8001f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f8cd 	bl	8002140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
	...

08002000 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a40      	ldr	r2, [pc, #256]	@ (8002114 <TIM_Base_SetConfig+0x114>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d013      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800201e:	d00f      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a3d      	ldr	r2, [pc, #244]	@ (8002118 <TIM_Base_SetConfig+0x118>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d00b      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a3c      	ldr	r2, [pc, #240]	@ (800211c <TIM_Base_SetConfig+0x11c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d007      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a3b      	ldr	r2, [pc, #236]	@ (8002120 <TIM_Base_SetConfig+0x120>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d003      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a3a      	ldr	r2, [pc, #232]	@ (8002124 <TIM_Base_SetConfig+0x124>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d108      	bne.n	8002052 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002046:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4313      	orrs	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a2f      	ldr	r2, [pc, #188]	@ (8002114 <TIM_Base_SetConfig+0x114>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d02b      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002060:	d027      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a2c      	ldr	r2, [pc, #176]	@ (8002118 <TIM_Base_SetConfig+0x118>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d023      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a2b      	ldr	r2, [pc, #172]	@ (800211c <TIM_Base_SetConfig+0x11c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d01f      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a2a      	ldr	r2, [pc, #168]	@ (8002120 <TIM_Base_SetConfig+0x120>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d01b      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a29      	ldr	r2, [pc, #164]	@ (8002124 <TIM_Base_SetConfig+0x124>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d017      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a28      	ldr	r2, [pc, #160]	@ (8002128 <TIM_Base_SetConfig+0x128>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d013      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a27      	ldr	r2, [pc, #156]	@ (800212c <TIM_Base_SetConfig+0x12c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00f      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a26      	ldr	r2, [pc, #152]	@ (8002130 <TIM_Base_SetConfig+0x130>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00b      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a25      	ldr	r2, [pc, #148]	@ (8002134 <TIM_Base_SetConfig+0x134>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d007      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a24      	ldr	r2, [pc, #144]	@ (8002138 <TIM_Base_SetConfig+0x138>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d003      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a23      	ldr	r2, [pc, #140]	@ (800213c <TIM_Base_SetConfig+0x13c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d108      	bne.n	80020c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002114 <TIM_Base_SetConfig+0x114>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d003      	beq.n	80020f8 <TIM_Base_SetConfig+0xf8>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002124 <TIM_Base_SetConfig+0x124>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d103      	bne.n	8002100 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	615a      	str	r2, [r3, #20]
}
 8002106:	bf00      	nop
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40010000 	.word	0x40010000
 8002118:	40000400 	.word	0x40000400
 800211c:	40000800 	.word	0x40000800
 8002120:	40000c00 	.word	0x40000c00
 8002124:	40010400 	.word	0x40010400
 8002128:	40014000 	.word	0x40014000
 800212c:	40014400 	.word	0x40014400
 8002130:	40014800 	.word	0x40014800
 8002134:	40001800 	.word	0x40001800
 8002138:	40001c00 	.word	0x40001c00
 800213c:	40002000 	.word	0x40002000

08002140 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f103 0208 	add.w	r2, r3, #8
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002194:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f103 0208 	add.w	r2, r3, #8
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f103 0208 	add.w	r2, r3, #8
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80021d6:	b480      	push	{r7}
 80021d8:	b085      	sub	sp, #20
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021ec:	d103      	bne.n	80021f6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	e00c      	b.n	8002210 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3308      	adds	r3, #8
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	e002      	b.n	8002204 <vListInsert+0x2e>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	429a      	cmp	r2, r3
 800220e:	d2f6      	bcs.n	80021fe <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	601a      	str	r2, [r3, #0]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6892      	ldr	r2, [r2, #8]
 800225e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6852      	ldr	r2, [r2, #4]
 8002268:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	429a      	cmp	r2, r3
 8002272:	d103      	bne.n	800227c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	1e5a      	subs	r2, r3, #1
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80022a6:	2301      	movs	r3, #1
 80022a8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10d      	bne.n	80022d0 <xQueueGenericReset+0x34>
        __asm volatile
 80022b4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80022b8:	b672      	cpsid	i
 80022ba:	f383 8811 	msr	BASEPRI, r3
 80022be:	f3bf 8f6f 	isb	sy
 80022c2:	f3bf 8f4f 	dsb	sy
 80022c6:	b662      	cpsie	i
 80022c8:	60fb      	str	r3, [r7, #12]
    }
 80022ca:	bf00      	nop
 80022cc:	bf00      	nop
 80022ce:	e7fd      	b.n	80022cc <xQueueGenericReset+0x30>

    if( ( pxQueue != NULL ) &&
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d05d      	beq.n	8002392 <xQueueGenericReset+0xf6>
        ( pxQueue->uxLength >= 1U ) &&
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d059      	beq.n	8002392 <xQueueGenericReset+0xf6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e6:	2100      	movs	r1, #0
 80022e8:	fba3 2302 	umull	r2, r3, r3, r2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d000      	beq.n	80022f2 <xQueueGenericReset+0x56>
 80022f0:	2101      	movs	r1, #1
 80022f2:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d14c      	bne.n	8002392 <xQueueGenericReset+0xf6>
    {
        taskENTER_CRITICAL();
 80022f8:	f001 ffd6 	bl	80042a8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002304:	6939      	ldr	r1, [r7, #16]
 8002306:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002308:	fb01 f303 	mul.w	r3, r1, r3
 800230c:	441a      	add	r2, r3
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	2200      	movs	r2, #0
 8002316:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002328:	3b01      	subs	r3, #1
 800232a:	6939      	ldr	r1, [r7, #16]
 800232c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	441a      	add	r2, r3
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	22ff      	movs	r2, #255	@ 0xff
 800233c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	22ff      	movs	r2, #255	@ 0xff
 8002344:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d114      	bne.n	8002378 <xQueueGenericReset+0xdc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d01a      	beq.n	800238c <xQueueGenericReset+0xf0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	3310      	adds	r3, #16
 800235a:	4618      	mov	r0, r3
 800235c:	f001 f870 	bl	8003440 <xTaskRemoveFromEventList>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d012      	beq.n	800238c <xQueueGenericReset+0xf0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002366:	4b17      	ldr	r3, [pc, #92]	@ (80023c4 <xQueueGenericReset+0x128>)
 8002368:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	f3bf 8f4f 	dsb	sy
 8002372:	f3bf 8f6f 	isb	sy
 8002376:	e009      	b.n	800238c <xQueueGenericReset+0xf0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	3310      	adds	r3, #16
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fefd 	bl	800217c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	3324      	adds	r3, #36	@ 0x24
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff fef8 	bl	800217c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800238c:	f001 ffc2 	bl	8004314 <vPortExitCritical>
 8002390:	e001      	b.n	8002396 <xQueueGenericReset+0xfa>
    }
    else
    {
        xReturn = pdFAIL;
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10d      	bne.n	80023b8 <xQueueGenericReset+0x11c>
        __asm volatile
 800239c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80023a0:	b672      	cpsid	i
 80023a2:	f383 8811 	msr	BASEPRI, r3
 80023a6:	f3bf 8f6f 	isb	sy
 80023aa:	f3bf 8f4f 	dsb	sy
 80023ae:	b662      	cpsie	i
 80023b0:	60bb      	str	r3, [r7, #8]
    }
 80023b2:	bf00      	nop
 80023b4:	bf00      	nop
 80023b6:	e7fd      	b.n	80023b4 <xQueueGenericReset+0x118>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80023b8:	697b      	ldr	r3, [r7, #20]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	e000ed04 	.word	0xe000ed04

080023c8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08a      	sub	sp, #40	@ 0x28
 80023cc:	af02      	add	r7, sp, #8
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	4613      	mov	r3, r2
 80023d4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d02e      	beq.n	800243e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80023e0:	2100      	movs	r1, #0
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	fba3 2302 	umull	r2, r3, r3, r2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d000      	beq.n	80023f0 <xQueueGenericCreate+0x28>
 80023ee:	2101      	movs	r1, #1
 80023f0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d123      	bne.n	800243e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80023fe:	f113 0f55 	cmn.w	r3, #85	@ 0x55
 8002402:	d81c      	bhi.n	800243e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	fb02 f303 	mul.w	r3, r2, r3
 800240c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	3354      	adds	r3, #84	@ 0x54
 8002412:	4618      	mov	r0, r3
 8002414:	f002 f834 	bl	8004480 <pvPortMalloc>
 8002418:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d01f      	beq.n	8002460 <xQueueGenericCreate+0x98>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	3354      	adds	r3, #84	@ 0x54
 8002428:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800242a:	79fa      	ldrb	r2, [r7, #7]
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	4613      	mov	r3, r2
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 f817 	bl	800246a <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800243c:	e010      	b.n	8002460 <xQueueGenericCreate+0x98>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10d      	bne.n	8002460 <xQueueGenericCreate+0x98>
        __asm volatile
 8002444:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002448:	b672      	cpsid	i
 800244a:	f383 8811 	msr	BASEPRI, r3
 800244e:	f3bf 8f6f 	isb	sy
 8002452:	f3bf 8f4f 	dsb	sy
 8002456:	b662      	cpsie	i
 8002458:	613b      	str	r3, [r7, #16]
    }
 800245a:	bf00      	nop
 800245c:	bf00      	nop
 800245e:	e7fd      	b.n	800245c <xQueueGenericCreate+0x94>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002460:	69fb      	ldr	r3, [r7, #28]
    }
 8002462:	4618      	mov	r0, r3
 8002464:	3720      	adds	r7, #32
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b084      	sub	sp, #16
 800246e:	af00      	add	r7, sp, #0
 8002470:	60f8      	str	r0, [r7, #12]
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	607a      	str	r2, [r7, #4]
 8002476:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d103      	bne.n	8002486 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	e002      	b.n	800248c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002498:	2101      	movs	r1, #1
 800249a:	69b8      	ldr	r0, [r7, #24]
 800249c:	f7ff fefe 	bl	800229c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	78fa      	ldrb	r2, [r7, #3]
 80024a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
    {
        pxNewQueue->pxQueueSetContainer = NULL;
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	2200      	movs	r2, #0
 80024ac:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08c      	sub	sp, #48	@ 0x30
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80024cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10d      	bne.n	80024ee <xQueueReceive+0x36>
        __asm volatile
 80024d2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80024d6:	b672      	cpsid	i
 80024d8:	f383 8811 	msr	BASEPRI, r3
 80024dc:	f3bf 8f6f 	isb	sy
 80024e0:	f3bf 8f4f 	dsb	sy
 80024e4:	b662      	cpsie	i
 80024e6:	623b      	str	r3, [r7, #32]
    }
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	e7fd      	b.n	80024ea <xQueueReceive+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d103      	bne.n	80024fc <xQueueReceive+0x44>
 80024f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <xQueueReceive+0x48>
 80024fc:	2301      	movs	r3, #1
 80024fe:	e000      	b.n	8002502 <xQueueReceive+0x4a>
 8002500:	2300      	movs	r3, #0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10d      	bne.n	8002522 <xQueueReceive+0x6a>
        __asm volatile
 8002506:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800250a:	b672      	cpsid	i
 800250c:	f383 8811 	msr	BASEPRI, r3
 8002510:	f3bf 8f6f 	isb	sy
 8002514:	f3bf 8f4f 	dsb	sy
 8002518:	b662      	cpsie	i
 800251a:	61fb      	str	r3, [r7, #28]
    }
 800251c:	bf00      	nop
 800251e:	bf00      	nop
 8002520:	e7fd      	b.n	800251e <xQueueReceive+0x66>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002522:	f001 f9a7 	bl	8003874 <xTaskGetSchedulerState>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d102      	bne.n	8002532 <xQueueReceive+0x7a>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <xQueueReceive+0x7e>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <xQueueReceive+0x80>
 8002536:	2300      	movs	r3, #0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10d      	bne.n	8002558 <xQueueReceive+0xa0>
        __asm volatile
 800253c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002540:	b672      	cpsid	i
 8002542:	f383 8811 	msr	BASEPRI, r3
 8002546:	f3bf 8f6f 	isb	sy
 800254a:	f3bf 8f4f 	dsb	sy
 800254e:	b662      	cpsie	i
 8002550:	61bb      	str	r3, [r7, #24]
    }
 8002552:	bf00      	nop
 8002554:	bf00      	nop
 8002556:	e7fd      	b.n	8002554 <xQueueReceive+0x9c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002558:	f001 fea6 	bl	80042a8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800255c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800255e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002560:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002564:	2b00      	cmp	r3, #0
 8002566:	d01f      	beq.n	80025a8 <xQueueReceive+0xf0>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800256c:	f000 f8f6 	bl	800275c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002572:	1e5a      	subs	r2, r3, #1
 8002574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002576:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00f      	beq.n	80025a0 <xQueueReceive+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002582:	3310      	adds	r3, #16
 8002584:	4618      	mov	r0, r3
 8002586:	f000 ff5b 	bl	8003440 <xTaskRemoveFromEventList>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d007      	beq.n	80025a0 <xQueueReceive+0xe8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002590:	4b3c      	ldr	r3, [pc, #240]	@ (8002684 <xQueueReceive+0x1cc>)
 8002592:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	f3bf 8f4f 	dsb	sy
 800259c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80025a0:	f001 feb8 	bl	8004314 <vPortExitCritical>
                return pdPASS;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e069      	b.n	800267c <xQueueReceive+0x1c4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d103      	bne.n	80025b6 <xQueueReceive+0xfe>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80025ae:	f001 feb1 	bl	8004314 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e062      	b.n	800267c <xQueueReceive+0x1c4>
                }
                else if( xEntryTimeSet == pdFALSE )
 80025b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d106      	bne.n	80025ca <xQueueReceive+0x112>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80025bc:	f107 0310 	add.w	r3, r7, #16
 80025c0:	4618      	mov	r0, r3
 80025c2:	f001 f817 	bl	80035f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80025c6:	2301      	movs	r3, #1
 80025c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80025ca:	f001 fea3 	bl	8004314 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80025ce:	f000 fc27 	bl	8002e20 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80025d2:	f001 fe69 	bl	80042a8 <vPortEnterCritical>
 80025d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80025dc:	b25b      	sxtb	r3, r3
 80025de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025e2:	d103      	bne.n	80025ec <xQueueReceive+0x134>
 80025e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80025f2:	b25b      	sxtb	r3, r3
 80025f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025f8:	d103      	bne.n	8002602 <xQueueReceive+0x14a>
 80025fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002602:	f001 fe87 	bl	8004314 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002606:	1d3a      	adds	r2, r7, #4
 8002608:	f107 0310 	add.w	r3, r7, #16
 800260c:	4611      	mov	r1, r2
 800260e:	4618      	mov	r0, r3
 8002610:	f001 f806 	bl	8003620 <xTaskCheckForTimeOut>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d123      	bne.n	8002662 <xQueueReceive+0x1aa>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800261a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800261c:	f000 f923 	bl	8002866 <prvIsQueueEmpty>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d017      	beq.n	8002656 <xQueueReceive+0x19e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002628:	3324      	adds	r3, #36	@ 0x24
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	4611      	mov	r1, r2
 800262e:	4618      	mov	r0, r3
 8002630:	f000 fe96 	bl	8003360 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002634:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002636:	f000 f8b7 	bl	80027a8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800263a:	f000 fbff 	bl	8002e3c <xTaskResumeAll>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d189      	bne.n	8002558 <xQueueReceive+0xa0>
                {
                    portYIELD_WITHIN_API();
 8002644:	4b0f      	ldr	r3, [pc, #60]	@ (8002684 <xQueueReceive+0x1cc>)
 8002646:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	f3bf 8f6f 	isb	sy
 8002654:	e780      	b.n	8002558 <xQueueReceive+0xa0>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002656:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002658:	f000 f8a6 	bl	80027a8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800265c:	f000 fbee 	bl	8002e3c <xTaskResumeAll>
 8002660:	e77a      	b.n	8002558 <xQueueReceive+0xa0>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002662:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002664:	f000 f8a0 	bl	80027a8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002668:	f000 fbe8 	bl	8002e3c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800266c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800266e:	f000 f8fa 	bl	8002866 <prvIsQueueEmpty>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	f43f af6f 	beq.w	8002558 <xQueueReceive+0xa0>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800267a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800267c:	4618      	mov	r0, r3
 800267e:	3730      	adds	r7, #48	@ 0x30
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	e000ed04 	.word	0xe000ed04

08002688 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800269c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10d      	bne.n	80026c2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d14d      	bne.n	800274a <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f001 f8fc 	bl	80038b0 <xTaskPriorityDisinherit>
 80026b8:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	e043      	b.n	800274a <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d119      	bne.n	80026fc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6858      	ldr	r0, [r3, #4]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d0:	461a      	mov	r2, r3
 80026d2:	68b9      	ldr	r1, [r7, #8]
 80026d4:	f002 fb19 	bl	8004d0a <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e0:	441a      	add	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d32b      	bcc.n	800274a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	e026      	b.n	800274a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	68d8      	ldr	r0, [r3, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	461a      	mov	r2, r3
 8002706:	68b9      	ldr	r1, [r7, #8]
 8002708:	f002 faff 	bl	8004d0a <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002714:	425b      	negs	r3, r3
 8002716:	441a      	add	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d207      	bcs.n	8002738 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002730:	425b      	negs	r3, r3
 8002732:	441a      	add	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d105      	bne.n	800274a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	3b01      	subs	r3, #1
 8002748:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002752:	697b      	ldr	r3, [r7, #20]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	2b00      	cmp	r3, #0
 800276c:	d018      	beq.n	80027a0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	441a      	add	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	429a      	cmp	r2, r3
 8002786:	d303      	bcc.n	8002790 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68d9      	ldr	r1, [r3, #12]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002798:	461a      	mov	r2, r3
 800279a:	6838      	ldr	r0, [r7, #0]
 800279c:	f002 fab5 	bl	8004d0a <memcpy>
    }
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80027b0:	f001 fd7a 	bl	80042a8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027ba:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80027bc:	e01e      	b.n	80027fc <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
            {
                if( pxQueue->pxQueueSetContainer != NULL )
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <prvUnlockQueue+0x30>
                {
                    if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f8ea 	bl	80029a0 <prvNotifyQueueSetContainer>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d010      	beq.n	80027f4 <prvUnlockQueue+0x4c>
                    {
                        /* The queue is a member of a queue set, and posting to
                         * the queue set caused a higher priority task to unblock.
                         * A context switch is required. */
                        vTaskMissedYield();
 80027d2:	f000 ff91 	bl	80036f8 <vTaskMissedYield>
 80027d6:	e00d      	b.n	80027f4 <prvUnlockQueue+0x4c>
                else
                {
                    /* Tasks that are removed from the event list will get
                     * added to the pending ready list as the scheduler is still
                     * suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d012      	beq.n	8002806 <prvUnlockQueue+0x5e>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3324      	adds	r3, #36	@ 0x24
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fe2b 	bl	8003440 <xTaskRemoveFromEventList>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <prvUnlockQueue+0x4c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            vTaskMissedYield();
 80027f0:	f000 ff82 	bl	80036f8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80027fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002800:	2b00      	cmp	r3, #0
 8002802:	dcdc      	bgt.n	80027be <prvUnlockQueue+0x16>
 8002804:	e000      	b.n	8002808 <prvUnlockQueue+0x60>
                        break;
 8002806:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	22ff      	movs	r2, #255	@ 0xff
 800280c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002810:	f001 fd80 	bl	8004314 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002814:	f001 fd48 	bl	80042a8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800281e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002820:	e011      	b.n	8002846 <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d012      	beq.n	8002850 <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3310      	adds	r3, #16
 800282e:	4618      	mov	r0, r3
 8002830:	f000 fe06 	bl	8003440 <xTaskRemoveFromEventList>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 800283a:	f000 ff5d 	bl	80036f8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800283e:	7bbb      	ldrb	r3, [r7, #14]
 8002840:	3b01      	subs	r3, #1
 8002842:	b2db      	uxtb	r3, r3
 8002844:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002846:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800284a:	2b00      	cmp	r3, #0
 800284c:	dce9      	bgt.n	8002822 <prvUnlockQueue+0x7a>
 800284e:	e000      	b.n	8002852 <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 8002850:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	22ff      	movs	r2, #255	@ 0xff
 8002856:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800285a:	f001 fd5b 	bl	8004314 <vPortExitCritical>
}
 800285e:	bf00      	nop
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800286e:	f001 fd1b 	bl	80042a8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002876:	2b00      	cmp	r3, #0
 8002878:	d102      	bne.n	8002880 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800287a:	2301      	movs	r3, #1
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	e001      	b.n	8002884 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002880:	2300      	movs	r3, #0
 8002882:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002884:	f001 fd46 	bl	8004314 <vPortExitCritical>

    return xReturn;
 8002888:	68fb      	ldr	r3, [r7, #12]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10d      	bne.n	80028c4 <vQueueAddToRegistry+0x30>
        __asm volatile
 80028a8:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80028ac:	b672      	cpsid	i
 80028ae:	f383 8811 	msr	BASEPRI, r3
 80028b2:	f3bf 8f6f 	isb	sy
 80028b6:	f3bf 8f4f 	dsb	sy
 80028ba:	b662      	cpsie	i
 80028bc:	60fb      	str	r3, [r7, #12]
    }
 80028be:	bf00      	nop
 80028c0:	bf00      	nop
 80028c2:	e7fd      	b.n	80028c0 <vQueueAddToRegistry+0x2c>

        if( pcQueueName != NULL )
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d024      	beq.n	8002914 <vQueueAddToRegistry+0x80>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	e01e      	b.n	800290e <vQueueAddToRegistry+0x7a>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80028d0:	4a18      	ldr	r2, [pc, #96]	@ (8002934 <vQueueAddToRegistry+0xa0>)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4413      	add	r3, r2
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d105      	bne.n	80028ec <vQueueAddToRegistry+0x58>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	4a13      	ldr	r2, [pc, #76]	@ (8002934 <vQueueAddToRegistry+0xa0>)
 80028e6:	4413      	add	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
                    break;
 80028ea:	e013      	b.n	8002914 <vQueueAddToRegistry+0x80>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10a      	bne.n	8002908 <vQueueAddToRegistry+0x74>
 80028f2:	4a10      	ldr	r2, [pc, #64]	@ (8002934 <vQueueAddToRegistry+0xa0>)
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d104      	bne.n	8002908 <vQueueAddToRegistry+0x74>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	4a0c      	ldr	r2, [pc, #48]	@ (8002934 <vQueueAddToRegistry+0xa0>)
 8002904:	4413      	add	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	3301      	adds	r3, #1
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2b07      	cmp	r3, #7
 8002912:	d9dd      	bls.n	80028d0 <vQueueAddToRegistry+0x3c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <vQueueAddToRegistry+0x92>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002926:	bf00      	nop
 8002928:	371c      	adds	r7, #28
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	200000dc 	.word	0x200000dc

08002938 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002948:	f001 fcae 	bl	80042a8 <vPortEnterCritical>
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002952:	b25b      	sxtb	r3, r3
 8002954:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002958:	d103      	bne.n	8002962 <vQueueWaitForMessageRestricted+0x2a>
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002968:	b25b      	sxtb	r3, r3
 800296a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800296e:	d103      	bne.n	8002978 <vQueueWaitForMessageRestricted+0x40>
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002978:	f001 fccc 	bl	8004314 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002980:	2b00      	cmp	r3, #0
 8002982:	d106      	bne.n	8002992 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	3324      	adds	r3, #36	@ 0x24
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	68b9      	ldr	r1, [r7, #8]
 800298c:	4618      	mov	r0, r3
 800298e:	f000 fd0f 	bl	80033b0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002992:	6978      	ldr	r0, [r7, #20]
 8002994:	f7ff ff08 	bl	80027a8 <prvUnlockQueue>
    }
 8002998:	bf00      	nop
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	@ 0x28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029ac:	623b      	str	r3, [r7, #32]
        BaseType_t xReturn = pdFALSE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	627b      	str	r3, [r7, #36]	@ 0x24
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10d      	bne.n	80029d4 <prvNotifyQueueSetContainer+0x34>
        __asm volatile
 80029b8:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80029bc:	b672      	cpsid	i
 80029be:	f383 8811 	msr	BASEPRI, r3
 80029c2:	f3bf 8f6f 	isb	sy
 80029c6:	f3bf 8f4f 	dsb	sy
 80029ca:	b662      	cpsie	i
 80029cc:	617b      	str	r3, [r7, #20]
    }
 80029ce:	bf00      	nop
 80029d0:	bf00      	nop
 80029d2:	e7fd      	b.n	80029d0 <prvNotifyQueueSetContainer+0x30>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029dc:	429a      	cmp	r2, r3
 80029de:	d30d      	bcc.n	80029fc <prvNotifyQueueSetContainer+0x5c>
        __asm volatile
 80029e0:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80029e4:	b672      	cpsid	i
 80029e6:	f383 8811 	msr	BASEPRI, r3
 80029ea:	f3bf 8f6f 	isb	sy
 80029ee:	f3bf 8f4f 	dsb	sy
 80029f2:	b662      	cpsie	i
 80029f4:	613b      	str	r3, [r7, #16]
    }
 80029f6:	bf00      	nop
 80029f8:	bf00      	nop
 80029fa:	e7fd      	b.n	80029f8 <prvNotifyQueueSetContainer+0x58>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d23f      	bcs.n	8002a88 <prvNotifyQueueSetContainer+0xe8>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a0e:	77fb      	strb	r3, [r7, #31]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8002a10:	1d3b      	adds	r3, r7, #4
 8002a12:	2200      	movs	r2, #0
 8002a14:	4619      	mov	r1, r3
 8002a16:	6a38      	ldr	r0, [r7, #32]
 8002a18:	f7ff fe36 	bl	8002688 <prvCopyDataToQueue>
 8002a1c:	6278      	str	r0, [r7, #36]	@ 0x24

            if( cTxLock == queueUNLOCKED )
 8002a1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a26:	d10e      	bne.n	8002a46 <prvNotifyQueueSetContainer+0xa6>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d02b      	beq.n	8002a88 <prvNotifyQueueSetContainer+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	3324      	adds	r3, #36	@ 0x24
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 fd03 	bl	8003440 <xTaskRemoveFromEventList>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d023      	beq.n	8002a88 <prvNotifyQueueSetContainer+0xe8>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 8002a40:	2301      	movs	r3, #1
 8002a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a44:	e020      	b.n	8002a88 <prvNotifyQueueSetContainer+0xe8>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                prvIncrementQueueTxLock( pxQueueSetContainer, cTxLock );
 8002a46:	f000 fb07 	bl	8003058 <uxTaskGetNumberOfTasks>
 8002a4a:	61b8      	str	r0, [r7, #24]
 8002a4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d918      	bls.n	8002a88 <prvNotifyQueueSetContainer+0xe8>
 8002a56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a5c:	d10d      	bne.n	8002a7a <prvNotifyQueueSetContainer+0xda>
        __asm volatile
 8002a5e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002a62:	b672      	cpsid	i
 8002a64:	f383 8811 	msr	BASEPRI, r3
 8002a68:	f3bf 8f6f 	isb	sy
 8002a6c:	f3bf 8f4f 	dsb	sy
 8002a70:	b662      	cpsie	i
 8002a72:	60fb      	str	r3, [r7, #12]
    }
 8002a74:	bf00      	nop
 8002a76:	bf00      	nop
 8002a78:	e7fd      	b.n	8002a76 <prvNotifyQueueSetContainer+0xd6>
 8002a7a:	7ffb      	ldrb	r3, [r7, #31]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	b25a      	sxtb	r2, r3
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3728      	adds	r7, #40	@ 0x28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b08c      	sub	sp, #48	@ 0x30
 8002a96:	af04      	add	r7, sp, #16
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	603b      	str	r3, [r7, #0]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002aa2:	88fb      	ldrh	r3, [r7, #6]
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f001 fcea 	bl	8004480 <pvPortMalloc>
 8002aac:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d013      	beq.n	8002adc <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ab4:	2058      	movs	r0, #88	@ 0x58
 8002ab6:	f001 fce3 	bl	8004480 <pvPortMalloc>
 8002aba:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d008      	beq.n	8002ad4 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002ac2:	2258      	movs	r2, #88	@ 0x58
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	69f8      	ldr	r0, [r7, #28]
 8002ac8:	f002 f8aa 	bl	8004c20 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ad2:	e005      	b.n	8002ae0 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002ad4:	6978      	ldr	r0, [r7, #20]
 8002ad6:	f001 fd93 	bl	8004600 <vPortFree>
 8002ada:	e001      	b.n	8002ae0 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d013      	beq.n	8002b0e <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ae6:	88fa      	ldrh	r2, [r7, #6]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	9303      	str	r3, [sp, #12]
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	9302      	str	r3, [sp, #8]
 8002af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002af2:	9301      	str	r3, [sp, #4]
 8002af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	68b9      	ldr	r1, [r7, #8]
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 f80e 	bl	8002b1e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002b02:	69f8      	ldr	r0, [r7, #28]
 8002b04:	f000 f8a0 	bl	8002c48 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	61bb      	str	r3, [r7, #24]
 8002b0c:	e002      	b.n	8002b14 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b12:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002b14:	69bb      	ldr	r3, [r7, #24]
    }
 8002b16:	4618      	mov	r0, r3
 8002b18:	3720      	adds	r7, #32
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b088      	sub	sp, #32
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
 8002b2a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	461a      	mov	r2, r3
 8002b36:	21a5      	movs	r1, #165	@ 0xa5
 8002b38:	f002 f872 	bl	8004c20 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8002b46:	440b      	add	r3, r1
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f023 0307 	bic.w	r3, r3, #7
 8002b54:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00d      	beq.n	8002b7c <prvInitialiseNewTask+0x5e>
        __asm volatile
 8002b60:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002b64:	b672      	cpsid	i
 8002b66:	f383 8811 	msr	BASEPRI, r3
 8002b6a:	f3bf 8f6f 	isb	sy
 8002b6e:	f3bf 8f4f 	dsb	sy
 8002b72:	b662      	cpsie	i
 8002b74:	617b      	str	r3, [r7, #20]
    }
 8002b76:	bf00      	nop
 8002b78:	bf00      	nop
 8002b7a:	e7fd      	b.n	8002b78 <prvInitialiseNewTask+0x5a>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d01e      	beq.n	8002bc0 <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
 8002b86:	e012      	b.n	8002bae <prvInitialiseNewTask+0x90>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	7819      	ldrb	r1, [r3, #0]
 8002b90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	4413      	add	r3, r2
 8002b96:	3334      	adds	r3, #52	@ 0x34
 8002b98:	460a      	mov	r2, r1
 8002b9a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d006      	beq.n	8002bb6 <prvInitialiseNewTask+0x98>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	3301      	adds	r3, #1
 8002bac:	61fb      	str	r3, [r7, #28]
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	2b09      	cmp	r3, #9
 8002bb2:	d9e9      	bls.n	8002b88 <prvInitialiseNewTask+0x6a>
 8002bb4:	e000      	b.n	8002bb8 <prvInitialiseNewTask+0x9a>
            {
                break;
 8002bb6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d90d      	bls.n	8002be2 <prvInitialiseNewTask+0xc4>
        __asm volatile
 8002bc6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002bca:	b672      	cpsid	i
 8002bcc:	f383 8811 	msr	BASEPRI, r3
 8002bd0:	f3bf 8f6f 	isb	sy
 8002bd4:	f3bf 8f4f 	dsb	sy
 8002bd8:	b662      	cpsie	i
 8002bda:	613b      	str	r3, [r7, #16]
    }
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
 8002be0:	e7fd      	b.n	8002bde <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d901      	bls.n	8002bec <prvInitialiseNewTask+0xce>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002be8:	2304      	movs	r3, #4
 8002bea:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bf0:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bf6:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff fadd 	bl	80021bc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c04:	3318      	adds	r3, #24
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff fad8 	bl	80021bc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c10:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c14:	f1c3 0205 	rsb	r2, r3, #5
 8002c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c1a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c20:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	68f9      	ldr	r1, [r7, #12]
 8002c26:	69b8      	ldr	r0, [r7, #24]
 8002c28:	f001 fa1a 	bl	8004060 <pxPortInitialiseStack>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c30:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <prvInitialiseNewTask+0x120>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c3c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c3e:	bf00      	nop
 8002c40:	3720      	adds	r7, #32
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002c50:	f001 fb2a 	bl	80042a8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002c54:	4b40      	ldr	r3, [pc, #256]	@ (8002d58 <prvAddNewTaskToReadyList+0x110>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d58 <prvAddNewTaskToReadyList+0x110>)
 8002c5c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8002d5c <prvAddNewTaskToReadyList+0x114>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d109      	bne.n	8002c7a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002c66:	4a3d      	ldr	r2, [pc, #244]	@ (8002d5c <prvAddNewTaskToReadyList+0x114>)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c6c:	4b3a      	ldr	r3, [pc, #232]	@ (8002d58 <prvAddNewTaskToReadyList+0x110>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d110      	bne.n	8002c96 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002c74:	f000 fd64 	bl	8003740 <prvInitialiseTaskLists>
 8002c78:	e00d      	b.n	8002c96 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002c7a:	4b39      	ldr	r3, [pc, #228]	@ (8002d60 <prvAddNewTaskToReadyList+0x118>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d109      	bne.n	8002c96 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c82:	4b36      	ldr	r3, [pc, #216]	@ (8002d5c <prvAddNewTaskToReadyList+0x114>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d802      	bhi.n	8002c96 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002c90:	4a32      	ldr	r2, [pc, #200]	@ (8002d5c <prvAddNewTaskToReadyList+0x114>)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002c96:	4b33      	ldr	r3, [pc, #204]	@ (8002d64 <prvAddNewTaskToReadyList+0x11c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	4a31      	ldr	r2, [pc, #196]	@ (8002d64 <prvAddNewTaskToReadyList+0x11c>)
 8002c9e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ca0:	4b30      	ldr	r3, [pc, #192]	@ (8002d64 <prvAddNewTaskToReadyList+0x11c>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cac:	2201      	movs	r2, #1
 8002cae:	409a      	lsls	r2, r3
 8002cb0:	4b2d      	ldr	r3, [pc, #180]	@ (8002d68 <prvAddNewTaskToReadyList+0x120>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	4a2c      	ldr	r2, [pc, #176]	@ (8002d68 <prvAddNewTaskToReadyList+0x120>)
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cbe:	492b      	ldr	r1, [pc, #172]	@ (8002d6c <prvAddNewTaskToReadyList+0x124>)
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	3304      	adds	r3, #4
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	609a      	str	r2, [r3, #8]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	60da      	str	r2, [r3, #12]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	3204      	adds	r2, #4
 8002ce6:	605a      	str	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	1d1a      	adds	r2, r3, #4
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4a1b      	ldr	r2, [pc, #108]	@ (8002d6c <prvAddNewTaskToReadyList+0x124>)
 8002cfe:	441a      	add	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	615a      	str	r2, [r3, #20]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d08:	4918      	ldr	r1, [pc, #96]	@ (8002d6c <prvAddNewTaskToReadyList+0x124>)
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	1c59      	adds	r1, r3, #1
 8002d18:	4814      	ldr	r0, [pc, #80]	@ (8002d6c <prvAddNewTaskToReadyList+0x124>)
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4403      	add	r3, r0
 8002d24:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002d26:	f001 faf5 	bl	8004314 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d60 <prvAddNewTaskToReadyList+0x118>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00e      	beq.n	8002d50 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d32:	4b0a      	ldr	r3, [pc, #40]	@ (8002d5c <prvAddNewTaskToReadyList+0x114>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d207      	bcs.n	8002d50 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002d40:	4b0b      	ldr	r3, [pc, #44]	@ (8002d70 <prvAddNewTaskToReadyList+0x128>)
 8002d42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d50:	bf00      	nop
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	200001f4 	.word	0x200001f4
 8002d5c:	2000011c 	.word	0x2000011c
 8002d60:	20000200 	.word	0x20000200
 8002d64:	20000210 	.word	0x20000210
 8002d68:	200001fc 	.word	0x200001fc
 8002d6c:	20000120 	.word	0x20000120
 8002d70:	e000ed04 	.word	0xe000ed04

08002d74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002d7a:	4b22      	ldr	r3, [pc, #136]	@ (8002e04 <vTaskStartScheduler+0x90>)
 8002d7c:	9301      	str	r3, [sp, #4]
 8002d7e:	2300      	movs	r3, #0
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	2300      	movs	r3, #0
 8002d84:	2282      	movs	r2, #130	@ 0x82
 8002d86:	4920      	ldr	r1, [pc, #128]	@ (8002e08 <vTaskStartScheduler+0x94>)
 8002d88:	4820      	ldr	r0, [pc, #128]	@ (8002e0c <vTaskStartScheduler+0x98>)
 8002d8a:	f7ff fe82 	bl	8002a92 <xTaskCreate>
 8002d8e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d102      	bne.n	8002d9c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002d96:	f000 feb5 	bl	8003b04 <xTimerCreateTimerTask>
 8002d9a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d118      	bne.n	8002dd4 <vTaskStartScheduler+0x60>
        __asm volatile
 8002da2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002da6:	b672      	cpsid	i
 8002da8:	f383 8811 	msr	BASEPRI, r3
 8002dac:	f3bf 8f6f 	isb	sy
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	b662      	cpsie	i
 8002db6:	60bb      	str	r3, [r7, #8]
    }
 8002db8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002dba:	4b15      	ldr	r3, [pc, #84]	@ (8002e10 <vTaskStartScheduler+0x9c>)
 8002dbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002dc0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002dc2:	4b14      	ldr	r3, [pc, #80]	@ (8002e14 <vTaskStartScheduler+0xa0>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002dc8:	4b13      	ldr	r3, [pc, #76]	@ (8002e18 <vTaskStartScheduler+0xa4>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002dce:	f001 f9d9 	bl	8004184 <xPortStartScheduler>
 8002dd2:	e011      	b.n	8002df8 <vTaskStartScheduler+0x84>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dda:	d10d      	bne.n	8002df8 <vTaskStartScheduler+0x84>
        __asm volatile
 8002ddc:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002de0:	b672      	cpsid	i
 8002de2:	f383 8811 	msr	BASEPRI, r3
 8002de6:	f3bf 8f6f 	isb	sy
 8002dea:	f3bf 8f4f 	dsb	sy
 8002dee:	b662      	cpsie	i
 8002df0:	607b      	str	r3, [r7, #4]
    }
 8002df2:	bf00      	nop
 8002df4:	bf00      	nop
 8002df6:	e7fd      	b.n	8002df4 <vTaskStartScheduler+0x80>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002df8:	4b08      	ldr	r3, [pc, #32]	@ (8002e1c <vTaskStartScheduler+0xa8>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
}
 8002dfc:	bf00      	nop
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20000218 	.word	0x20000218
 8002e08:	0800520c 	.word	0x0800520c
 8002e0c:	08003711 	.word	0x08003711
 8002e10:	20000214 	.word	0x20000214
 8002e14:	20000200 	.word	0x20000200
 8002e18:	200001f8 	.word	0x200001f8
 8002e1c:	2000000c 	.word	0x2000000c

08002e20 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002e24:	4b04      	ldr	r3, [pc, #16]	@ (8002e38 <vTaskSuspendAll+0x18>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	4a03      	ldr	r2, [pc, #12]	@ (8002e38 <vTaskSuspendAll+0x18>)
 8002e2c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002e2e:	bf00      	nop
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	2000021c 	.word	0x2000021c

08002e3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002e4a:	4b72      	ldr	r3, [pc, #456]	@ (8003014 <xTaskResumeAll+0x1d8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10d      	bne.n	8002e6e <xTaskResumeAll+0x32>
        __asm volatile
 8002e52:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8002e56:	b672      	cpsid	i
 8002e58:	f383 8811 	msr	BASEPRI, r3
 8002e5c:	f3bf 8f6f 	isb	sy
 8002e60:	f3bf 8f4f 	dsb	sy
 8002e64:	b662      	cpsie	i
 8002e66:	607b      	str	r3, [r7, #4]
    }
 8002e68:	bf00      	nop
 8002e6a:	bf00      	nop
 8002e6c:	e7fd      	b.n	8002e6a <xTaskResumeAll+0x2e>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002e6e:	f001 fa1b 	bl	80042a8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002e72:	4b68      	ldr	r3, [pc, #416]	@ (8003014 <xTaskResumeAll+0x1d8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	4a66      	ldr	r2, [pc, #408]	@ (8003014 <xTaskResumeAll+0x1d8>)
 8002e7a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e7c:	4b65      	ldr	r3, [pc, #404]	@ (8003014 <xTaskResumeAll+0x1d8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f040 80c0 	bne.w	8003006 <xTaskResumeAll+0x1ca>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e86:	4b64      	ldr	r3, [pc, #400]	@ (8003018 <xTaskResumeAll+0x1dc>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 80bb 	beq.w	8003006 <xTaskResumeAll+0x1ca>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e90:	e08a      	b.n	8002fa8 <xTaskResumeAll+0x16c>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e92:	4b62      	ldr	r3, [pc, #392]	@ (800301c <xTaskResumeAll+0x1e0>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9e:	613b      	str	r3, [r7, #16]
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	69fa      	ldr	r2, [r7, #28]
 8002ea6:	6a12      	ldr	r2, [r2, #32]
 8002ea8:	609a      	str	r2, [r3, #8]
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	69fa      	ldr	r2, [r7, #28]
 8002eb0:	69d2      	ldr	r2, [r2, #28]
 8002eb2:	605a      	str	r2, [r3, #4]
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	3318      	adds	r3, #24
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d103      	bne.n	8002ec8 <xTaskResumeAll+0x8c>
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	6a1a      	ldr	r2, [r3, #32]
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	605a      	str	r2, [r3, #4]
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	1e5a      	subs	r2, r3, #1
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	69fa      	ldr	r2, [r7, #28]
 8002ee4:	68d2      	ldr	r2, [r2, #12]
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	69fa      	ldr	r2, [r7, #28]
 8002eee:	6892      	ldr	r2, [r2, #8]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	3304      	adds	r3, #4
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d103      	bne.n	8002f06 <xTaskResumeAll+0xca>
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	605a      	str	r2, [r3, #4]
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	615a      	str	r2, [r3, #20]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	1e5a      	subs	r2, r3, #1
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	409a      	lsls	r2, r3
 8002f1e:	4b40      	ldr	r3, [pc, #256]	@ (8003020 <xTaskResumeAll+0x1e4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	4a3e      	ldr	r2, [pc, #248]	@ (8003020 <xTaskResumeAll+0x1e4>)
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f2c:	493d      	ldr	r1, [pc, #244]	@ (8003024 <xTaskResumeAll+0x1e8>)
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	3304      	adds	r3, #4
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	60da      	str	r2, [r3, #12]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	69fa      	ldr	r2, [r7, #28]
 8002f52:	3204      	adds	r2, #4
 8002f54:	605a      	str	r2, [r3, #4]
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	1d1a      	adds	r2, r3, #4
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	609a      	str	r2, [r3, #8]
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f62:	4613      	mov	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4a2e      	ldr	r2, [pc, #184]	@ (8003024 <xTaskResumeAll+0x1e8>)
 8002f6c:	441a      	add	r2, r3
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	615a      	str	r2, [r3, #20]
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f76:	492b      	ldr	r1, [pc, #172]	@ (8003024 <xTaskResumeAll+0x1e8>)
 8002f78:	4613      	mov	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	1c59      	adds	r1, r3, #1
 8002f86:	4827      	ldr	r0, [pc, #156]	@ (8003024 <xTaskResumeAll+0x1e8>)
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4403      	add	r3, r0
 8002f92:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f98:	4b23      	ldr	r3, [pc, #140]	@ (8003028 <xTaskResumeAll+0x1ec>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d302      	bcc.n	8002fa8 <xTaskResumeAll+0x16c>
                    {
                        xYieldPending = pdTRUE;
 8002fa2:	4b22      	ldr	r3, [pc, #136]	@ (800302c <xTaskResumeAll+0x1f0>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800301c <xTaskResumeAll+0x1e0>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f47f af70 	bne.w	8002e92 <xTaskResumeAll+0x56>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <xTaskResumeAll+0x180>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002fb8:	f000 fc40 	bl	800383c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8003030 <xTaskResumeAll+0x1f4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d010      	beq.n	8002fea <xTaskResumeAll+0x1ae>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002fc8:	f000 f852 	bl	8003070 <xTaskIncrementTick>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <xTaskResumeAll+0x19c>
                            {
                                xYieldPending = pdTRUE;
 8002fd2:	4b16      	ldr	r3, [pc, #88]	@ (800302c <xTaskResumeAll+0x1f0>)
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1f1      	bne.n	8002fc8 <xTaskResumeAll+0x18c>

                        xPendedTicks = 0;
 8002fe4:	4b12      	ldr	r3, [pc, #72]	@ (8003030 <xTaskResumeAll+0x1f4>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002fea:	4b10      	ldr	r3, [pc, #64]	@ (800302c <xTaskResumeAll+0x1f0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d009      	beq.n	8003006 <xTaskResumeAll+0x1ca>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8003034 <xTaskResumeAll+0x1f8>)
 8002ff8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003006:	f001 f985 	bl	8004314 <vPortExitCritical>

    return xAlreadyYielded;
 800300a:	69bb      	ldr	r3, [r7, #24]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3720      	adds	r7, #32
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	2000021c 	.word	0x2000021c
 8003018:	200001f4 	.word	0x200001f4
 800301c:	200001b4 	.word	0x200001b4
 8003020:	200001fc 	.word	0x200001fc
 8003024:	20000120 	.word	0x20000120
 8003028:	2000011c 	.word	0x2000011c
 800302c:	20000208 	.word	0x20000208
 8003030:	20000204 	.word	0x20000204
 8003034:	e000ed04 	.word	0xe000ed04

08003038 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800303e:	4b05      	ldr	r3, [pc, #20]	@ (8003054 <xTaskGetTickCount+0x1c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003044:	687b      	ldr	r3, [r7, #4]
}
 8003046:	4618      	mov	r0, r3
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	200001f8 	.word	0x200001f8

08003058 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 800305c:	4b03      	ldr	r3, [pc, #12]	@ (800306c <uxTaskGetNumberOfTasks+0x14>)
 800305e:	681b      	ldr	r3, [r3, #0]
}
 8003060:	4618      	mov	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	200001f4 	.word	0x200001f4

08003070 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08a      	sub	sp, #40	@ 0x28
 8003074:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003076:	2300      	movs	r3, #0
 8003078:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800307a:	4b7f      	ldr	r3, [pc, #508]	@ (8003278 <xTaskIncrementTick+0x208>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	f040 80ef 	bne.w	8003262 <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003084:	4b7d      	ldr	r3, [pc, #500]	@ (800327c <xTaskIncrementTick+0x20c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3301      	adds	r3, #1
 800308a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800308c:	4a7b      	ldr	r2, [pc, #492]	@ (800327c <xTaskIncrementTick+0x20c>)
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d123      	bne.n	80030e0 <xTaskIncrementTick+0x70>
        {
            taskSWITCH_DELAYED_LISTS();
 8003098:	4b79      	ldr	r3, [pc, #484]	@ (8003280 <xTaskIncrementTick+0x210>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00d      	beq.n	80030be <xTaskIncrementTick+0x4e>
        __asm volatile
 80030a2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80030a6:	b672      	cpsid	i
 80030a8:	f383 8811 	msr	BASEPRI, r3
 80030ac:	f3bf 8f6f 	isb	sy
 80030b0:	f3bf 8f4f 	dsb	sy
 80030b4:	b662      	cpsie	i
 80030b6:	607b      	str	r3, [r7, #4]
    }
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop
 80030bc:	e7fd      	b.n	80030ba <xTaskIncrementTick+0x4a>
 80030be:	4b70      	ldr	r3, [pc, #448]	@ (8003280 <xTaskIncrementTick+0x210>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	61fb      	str	r3, [r7, #28]
 80030c4:	4b6f      	ldr	r3, [pc, #444]	@ (8003284 <xTaskIncrementTick+0x214>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a6d      	ldr	r2, [pc, #436]	@ (8003280 <xTaskIncrementTick+0x210>)
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	4a6d      	ldr	r2, [pc, #436]	@ (8003284 <xTaskIncrementTick+0x214>)
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003288 <xTaskIncrementTick+0x218>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	3301      	adds	r3, #1
 80030d8:	4a6b      	ldr	r2, [pc, #428]	@ (8003288 <xTaskIncrementTick+0x218>)
 80030da:	6013      	str	r3, [r2, #0]
 80030dc:	f000 fbae 	bl	800383c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80030e0:	4b6a      	ldr	r3, [pc, #424]	@ (800328c <xTaskIncrementTick+0x21c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6a3a      	ldr	r2, [r7, #32]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	f0c0 80a6 	bcc.w	8003238 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030ec:	4b64      	ldr	r3, [pc, #400]	@ (8003280 <xTaskIncrementTick+0x210>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d104      	bne.n	8003100 <xTaskIncrementTick+0x90>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030f6:	4b65      	ldr	r3, [pc, #404]	@ (800328c <xTaskIncrementTick+0x21c>)
 80030f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80030fc:	601a      	str	r2, [r3, #0]
                    break;
 80030fe:	e09b      	b.n	8003238 <xTaskIncrementTick+0x1c8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003100:	4b5f      	ldr	r3, [pc, #380]	@ (8003280 <xTaskIncrementTick+0x210>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003110:	6a3a      	ldr	r2, [r7, #32]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	429a      	cmp	r2, r3
 8003116:	d203      	bcs.n	8003120 <xTaskIncrementTick+0xb0>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003118:	4a5c      	ldr	r2, [pc, #368]	@ (800328c <xTaskIncrementTick+0x21c>)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800311e:	e08b      	b.n	8003238 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	613b      	str	r3, [r7, #16]
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	68d2      	ldr	r2, [r2, #12]
 800312e:	609a      	str	r2, [r3, #8]
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	6892      	ldr	r2, [r2, #8]
 8003138:	605a      	str	r2, [r3, #4]
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	3304      	adds	r3, #4
 8003142:	429a      	cmp	r2, r3
 8003144:	d103      	bne.n	800314e <xTaskIncrementTick+0xde>
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2200      	movs	r2, #0
 8003152:	615a      	str	r2, [r3, #20]
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	1e5a      	subs	r2, r3, #1
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003162:	2b00      	cmp	r3, #0
 8003164:	d01e      	beq.n	80031a4 <xTaskIncrementTick+0x134>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	6a12      	ldr	r2, [r2, #32]
 8003174:	609a      	str	r2, [r3, #8]
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	69d2      	ldr	r2, [r2, #28]
 800317e:	605a      	str	r2, [r3, #4]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	3318      	adds	r3, #24
 8003188:	429a      	cmp	r2, r3
 800318a:	d103      	bne.n	8003194 <xTaskIncrementTick+0x124>
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	6a1a      	ldr	r2, [r3, #32]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	605a      	str	r2, [r3, #4]
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2200      	movs	r2, #0
 8003198:	629a      	str	r2, [r3, #40]	@ 0x28
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	1e5a      	subs	r2, r3, #1
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a8:	2201      	movs	r2, #1
 80031aa:	409a      	lsls	r2, r3
 80031ac:	4b38      	ldr	r3, [pc, #224]	@ (8003290 <xTaskIncrementTick+0x220>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	4a37      	ldr	r2, [pc, #220]	@ (8003290 <xTaskIncrementTick+0x220>)
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031ba:	4936      	ldr	r1, [pc, #216]	@ (8003294 <xTaskIncrementTick+0x224>)
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	3304      	adds	r3, #4
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	609a      	str	r2, [r3, #8]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	60da      	str	r2, [r3, #12]
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	3204      	adds	r2, #4
 80031e2:	605a      	str	r2, [r3, #4]
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	1d1a      	adds	r2, r3, #4
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	609a      	str	r2, [r3, #8]
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4a26      	ldr	r2, [pc, #152]	@ (8003294 <xTaskIncrementTick+0x224>)
 80031fa:	441a      	add	r2, r3
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	615a      	str	r2, [r3, #20]
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003204:	4923      	ldr	r1, [pc, #140]	@ (8003294 <xTaskIncrementTick+0x224>)
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	1c59      	adds	r1, r3, #1
 8003214:	481f      	ldr	r0, [pc, #124]	@ (8003294 <xTaskIncrementTick+0x224>)
 8003216:	4613      	mov	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4403      	add	r3, r0
 8003220:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003226:	4b1c      	ldr	r3, [pc, #112]	@ (8003298 <xTaskIncrementTick+0x228>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322c:	429a      	cmp	r2, r3
 800322e:	f67f af5d 	bls.w	80030ec <xTaskIncrementTick+0x7c>
                        {
                            xSwitchRequired = pdTRUE;
 8003232:	2301      	movs	r3, #1
 8003234:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003236:	e759      	b.n	80030ec <xTaskIncrementTick+0x7c>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003238:	4b17      	ldr	r3, [pc, #92]	@ (8003298 <xTaskIncrementTick+0x228>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800323e:	4915      	ldr	r1, [pc, #84]	@ (8003294 <xTaskIncrementTick+0x224>)
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d901      	bls.n	8003254 <xTaskIncrementTick+0x1e4>
            {
                xSwitchRequired = pdTRUE;
 8003250:	2301      	movs	r3, #1
 8003252:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003254:	4b11      	ldr	r3, [pc, #68]	@ (800329c <xTaskIncrementTick+0x22c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d007      	beq.n	800326c <xTaskIncrementTick+0x1fc>
            {
                xSwitchRequired = pdTRUE;
 800325c:	2301      	movs	r3, #1
 800325e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003260:	e004      	b.n	800326c <xTaskIncrementTick+0x1fc>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003262:	4b0f      	ldr	r3, [pc, #60]	@ (80032a0 <xTaskIncrementTick+0x230>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3301      	adds	r3, #1
 8003268:	4a0d      	ldr	r2, [pc, #52]	@ (80032a0 <xTaskIncrementTick+0x230>)
 800326a:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800326c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800326e:	4618      	mov	r0, r3
 8003270:	3728      	adds	r7, #40	@ 0x28
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	2000021c 	.word	0x2000021c
 800327c:	200001f8 	.word	0x200001f8
 8003280:	200001ac 	.word	0x200001ac
 8003284:	200001b0 	.word	0x200001b0
 8003288:	2000020c 	.word	0x2000020c
 800328c:	20000214 	.word	0x20000214
 8003290:	200001fc 	.word	0x200001fc
 8003294:	20000120 	.word	0x20000120
 8003298:	2000011c 	.word	0x2000011c
 800329c:	20000208 	.word	0x20000208
 80032a0:	20000204 	.word	0x20000204

080032a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032aa:	4b28      	ldr	r3, [pc, #160]	@ (800334c <vTaskSwitchContext+0xa8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80032b2:	4b27      	ldr	r3, [pc, #156]	@ (8003350 <vTaskSwitchContext+0xac>)
 80032b4:	2201      	movs	r2, #1
 80032b6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80032b8:	e042      	b.n	8003340 <vTaskSwitchContext+0x9c>
        xYieldPending = pdFALSE;
 80032ba:	4b25      	ldr	r3, [pc, #148]	@ (8003350 <vTaskSwitchContext+0xac>)
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032c0:	4b24      	ldr	r3, [pc, #144]	@ (8003354 <vTaskSwitchContext+0xb0>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	fab3 f383 	clz	r3, r3
 80032cc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80032ce:	7afb      	ldrb	r3, [r7, #11]
 80032d0:	f1c3 031f 	rsb	r3, r3, #31
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	4920      	ldr	r1, [pc, #128]	@ (8003358 <vTaskSwitchContext+0xb4>)
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10d      	bne.n	8003306 <vTaskSwitchContext+0x62>
        __asm volatile
 80032ea:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80032ee:	b672      	cpsid	i
 80032f0:	f383 8811 	msr	BASEPRI, r3
 80032f4:	f3bf 8f6f 	isb	sy
 80032f8:	f3bf 8f4f 	dsb	sy
 80032fc:	b662      	cpsie	i
 80032fe:	607b      	str	r3, [r7, #4]
    }
 8003300:	bf00      	nop
 8003302:	bf00      	nop
 8003304:	e7fd      	b.n	8003302 <vTaskSwitchContext+0x5e>
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4a11      	ldr	r2, [pc, #68]	@ (8003358 <vTaskSwitchContext+0xb4>)
 8003312:	4413      	add	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	3308      	adds	r3, #8
 8003328:	429a      	cmp	r2, r3
 800332a:	d104      	bne.n	8003336 <vTaskSwitchContext+0x92>
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4a07      	ldr	r2, [pc, #28]	@ (800335c <vTaskSwitchContext+0xb8>)
 800333e:	6013      	str	r3, [r2, #0]
}
 8003340:	bf00      	nop
 8003342:	371c      	adds	r7, #28
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	2000021c 	.word	0x2000021c
 8003350:	20000208 	.word	0x20000208
 8003354:	200001fc 	.word	0x200001fc
 8003358:	20000120 	.word	0x20000120
 800335c:	2000011c 	.word	0x2000011c

08003360 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10d      	bne.n	800338c <vTaskPlaceOnEventList+0x2c>
        __asm volatile
 8003370:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003374:	b672      	cpsid	i
 8003376:	f383 8811 	msr	BASEPRI, r3
 800337a:	f3bf 8f6f 	isb	sy
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	b662      	cpsie	i
 8003384:	60fb      	str	r3, [r7, #12]
    }
 8003386:	bf00      	nop
 8003388:	bf00      	nop
 800338a:	e7fd      	b.n	8003388 <vTaskPlaceOnEventList+0x28>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800338c:	4b07      	ldr	r3, [pc, #28]	@ (80033ac <vTaskPlaceOnEventList+0x4c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	3318      	adds	r3, #24
 8003392:	4619      	mov	r1, r3
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7fe ff1e 	bl	80021d6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800339a:	2101      	movs	r1, #1
 800339c:	6838      	ldr	r0, [r7, #0]
 800339e:	f000 fb31 	bl	8003a04 <prvAddCurrentTaskToDelayedList>
}
 80033a2:	bf00      	nop
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	2000011c 	.word	0x2000011c

080033b0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10d      	bne.n	80033de <vTaskPlaceOnEventListRestricted+0x2e>
        __asm volatile
 80033c2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80033c6:	b672      	cpsid	i
 80033c8:	f383 8811 	msr	BASEPRI, r3
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	b662      	cpsie	i
 80033d6:	613b      	str	r3, [r7, #16]
    }
 80033d8:	bf00      	nop
 80033da:	bf00      	nop
 80033dc:	e7fd      	b.n	80033da <vTaskPlaceOnEventListRestricted+0x2a>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	4b15      	ldr	r3, [pc, #84]	@ (800343c <vTaskPlaceOnEventListRestricted+0x8c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	61da      	str	r2, [r3, #28]
 80033ec:	4b13      	ldr	r3, [pc, #76]	@ (800343c <vTaskPlaceOnEventListRestricted+0x8c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	6892      	ldr	r2, [r2, #8]
 80033f4:	621a      	str	r2, [r3, #32]
 80033f6:	4b11      	ldr	r3, [pc, #68]	@ (800343c <vTaskPlaceOnEventListRestricted+0x8c>)
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	3218      	adds	r2, #24
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	4b0e      	ldr	r3, [pc, #56]	@ (800343c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f103 0218 	add.w	r2, r3, #24
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	609a      	str	r2, [r3, #8]
 800340e:	4b0b      	ldr	r3, [pc, #44]	@ (800343c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	629a      	str	r2, [r3, #40]	@ 0x28
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <vTaskPlaceOnEventListRestricted+0x7c>
        {
            xTicksToWait = portMAX_DELAY;
 8003426:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800342a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	68b8      	ldr	r0, [r7, #8]
 8003430:	f000 fae8 	bl	8003a04 <prvAddCurrentTaskToDelayedList>
    }
 8003434:	bf00      	nop
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	2000011c 	.word	0x2000011c

08003440 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003440:	b480      	push	{r7}
 8003442:	b08b      	sub	sp, #44	@ 0x2c
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10d      	bne.n	8003472 <xTaskRemoveFromEventList+0x32>
        __asm volatile
 8003456:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800345a:	b672      	cpsid	i
 800345c:	f383 8811 	msr	BASEPRI, r3
 8003460:	f3bf 8f6f 	isb	sy
 8003464:	f3bf 8f4f 	dsb	sy
 8003468:	b662      	cpsie	i
 800346a:	60fb      	str	r3, [r7, #12]
    }
 800346c:	bf00      	nop
 800346e:	bf00      	nop
 8003470:	e7fd      	b.n	800346e <xTaskRemoveFromEventList+0x2e>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003476:	61fb      	str	r3, [r7, #28]
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	6a3a      	ldr	r2, [r7, #32]
 800347e:	6a12      	ldr	r2, [r2, #32]
 8003480:	609a      	str	r2, [r3, #8]
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	6a3a      	ldr	r2, [r7, #32]
 8003488:	69d2      	ldr	r2, [r2, #28]
 800348a:	605a      	str	r2, [r3, #4]
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	3318      	adds	r3, #24
 8003494:	429a      	cmp	r2, r3
 8003496:	d103      	bne.n	80034a0 <xTaskRemoveFromEventList+0x60>
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	6a1a      	ldr	r2, [r3, #32]
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	605a      	str	r2, [r3, #4]
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	2200      	movs	r2, #0
 80034a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	1e5a      	subs	r2, r3, #1
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034b0:	4b4a      	ldr	r3, [pc, #296]	@ (80035dc <xTaskRemoveFromEventList+0x19c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d15e      	bne.n	8003576 <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	617b      	str	r3, [r7, #20]
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	6a3a      	ldr	r2, [r7, #32]
 80034c4:	68d2      	ldr	r2, [r2, #12]
 80034c6:	609a      	str	r2, [r3, #8]
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	6a3a      	ldr	r2, [r7, #32]
 80034ce:	6892      	ldr	r2, [r2, #8]
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	3304      	adds	r3, #4
 80034da:	429a      	cmp	r2, r3
 80034dc:	d103      	bne.n	80034e6 <xTaskRemoveFromEventList+0xa6>
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	2200      	movs	r2, #0
 80034ea:	615a      	str	r2, [r3, #20]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	1e5a      	subs	r2, r3, #1
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034fa:	2201      	movs	r2, #1
 80034fc:	409a      	lsls	r2, r3
 80034fe:	4b38      	ldr	r3, [pc, #224]	@ (80035e0 <xTaskRemoveFromEventList+0x1a0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4313      	orrs	r3, r2
 8003504:	4a36      	ldr	r2, [pc, #216]	@ (80035e0 <xTaskRemoveFromEventList+0x1a0>)
 8003506:	6013      	str	r3, [r2, #0]
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800350c:	4935      	ldr	r1, [pc, #212]	@ (80035e4 <xTaskRemoveFromEventList+0x1a4>)
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	3304      	adds	r3, #4
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	613b      	str	r3, [r7, #16]
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	609a      	str	r2, [r3, #8]
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	60da      	str	r2, [r3, #12]
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	6a3a      	ldr	r2, [r7, #32]
 8003532:	3204      	adds	r2, #4
 8003534:	605a      	str	r2, [r3, #4]
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	1d1a      	adds	r2, r3, #4
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	609a      	str	r2, [r3, #8]
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003542:	4613      	mov	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4a26      	ldr	r2, [pc, #152]	@ (80035e4 <xTaskRemoveFromEventList+0x1a4>)
 800354c:	441a      	add	r2, r3
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	615a      	str	r2, [r3, #20]
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003556:	4923      	ldr	r1, [pc, #140]	@ (80035e4 <xTaskRemoveFromEventList+0x1a4>)
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	1c59      	adds	r1, r3, #1
 8003566:	481f      	ldr	r0, [pc, #124]	@ (80035e4 <xTaskRemoveFromEventList+0x1a4>)
 8003568:	4613      	mov	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4403      	add	r3, r0
 8003572:	6019      	str	r1, [r3, #0]
 8003574:	e01b      	b.n	80035ae <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003576:	4b1c      	ldr	r3, [pc, #112]	@ (80035e8 <xTaskRemoveFromEventList+0x1a8>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	61bb      	str	r3, [r7, #24]
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	61da      	str	r2, [r3, #28]
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	621a      	str	r2, [r3, #32]
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	6a3a      	ldr	r2, [r7, #32]
 8003590:	3218      	adds	r2, #24
 8003592:	605a      	str	r2, [r3, #4]
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	f103 0218 	add.w	r2, r3, #24
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	609a      	str	r2, [r3, #8]
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	4a11      	ldr	r2, [pc, #68]	@ (80035e8 <xTaskRemoveFromEventList+0x1a8>)
 80035a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80035a4:	4b10      	ldr	r3, [pc, #64]	@ (80035e8 <xTaskRemoveFromEventList+0x1a8>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3301      	adds	r3, #1
 80035aa:	4a0f      	ldr	r2, [pc, #60]	@ (80035e8 <xTaskRemoveFromEventList+0x1a8>)
 80035ac:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035b2:	4b0e      	ldr	r3, [pc, #56]	@ (80035ec <xTaskRemoveFromEventList+0x1ac>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d905      	bls.n	80035c8 <xTaskRemoveFromEventList+0x188>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80035bc:	2301      	movs	r3, #1
 80035be:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80035c0:	4b0b      	ldr	r3, [pc, #44]	@ (80035f0 <xTaskRemoveFromEventList+0x1b0>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	e001      	b.n	80035cc <xTaskRemoveFromEventList+0x18c>
    }
    else
    {
        xReturn = pdFALSE;
 80035c8:	2300      	movs	r3, #0
 80035ca:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 80035cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	372c      	adds	r7, #44	@ 0x2c
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	2000021c 	.word	0x2000021c
 80035e0:	200001fc 	.word	0x200001fc
 80035e4:	20000120 	.word	0x20000120
 80035e8:	200001b4 	.word	0x200001b4
 80035ec:	2000011c 	.word	0x2000011c
 80035f0:	20000208 	.word	0x20000208

080035f4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80035fc:	4b06      	ldr	r3, [pc, #24]	@ (8003618 <vTaskInternalSetTimeOutState+0x24>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003604:	4b05      	ldr	r3, [pc, #20]	@ (800361c <vTaskInternalSetTimeOutState+0x28>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	605a      	str	r2, [r3, #4]
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	2000020c 	.word	0x2000020c
 800361c:	200001f8 	.word	0x200001f8

08003620 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10d      	bne.n	800364c <xTaskCheckForTimeOut+0x2c>
        __asm volatile
 8003630:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003634:	b672      	cpsid	i
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	b662      	cpsie	i
 8003644:	613b      	str	r3, [r7, #16]
    }
 8003646:	bf00      	nop
 8003648:	bf00      	nop
 800364a:	e7fd      	b.n	8003648 <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10d      	bne.n	800366e <xTaskCheckForTimeOut+0x4e>
        __asm volatile
 8003652:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003656:	b672      	cpsid	i
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	b662      	cpsie	i
 8003666:	60fb      	str	r3, [r7, #12]
    }
 8003668:	bf00      	nop
 800366a:	bf00      	nop
 800366c:	e7fd      	b.n	800366a <xTaskCheckForTimeOut+0x4a>

    taskENTER_CRITICAL();
 800366e:	f000 fe1b 	bl	80042a8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003672:	4b1f      	ldr	r3, [pc, #124]	@ (80036f0 <xTaskCheckForTimeOut+0xd0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800368a:	d102      	bne.n	8003692 <xTaskCheckForTimeOut+0x72>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800368c:	2300      	movs	r3, #0
 800368e:	61fb      	str	r3, [r7, #28]
 8003690:	e026      	b.n	80036e0 <xTaskCheckForTimeOut+0xc0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	4b17      	ldr	r3, [pc, #92]	@ (80036f4 <xTaskCheckForTimeOut+0xd4>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d00a      	beq.n	80036b4 <xTaskCheckForTimeOut+0x94>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d305      	bcc.n	80036b4 <xTaskCheckForTimeOut+0x94>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80036a8:	2301      	movs	r3, #1
 80036aa:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	e015      	b.n	80036e0 <xTaskCheckForTimeOut+0xc0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d20b      	bcs.n	80036d6 <xTaskCheckForTimeOut+0xb6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	1ad2      	subs	r2, r2, r3
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff ff92 	bl	80035f4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80036d0:	2300      	movs	r3, #0
 80036d2:	61fb      	str	r3, [r7, #28]
 80036d4:	e004      	b.n	80036e0 <xTaskCheckForTimeOut+0xc0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80036dc:	2301      	movs	r3, #1
 80036de:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80036e0:	f000 fe18 	bl	8004314 <vPortExitCritical>

    return xReturn;
 80036e4:	69fb      	ldr	r3, [r7, #28]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3720      	adds	r7, #32
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	200001f8 	.word	0x200001f8
 80036f4:	2000020c 	.word	0x2000020c

080036f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80036fc:	4b03      	ldr	r3, [pc, #12]	@ (800370c <vTaskMissedYield+0x14>)
 80036fe:	2201      	movs	r2, #1
 8003700:	601a      	str	r2, [r3, #0]
}
 8003702:	bf00      	nop
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	20000208 	.word	0x20000208

08003710 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003718:	f000 f852 	bl	80037c0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800371c:	4b06      	ldr	r3, [pc, #24]	@ (8003738 <prvIdleTask+0x28>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d9f9      	bls.n	8003718 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003724:	4b05      	ldr	r3, [pc, #20]	@ (800373c <prvIdleTask+0x2c>)
 8003726:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003734:	e7f0      	b.n	8003718 <prvIdleTask+0x8>
 8003736:	bf00      	nop
 8003738:	20000120 	.word	0x20000120
 800373c:	e000ed04 	.word	0xe000ed04

08003740 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003746:	2300      	movs	r3, #0
 8003748:	607b      	str	r3, [r7, #4]
 800374a:	e00c      	b.n	8003766 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4a12      	ldr	r2, [pc, #72]	@ (80037a0 <prvInitialiseTaskLists+0x60>)
 8003758:	4413      	add	r3, r2
 800375a:	4618      	mov	r0, r3
 800375c:	f7fe fd0e 	bl	800217c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3301      	adds	r3, #1
 8003764:	607b      	str	r3, [r7, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b04      	cmp	r3, #4
 800376a:	d9ef      	bls.n	800374c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800376c:	480d      	ldr	r0, [pc, #52]	@ (80037a4 <prvInitialiseTaskLists+0x64>)
 800376e:	f7fe fd05 	bl	800217c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003772:	480d      	ldr	r0, [pc, #52]	@ (80037a8 <prvInitialiseTaskLists+0x68>)
 8003774:	f7fe fd02 	bl	800217c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003778:	480c      	ldr	r0, [pc, #48]	@ (80037ac <prvInitialiseTaskLists+0x6c>)
 800377a:	f7fe fcff 	bl	800217c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800377e:	480c      	ldr	r0, [pc, #48]	@ (80037b0 <prvInitialiseTaskLists+0x70>)
 8003780:	f7fe fcfc 	bl	800217c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003784:	480b      	ldr	r0, [pc, #44]	@ (80037b4 <prvInitialiseTaskLists+0x74>)
 8003786:	f7fe fcf9 	bl	800217c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800378a:	4b0b      	ldr	r3, [pc, #44]	@ (80037b8 <prvInitialiseTaskLists+0x78>)
 800378c:	4a05      	ldr	r2, [pc, #20]	@ (80037a4 <prvInitialiseTaskLists+0x64>)
 800378e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003790:	4b0a      	ldr	r3, [pc, #40]	@ (80037bc <prvInitialiseTaskLists+0x7c>)
 8003792:	4a05      	ldr	r2, [pc, #20]	@ (80037a8 <prvInitialiseTaskLists+0x68>)
 8003794:	601a      	str	r2, [r3, #0]
}
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000120 	.word	0x20000120
 80037a4:	20000184 	.word	0x20000184
 80037a8:	20000198 	.word	0x20000198
 80037ac:	200001b4 	.word	0x200001b4
 80037b0:	200001c8 	.word	0x200001c8
 80037b4:	200001e0 	.word	0x200001e0
 80037b8:	200001ac 	.word	0x200001ac
 80037bc:	200001b0 	.word	0x200001b0

080037c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037c6:	e019      	b.n	80037fc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80037c8:	f000 fd6e 	bl	80042a8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037cc:	4b10      	ldr	r3, [pc, #64]	@ (8003810 <prvCheckTasksWaitingTermination+0x50>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3304      	adds	r3, #4
 80037d8:	4618      	mov	r0, r3
 80037da:	f7fe fd35 	bl	8002248 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80037de:	4b0d      	ldr	r3, [pc, #52]	@ (8003814 <prvCheckTasksWaitingTermination+0x54>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	4a0b      	ldr	r2, [pc, #44]	@ (8003814 <prvCheckTasksWaitingTermination+0x54>)
 80037e6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80037e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003818 <prvCheckTasksWaitingTermination+0x58>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3b01      	subs	r3, #1
 80037ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003818 <prvCheckTasksWaitingTermination+0x58>)
 80037f0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80037f2:	f000 fd8f 	bl	8004314 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f810 	bl	800381c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037fc:	4b06      	ldr	r3, [pc, #24]	@ (8003818 <prvCheckTasksWaitingTermination+0x58>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1e1      	bne.n	80037c8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003804:	bf00      	nop
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	200001c8 	.word	0x200001c8
 8003814:	200001f4 	.word	0x200001f4
 8003818:	200001dc 	.word	0x200001dc

0800381c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003828:	4618      	mov	r0, r3
 800382a:	f000 fee9 	bl	8004600 <vPortFree>
            vPortFree( pxTCB );
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fee6 	bl	8004600 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003834:	bf00      	nop
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003840:	4b0a      	ldr	r3, [pc, #40]	@ (800386c <prvResetNextTaskUnblockTime+0x30>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d104      	bne.n	8003854 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800384a:	4b09      	ldr	r3, [pc, #36]	@ (8003870 <prvResetNextTaskUnblockTime+0x34>)
 800384c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003850:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003852:	e005      	b.n	8003860 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003854:	4b05      	ldr	r3, [pc, #20]	@ (800386c <prvResetNextTaskUnblockTime+0x30>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a04      	ldr	r2, [pc, #16]	@ (8003870 <prvResetNextTaskUnblockTime+0x34>)
 800385e:	6013      	str	r3, [r2, #0]
}
 8003860:	bf00      	nop
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	200001ac 	.word	0x200001ac
 8003870:	20000214 	.word	0x20000214

08003874 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800387a:	4b0b      	ldr	r3, [pc, #44]	@ (80038a8 <xTaskGetSchedulerState+0x34>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d102      	bne.n	8003888 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003882:	2301      	movs	r3, #1
 8003884:	607b      	str	r3, [r7, #4]
 8003886:	e008      	b.n	800389a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003888:	4b08      	ldr	r3, [pc, #32]	@ (80038ac <xTaskGetSchedulerState+0x38>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d102      	bne.n	8003896 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003890:	2302      	movs	r3, #2
 8003892:	607b      	str	r3, [r7, #4]
 8003894:	e001      	b.n	800389a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003896:	2300      	movs	r3, #0
 8003898:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800389a:	687b      	ldr	r3, [r7, #4]
    }
 800389c:	4618      	mov	r0, r3
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	20000200 	.word	0x20000200
 80038ac:	2000021c 	.word	0x2000021c

080038b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b088      	sub	sp, #32
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 80038bc:	2300      	movs	r3, #0
 80038be:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 8092 	beq.w	80039ec <xTaskPriorityDisinherit+0x13c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80038c8:	4b4b      	ldr	r3, [pc, #300]	@ (80039f8 <xTaskPriorityDisinherit+0x148>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d00d      	beq.n	80038ee <xTaskPriorityDisinherit+0x3e>
        __asm volatile
 80038d2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80038d6:	b672      	cpsid	i
 80038d8:	f383 8811 	msr	BASEPRI, r3
 80038dc:	f3bf 8f6f 	isb	sy
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	b662      	cpsie	i
 80038e6:	613b      	str	r3, [r7, #16]
    }
 80038e8:	bf00      	nop
 80038ea:	bf00      	nop
 80038ec:	e7fd      	b.n	80038ea <xTaskPriorityDisinherit+0x3a>
            configASSERT( pxTCB->uxMutexesHeld );
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10d      	bne.n	8003912 <xTaskPriorityDisinherit+0x62>
        __asm volatile
 80038f6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80038fa:	b672      	cpsid	i
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f3bf 8f6f 	isb	sy
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	b662      	cpsie	i
 800390a:	60fb      	str	r3, [r7, #12]
    }
 800390c:	bf00      	nop
 800390e:	bf00      	nop
 8003910:	e7fd      	b.n	800390e <xTaskPriorityDisinherit+0x5e>
            ( pxTCB->uxMutexesHeld )--;
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003916:	1e5a      	subs	r2, r3, #1
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003924:	429a      	cmp	r2, r3
 8003926:	d061      	beq.n	80039ec <xTaskPriorityDisinherit+0x13c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800392c:	2b00      	cmp	r3, #0
 800392e:	d15d      	bne.n	80039ec <xTaskPriorityDisinherit+0x13c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	3304      	adds	r3, #4
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe fc87 	bl	8002248 <uxListRemove>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10a      	bne.n	8003956 <xTaskPriorityDisinherit+0xa6>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003944:	2201      	movs	r2, #1
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43da      	mvns	r2, r3
 800394c:	4b2b      	ldr	r3, [pc, #172]	@ (80039fc <xTaskPriorityDisinherit+0x14c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4013      	ands	r3, r2
 8003952:	4a2a      	ldr	r2, [pc, #168]	@ (80039fc <xTaskPriorityDisinherit+0x14c>)
 8003954:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003962:	f1c3 0205 	rsb	r2, r3, #5
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396e:	2201      	movs	r2, #1
 8003970:	409a      	lsls	r2, r3
 8003972:	4b22      	ldr	r3, [pc, #136]	@ (80039fc <xTaskPriorityDisinherit+0x14c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4313      	orrs	r3, r2
 8003978:	4a20      	ldr	r2, [pc, #128]	@ (80039fc <xTaskPriorityDisinherit+0x14c>)
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003980:	491f      	ldr	r1, [pc, #124]	@ (8003a00 <xTaskPriorityDisinherit+0x150>)
 8003982:	4613      	mov	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	3304      	adds	r3, #4
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	609a      	str	r2, [r3, #8]
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	60da      	str	r2, [r3, #12]
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	3204      	adds	r2, #4
 80039a8:	605a      	str	r2, [r3, #4]
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	1d1a      	adds	r2, r3, #4
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	609a      	str	r2, [r3, #8]
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039b6:	4613      	mov	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4a10      	ldr	r2, [pc, #64]	@ (8003a00 <xTaskPriorityDisinherit+0x150>)
 80039c0:	441a      	add	r2, r3
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	615a      	str	r2, [r3, #20]
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039ca:	490d      	ldr	r1, [pc, #52]	@ (8003a00 <xTaskPriorityDisinherit+0x150>)
 80039cc:	4613      	mov	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	1c59      	adds	r1, r3, #1
 80039da:	4809      	ldr	r0, [pc, #36]	@ (8003a00 <xTaskPriorityDisinherit+0x150>)
 80039dc:	4613      	mov	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4413      	add	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4403      	add	r3, r0
 80039e6:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80039e8:	2301      	movs	r3, #1
 80039ea:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80039ec:	69fb      	ldr	r3, [r7, #28]
    }
 80039ee:	4618      	mov	r0, r3
 80039f0:	3720      	adds	r7, #32
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	2000011c 	.word	0x2000011c
 80039fc:	200001fc 	.word	0x200001fc
 8003a00:	20000120 	.word	0x20000120

08003a04 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003a0e:	4b36      	ldr	r3, [pc, #216]	@ (8003ae8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a14:	4b35      	ldr	r3, [pc, #212]	@ (8003aec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fe fc14 	bl	8002248 <uxListRemove>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10b      	bne.n	8003a3e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003a26:	4b31      	ldr	r3, [pc, #196]	@ (8003aec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	43da      	mvns	r2, r3
 8003a34:	4b2e      	ldr	r3, [pc, #184]	@ (8003af0 <prvAddCurrentTaskToDelayedList+0xec>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	4a2d      	ldr	r2, [pc, #180]	@ (8003af0 <prvAddCurrentTaskToDelayedList+0xec>)
 8003a3c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a44:	d124      	bne.n	8003a90 <prvAddCurrentTaskToDelayedList+0x8c>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d021      	beq.n	8003a90 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a4c:	4b29      	ldr	r3, [pc, #164]	@ (8003af4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	4b26      	ldr	r3, [pc, #152]	@ (8003aec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	609a      	str	r2, [r3, #8]
 8003a5a:	4b24      	ldr	r3, [pc, #144]	@ (8003aec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	6892      	ldr	r2, [r2, #8]
 8003a62:	60da      	str	r2, [r3, #12]
 8003a64:	4b21      	ldr	r3, [pc, #132]	@ (8003aec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	3204      	adds	r2, #4
 8003a6e:	605a      	str	r2, [r3, #4]
 8003a70:	4b1e      	ldr	r3, [pc, #120]	@ (8003aec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	1d1a      	adds	r2, r3, #4
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	609a      	str	r2, [r3, #8]
 8003a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8003aec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a1d      	ldr	r2, [pc, #116]	@ (8003af4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003a80:	615a      	str	r2, [r3, #20]
 8003a82:	4b1c      	ldr	r3, [pc, #112]	@ (8003af4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	3301      	adds	r3, #1
 8003a88:	4a1a      	ldr	r2, [pc, #104]	@ (8003af4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003a8e:	e026      	b.n	8003ade <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4413      	add	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a98:	4b14      	ldr	r3, [pc, #80]	@ (8003aec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d209      	bcs.n	8003abc <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003aa8:	4b13      	ldr	r3, [pc, #76]	@ (8003af8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	4b0f      	ldr	r3, [pc, #60]	@ (8003aec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	f7fe fb8e 	bl	80021d6 <vListInsert>
}
 8003aba:	e010      	b.n	8003ade <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003abc:	4b0f      	ldr	r3, [pc, #60]	@ (8003afc <prvAddCurrentTaskToDelayedList+0xf8>)
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8003aec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4610      	mov	r0, r2
 8003aca:	f7fe fb84 	bl	80021d6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003ace:	4b0c      	ldr	r3, [pc, #48]	@ (8003b00 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d202      	bcs.n	8003ade <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003ad8:	4a09      	ldr	r2, [pc, #36]	@ (8003b00 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6013      	str	r3, [r2, #0]
}
 8003ade:	bf00      	nop
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	200001f8 	.word	0x200001f8
 8003aec:	2000011c 	.word	0x2000011c
 8003af0:	200001fc 	.word	0x200001fc
 8003af4:	200001e0 	.word	0x200001e0
 8003af8:	200001b0 	.word	0x200001b0
 8003afc:	200001ac 	.word	0x200001ac
 8003b00:	20000214 	.word	0x20000214

08003b04 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003b0e:	f000 fa71 	bl	8003ff4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003b12:	4b13      	ldr	r3, [pc, #76]	@ (8003b60 <xTimerCreateTimerTask+0x5c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00b      	beq.n	8003b32 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003b1a:	4b12      	ldr	r3, [pc, #72]	@ (8003b64 <xTimerCreateTimerTask+0x60>)
 8003b1c:	9301      	str	r3, [sp, #4]
 8003b1e:	2304      	movs	r3, #4
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	2300      	movs	r3, #0
 8003b24:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003b28:	490f      	ldr	r1, [pc, #60]	@ (8003b68 <xTimerCreateTimerTask+0x64>)
 8003b2a:	4810      	ldr	r0, [pc, #64]	@ (8003b6c <xTimerCreateTimerTask+0x68>)
 8003b2c:	f7fe ffb1 	bl	8002a92 <xTaskCreate>
 8003b30:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10d      	bne.n	8003b54 <xTimerCreateTimerTask+0x50>
        __asm volatile
 8003b38:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003b3c:	b672      	cpsid	i
 8003b3e:	f383 8811 	msr	BASEPRI, r3
 8003b42:	f3bf 8f6f 	isb	sy
 8003b46:	f3bf 8f4f 	dsb	sy
 8003b4a:	b662      	cpsie	i
 8003b4c:	603b      	str	r3, [r7, #0]
    }
 8003b4e:	bf00      	nop
 8003b50:	bf00      	nop
 8003b52:	e7fd      	b.n	8003b50 <xTimerCreateTimerTask+0x4c>
        return xReturn;
 8003b54:	687b      	ldr	r3, [r7, #4]
    }
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20000250 	.word	0x20000250
 8003b64:	20000254 	.word	0x20000254
 8003b68:	08005224 	.word	0x08005224
 8003b6c:	08003c15 	.word	0x08003c15

08003b70 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003b7c:	e008      	b.n	8003b90 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	4413      	add	r3, r2
 8003b86:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	699a      	ldr	r2, [r3, #24]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	18d1      	adds	r1, r2, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 f8df 	bl	8003d60 <prvInsertTimerInActiveList>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1ea      	bne.n	8003b7e <prvReloadTimer+0xe>
        }
    }
 8003ba8:	bf00      	nop
 8003baa:	bf00      	nop
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bbe:	4b14      	ldr	r3, [pc, #80]	@ (8003c10 <prvProcessExpiredTimer+0x5c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fe fb3b 	bl	8002248 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d005      	beq.n	8003bec <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f7ff ffc3 	bl	8003b70 <prvReloadTimer>
 8003bea:	e008      	b.n	8003bfe <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003bf2:	f023 0301 	bic.w	r3, r3, #1
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	4798      	blx	r3
    }
 8003c06:	bf00      	nop
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000248 	.word	0x20000248

08003c14 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c1c:	f107 0308 	add.w	r3, r7, #8
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 f859 	bl	8003cd8 <prvGetNextExpireTime>
 8003c26:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 f805 	bl	8003c3c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003c32:	f000 f8d7 	bl	8003de4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c36:	bf00      	nop
 8003c38:	e7f0      	b.n	8003c1c <prvTimerTask+0x8>
	...

08003c3c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003c46:	f7ff f8eb 	bl	8002e20 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c4a:	f107 0308 	add.w	r3, r7, #8
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 f866 	bl	8003d20 <prvSampleTimeNow>
 8003c54:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d130      	bne.n	8003cbe <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10a      	bne.n	8003c78 <prvProcessTimerOrBlockTask+0x3c>
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d806      	bhi.n	8003c78 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003c6a:	f7ff f8e7 	bl	8002e3c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c6e:	68f9      	ldr	r1, [r7, #12]
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7ff ff9f 	bl	8003bb4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003c76:	e024      	b.n	8003cc2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d008      	beq.n	8003c90 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c7e:	4b13      	ldr	r3, [pc, #76]	@ (8003ccc <prvProcessTimerOrBlockTask+0x90>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <prvProcessTimerOrBlockTask+0x50>
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e000      	b.n	8003c8e <prvProcessTimerOrBlockTask+0x52>
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c90:	4b0f      	ldr	r3, [pc, #60]	@ (8003cd0 <prvProcessTimerOrBlockTask+0x94>)
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	f7fe fe4b 	bl	8002938 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003ca2:	f7ff f8cb 	bl	8002e3c <xTaskResumeAll>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10a      	bne.n	8003cc2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003cac:	4b09      	ldr	r3, [pc, #36]	@ (8003cd4 <prvProcessTimerOrBlockTask+0x98>)
 8003cae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	f3bf 8f4f 	dsb	sy
 8003cb8:	f3bf 8f6f 	isb	sy
    }
 8003cbc:	e001      	b.n	8003cc2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003cbe:	f7ff f8bd 	bl	8002e3c <xTaskResumeAll>
    }
 8003cc2:	bf00      	nop
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	2000024c 	.word	0x2000024c
 8003cd0:	20000250 	.word	0x20000250
 8003cd4:	e000ed04 	.word	0xe000ed04

08003cd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8003d1c <prvGetNextExpireTime+0x44>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <prvGetNextExpireTime+0x16>
 8003cea:	2201      	movs	r2, #1
 8003cec:	e000      	b.n	8003cf0 <prvGetNextExpireTime+0x18>
 8003cee:	2200      	movs	r2, #0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d105      	bne.n	8003d08 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003cfc:	4b07      	ldr	r3, [pc, #28]	@ (8003d1c <prvGetNextExpireTime+0x44>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	e001      	b.n	8003d0c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
    }
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	20000248 	.word	0x20000248

08003d20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003d28:	f7ff f986 	bl	8003038 <xTaskGetTickCount>
 8003d2c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d5c <prvSampleTimeNow+0x3c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d205      	bcs.n	8003d44 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003d38:	f000 f936 	bl	8003fa8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	e002      	b.n	8003d4a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003d4a:	4a04      	ldr	r2, [pc, #16]	@ (8003d5c <prvSampleTimeNow+0x3c>)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003d50:	68fb      	ldr	r3, [r7, #12]
    }
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	20000258 	.word	0x20000258

08003d60 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d812      	bhi.n	8003dac <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	1ad2      	subs	r2, r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d302      	bcc.n	8003d9a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003d94:	2301      	movs	r3, #1
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	e01b      	b.n	8003dd2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d9a:	4b10      	ldr	r3, [pc, #64]	@ (8003ddc <prvInsertTimerInActiveList+0x7c>)
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	3304      	adds	r3, #4
 8003da2:	4619      	mov	r1, r3
 8003da4:	4610      	mov	r0, r2
 8003da6:	f7fe fa16 	bl	80021d6 <vListInsert>
 8003daa:	e012      	b.n	8003dd2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d206      	bcs.n	8003dc2 <prvInsertTimerInActiveList+0x62>
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d302      	bcc.n	8003dc2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	e007      	b.n	8003dd2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003dc2:	4b07      	ldr	r3, [pc, #28]	@ (8003de0 <prvInsertTimerInActiveList+0x80>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4610      	mov	r0, r2
 8003dce:	f7fe fa02 	bl	80021d6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003dd2:	697b      	ldr	r3, [r7, #20]
    }
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3718      	adds	r7, #24
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	2000024c 	.word	0x2000024c
 8003de0:	20000248 	.word	0x20000248

08003de4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08a      	sub	sp, #40	@ 0x28
 8003de8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003dea:	e0cb      	b.n	8003f84 <prvProcessReceivedCommands+0x1a0>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	da1b      	bge.n	8003e2a <prvProcessReceivedCommands+0x46>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003df2:	1d3b      	adds	r3, r7, #4
 8003df4:	3304      	adds	r3, #4
 8003df6:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8003df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10d      	bne.n	8003e1a <prvProcessReceivedCommands+0x36>
        __asm volatile
 8003dfe:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003e02:	b672      	cpsid	i
 8003e04:	f383 8811 	msr	BASEPRI, r3
 8003e08:	f3bf 8f6f 	isb	sy
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	b662      	cpsie	i
 8003e12:	61bb      	str	r3, [r7, #24]
    }
 8003e14:	bf00      	nop
 8003e16:	bf00      	nop
 8003e18:	e7fd      	b.n	8003e16 <prvProcessReceivedCommands+0x32>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e20:	6850      	ldr	r0, [r2, #4]
 8003e22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e24:	6892      	ldr	r2, [r2, #8]
 8003e26:	4611      	mov	r1, r2
 8003e28:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f2c0 80a9 	blt.w	8003f84 <prvProcessReceivedCommands+0x1a0>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d004      	beq.n	8003e48 <prvProcessReceivedCommands+0x64>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	3304      	adds	r3, #4
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fe fa00 	bl	8002248 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e48:	463b      	mov	r3, r7
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff ff68 	bl	8003d20 <prvSampleTimeNow>
 8003e50:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3b01      	subs	r3, #1
 8003e56:	2b08      	cmp	r3, #8
 8003e58:	f200 8091 	bhi.w	8003f7e <prvProcessReceivedCommands+0x19a>
 8003e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e64 <prvProcessReceivedCommands+0x80>)
 8003e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e62:	bf00      	nop
 8003e64:	08003e89 	.word	0x08003e89
 8003e68:	08003e89 	.word	0x08003e89
 8003e6c:	08003ef1 	.word	0x08003ef1
 8003e70:	08003f05 	.word	0x08003f05
 8003e74:	08003f55 	.word	0x08003f55
 8003e78:	08003e89 	.word	0x08003e89
 8003e7c:	08003e89 	.word	0x08003e89
 8003e80:	08003ef1 	.word	0x08003ef1
 8003e84:	08003f05 	.word	0x08003f05
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e8e:	f043 0301 	orr.w	r3, r3, #1
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	18d1      	adds	r1, r2, r3
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	69fa      	ldr	r2, [r7, #28]
 8003ea6:	6a38      	ldr	r0, [r7, #32]
 8003ea8:	f7ff ff5a 	bl	8003d60 <prvInsertTimerInActiveList>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d067      	beq.n	8003f82 <prvProcessReceivedCommands+0x19e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d009      	beq.n	8003ed4 <prvProcessReceivedCommands+0xf0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	69fa      	ldr	r2, [r7, #28]
 8003eca:	4619      	mov	r1, r3
 8003ecc:	6a38      	ldr	r0, [r7, #32]
 8003ece:	f7ff fe4f 	bl	8003b70 <prvReloadTimer>
 8003ed2:	e008      	b.n	8003ee6 <prvProcessReceivedCommands+0x102>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003eda:	f023 0301 	bic.w	r3, r3, #1
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	6a38      	ldr	r0, [r7, #32]
 8003eec:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003eee:	e048      	b.n	8003f82 <prvProcessReceivedCommands+0x19e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ef6:	f023 0301 	bic.w	r3, r3, #1
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003f02:	e03f      	b.n	8003f84 <prvProcessReceivedCommands+0x1a0>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f0a:	f043 0301 	orr.w	r3, r3, #1
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	6a3b      	ldr	r3, [r7, #32]
 8003f1a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10d      	bne.n	8003f40 <prvProcessReceivedCommands+0x15c>
        __asm volatile
 8003f24:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003f28:	b672      	cpsid	i
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	b662      	cpsie	i
 8003f38:	617b      	str	r3, [r7, #20]
    }
 8003f3a:	bf00      	nop
 8003f3c:	bf00      	nop
 8003f3e:	e7fd      	b.n	8003f3c <prvProcessReceivedCommands+0x158>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	699a      	ldr	r2, [r3, #24]
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	18d1      	adds	r1, r2, r3
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	69fa      	ldr	r2, [r7, #28]
 8003f4c:	6a38      	ldr	r0, [r7, #32]
 8003f4e:	f7ff ff07 	bl	8003d60 <prvInsertTimerInActiveList>
                        break;
 8003f52:	e017      	b.n	8003f84 <prvProcessReceivedCommands+0x1a0>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d103      	bne.n	8003f6a <prvProcessReceivedCommands+0x186>
                            {
                                vPortFree( pxTimer );
 8003f62:	6a38      	ldr	r0, [r7, #32]
 8003f64:	f000 fb4c 	bl	8004600 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003f68:	e00c      	b.n	8003f84 <prvProcessReceivedCommands+0x1a0>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f70:	f023 0301 	bic.w	r3, r3, #1
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003f7c:	e002      	b.n	8003f84 <prvProcessReceivedCommands+0x1a0>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003f7e:	bf00      	nop
 8003f80:	e000      	b.n	8003f84 <prvProcessReceivedCommands+0x1a0>
                        break;
 8003f82:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f84:	4b07      	ldr	r3, [pc, #28]	@ (8003fa4 <prvProcessReceivedCommands+0x1c0>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	1d39      	adds	r1, r7, #4
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7fe fa93 	bl	80024b8 <xQueueReceive>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f47f af29 	bne.w	8003dec <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003f9a:	bf00      	nop
 8003f9c:	bf00      	nop
 8003f9e:	3728      	adds	r7, #40	@ 0x28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	20000250 	.word	0x20000250

08003fa8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fae:	e009      	b.n	8003fc4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8003fec <prvSwitchTimerLists+0x44>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003fba:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003fbe:	6838      	ldr	r0, [r7, #0]
 8003fc0:	f7ff fdf8 	bl	8003bb4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003fc4:	4b09      	ldr	r3, [pc, #36]	@ (8003fec <prvSwitchTimerLists+0x44>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f0      	bne.n	8003fb0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003fce:	4b07      	ldr	r3, [pc, #28]	@ (8003fec <prvSwitchTimerLists+0x44>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003fd4:	4b06      	ldr	r3, [pc, #24]	@ (8003ff0 <prvSwitchTimerLists+0x48>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a04      	ldr	r2, [pc, #16]	@ (8003fec <prvSwitchTimerLists+0x44>)
 8003fda:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003fdc:	4a04      	ldr	r2, [pc, #16]	@ (8003ff0 <prvSwitchTimerLists+0x48>)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6013      	str	r3, [r2, #0]
    }
 8003fe2:	bf00      	nop
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	20000248 	.word	0x20000248
 8003ff0:	2000024c 	.word	0x2000024c

08003ff4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003ff8:	f000 f956 	bl	80042a8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003ffc:	4b12      	ldr	r3, [pc, #72]	@ (8004048 <prvCheckForValidListAndQueue+0x54>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d11d      	bne.n	8004040 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004004:	4811      	ldr	r0, [pc, #68]	@ (800404c <prvCheckForValidListAndQueue+0x58>)
 8004006:	f7fe f8b9 	bl	800217c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800400a:	4811      	ldr	r0, [pc, #68]	@ (8004050 <prvCheckForValidListAndQueue+0x5c>)
 800400c:	f7fe f8b6 	bl	800217c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004010:	4b10      	ldr	r3, [pc, #64]	@ (8004054 <prvCheckForValidListAndQueue+0x60>)
 8004012:	4a0e      	ldr	r2, [pc, #56]	@ (800404c <prvCheckForValidListAndQueue+0x58>)
 8004014:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004016:	4b10      	ldr	r3, [pc, #64]	@ (8004058 <prvCheckForValidListAndQueue+0x64>)
 8004018:	4a0d      	ldr	r2, [pc, #52]	@ (8004050 <prvCheckForValidListAndQueue+0x5c>)
 800401a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800401c:	2200      	movs	r2, #0
 800401e:	2110      	movs	r1, #16
 8004020:	2005      	movs	r0, #5
 8004022:	f7fe f9d1 	bl	80023c8 <xQueueGenericCreate>
 8004026:	4603      	mov	r3, r0
 8004028:	4a07      	ldr	r2, [pc, #28]	@ (8004048 <prvCheckForValidListAndQueue+0x54>)
 800402a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800402c:	4b06      	ldr	r3, [pc, #24]	@ (8004048 <prvCheckForValidListAndQueue+0x54>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004034:	4b04      	ldr	r3, [pc, #16]	@ (8004048 <prvCheckForValidListAndQueue+0x54>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4908      	ldr	r1, [pc, #32]	@ (800405c <prvCheckForValidListAndQueue+0x68>)
 800403a:	4618      	mov	r0, r3
 800403c:	f7fe fc2a 	bl	8002894 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004040:	f000 f968 	bl	8004314 <vPortExitCritical>
    }
 8004044:	bf00      	nop
 8004046:	bd80      	pop	{r7, pc}
 8004048:	20000250 	.word	0x20000250
 800404c:	20000220 	.word	0x20000220
 8004050:	20000234 	.word	0x20000234
 8004054:	20000248 	.word	0x20000248
 8004058:	2000024c 	.word	0x2000024c
 800405c:	0800522c 	.word	0x0800522c

08004060 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	3b04      	subs	r3, #4
 8004070:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004078:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	3b04      	subs	r3, #4
 800407e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f023 0201 	bic.w	r2, r3, #1
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	3b04      	subs	r3, #4
 800408e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004090:	4a0c      	ldr	r2, [pc, #48]	@ (80040c4 <pxPortInitialiseStack+0x64>)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	3b14      	subs	r3, #20
 800409a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	3b04      	subs	r3, #4
 80040a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f06f 0202 	mvn.w	r2, #2
 80040ae:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	3b20      	subs	r3, #32
 80040b4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80040b6:	68fb      	ldr	r3, [r7, #12]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	080040c9 	.word	0x080040c9

080040c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80040ce:	2300      	movs	r3, #0
 80040d0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80040d2:	4b15      	ldr	r3, [pc, #84]	@ (8004128 <prvTaskExitError+0x60>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040da:	d00d      	beq.n	80040f8 <prvTaskExitError+0x30>
        __asm volatile
 80040dc:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80040e0:	b672      	cpsid	i
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	b662      	cpsie	i
 80040f0:	60fb      	str	r3, [r7, #12]
    }
 80040f2:	bf00      	nop
 80040f4:	bf00      	nop
 80040f6:	e7fd      	b.n	80040f4 <prvTaskExitError+0x2c>
        __asm volatile
 80040f8:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80040fc:	b672      	cpsid	i
 80040fe:	f383 8811 	msr	BASEPRI, r3
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	b662      	cpsie	i
 800410c:	60bb      	str	r3, [r7, #8]
    }
 800410e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004110:	bf00      	nop
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0fc      	beq.n	8004112 <prvTaskExitError+0x4a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004118:	bf00      	nop
 800411a:	bf00      	nop
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	20000010 	.word	0x20000010
 800412c:	00000000 	.word	0x00000000

08004130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004130:	4b07      	ldr	r3, [pc, #28]	@ (8004150 <pxCurrentTCBConst2>)
 8004132:	6819      	ldr	r1, [r3, #0]
 8004134:	6808      	ldr	r0, [r1, #0]
 8004136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800413a:	f380 8809 	msr	PSP, r0
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	f04f 0000 	mov.w	r0, #0
 8004146:	f380 8811 	msr	BASEPRI, r0
 800414a:	4770      	bx	lr
 800414c:	f3af 8000 	nop.w

08004150 <pxCurrentTCBConst2>:
 8004150:	2000011c 	.word	0x2000011c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop

08004158 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004158:	4808      	ldr	r0, [pc, #32]	@ (800417c <prvPortStartFirstTask+0x24>)
 800415a:	6800      	ldr	r0, [r0, #0]
 800415c:	6800      	ldr	r0, [r0, #0]
 800415e:	f380 8808 	msr	MSP, r0
 8004162:	f04f 0000 	mov.w	r0, #0
 8004166:	f380 8814 	msr	CONTROL, r0
 800416a:	b662      	cpsie	i
 800416c:	b661      	cpsie	f
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	df00      	svc	0
 8004178:	bf00      	nop
 800417a:	0000      	.short	0x0000
 800417c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop

08004184 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800418a:	4b41      	ldr	r3, [pc, #260]	@ (8004290 <xPortStartScheduler+0x10c>)
 800418c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	b2db      	uxtb	r3, r3
 8004194:	60bb      	str	r3, [r7, #8]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	22ff      	movs	r2, #255	@ 0xff
 800419a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041a4:	79fb      	ldrb	r3, [r7, #7]
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	4b39      	ldr	r3, [pc, #228]	@ (8004294 <xPortStartScheduler+0x110>)
 80041b0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041b2:	4b39      	ldr	r3, [pc, #228]	@ (8004298 <xPortStartScheduler+0x114>)
 80041b4:	2207      	movs	r2, #7
 80041b6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041b8:	e009      	b.n	80041ce <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 80041ba:	4b37      	ldr	r3, [pc, #220]	@ (8004298 <xPortStartScheduler+0x114>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3b01      	subs	r3, #1
 80041c0:	4a35      	ldr	r2, [pc, #212]	@ (8004298 <xPortStartScheduler+0x114>)
 80041c2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041c4:	79fb      	ldrb	r3, [r7, #7]
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041ce:	79fb      	ldrb	r3, [r7, #7]
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d6:	2b80      	cmp	r3, #128	@ 0x80
 80041d8:	d0ef      	beq.n	80041ba <xPortStartScheduler+0x36>
        #ifdef __NVIC_PRIO_BITS
        {
            /* Check the CMSIS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 80041da:	4b2f      	ldr	r3, [pc, #188]	@ (8004298 <xPortStartScheduler+0x114>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f1c3 0307 	rsb	r3, r3, #7
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d00d      	beq.n	8004202 <xPortStartScheduler+0x7e>
        __asm volatile
 80041e6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80041ea:	b672      	cpsid	i
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	b662      	cpsie	i
 80041fa:	613b      	str	r3, [r7, #16]
    }
 80041fc:	bf00      	nop
 80041fe:	bf00      	nop
 8004200:	e7fd      	b.n	80041fe <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004202:	4b25      	ldr	r3, [pc, #148]	@ (8004298 <xPortStartScheduler+0x114>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f1c3 0307 	rsb	r3, r3, #7
 800420a:	2b04      	cmp	r3, #4
 800420c:	d00d      	beq.n	800422a <xPortStartScheduler+0xa6>
        __asm volatile
 800420e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004212:	b672      	cpsid	i
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	b662      	cpsie	i
 8004222:	60fb      	str	r3, [r7, #12]
    }
 8004224:	bf00      	nop
 8004226:	bf00      	nop
 8004228:	e7fd      	b.n	8004226 <xPortStartScheduler+0xa2>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800422a:	4b1b      	ldr	r3, [pc, #108]	@ (8004298 <xPortStartScheduler+0x114>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	021b      	lsls	r3, r3, #8
 8004230:	4a19      	ldr	r2, [pc, #100]	@ (8004298 <xPortStartScheduler+0x114>)
 8004232:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004234:	4b18      	ldr	r3, [pc, #96]	@ (8004298 <xPortStartScheduler+0x114>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800423c:	4a16      	ldr	r2, [pc, #88]	@ (8004298 <xPortStartScheduler+0x114>)
 800423e:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	b2da      	uxtb	r2, r3
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004248:	4b14      	ldr	r3, [pc, #80]	@ (800429c <xPortStartScheduler+0x118>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a13      	ldr	r2, [pc, #76]	@ (800429c <xPortStartScheduler+0x118>)
 800424e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004252:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004254:	4b11      	ldr	r3, [pc, #68]	@ (800429c <xPortStartScheduler+0x118>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a10      	ldr	r2, [pc, #64]	@ (800429c <xPortStartScheduler+0x118>)
 800425a:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800425e:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004260:	f000 f8de 	bl	8004420 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004264:	4b0e      	ldr	r3, [pc, #56]	@ (80042a0 <xPortStartScheduler+0x11c>)
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800426a:	f000 f8fd 	bl	8004468 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800426e:	4b0d      	ldr	r3, [pc, #52]	@ (80042a4 <xPortStartScheduler+0x120>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a0c      	ldr	r2, [pc, #48]	@ (80042a4 <xPortStartScheduler+0x120>)
 8004274:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004278:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800427a:	f7ff ff6d 	bl	8004158 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800427e:	f7ff f811 	bl	80032a4 <vTaskSwitchContext>
    prvTaskExitError();
 8004282:	f7ff ff21 	bl	80040c8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	e000e400 	.word	0xe000e400
 8004294:	2000025c 	.word	0x2000025c
 8004298:	20000260 	.word	0x20000260
 800429c:	e000ed20 	.word	0xe000ed20
 80042a0:	20000010 	.word	0x20000010
 80042a4:	e000ef34 	.word	0xe000ef34

080042a8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
        __asm volatile
 80042ae:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80042b2:	b672      	cpsid	i
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	b662      	cpsie	i
 80042c2:	607b      	str	r3, [r7, #4]
    }
 80042c4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80042c6:	4b11      	ldr	r3, [pc, #68]	@ (800430c <vPortEnterCritical+0x64>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3301      	adds	r3, #1
 80042cc:	4a0f      	ldr	r2, [pc, #60]	@ (800430c <vPortEnterCritical+0x64>)
 80042ce:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80042d0:	4b0e      	ldr	r3, [pc, #56]	@ (800430c <vPortEnterCritical+0x64>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d112      	bne.n	80042fe <vPortEnterCritical+0x56>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004310 <vPortEnterCritical+0x68>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00d      	beq.n	80042fe <vPortEnterCritical+0x56>
        __asm volatile
 80042e2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80042e6:	b672      	cpsid	i
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	b662      	cpsie	i
 80042f6:	603b      	str	r3, [r7, #0]
    }
 80042f8:	bf00      	nop
 80042fa:	bf00      	nop
 80042fc:	e7fd      	b.n	80042fa <vPortEnterCritical+0x52>
    }
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	20000010 	.word	0x20000010
 8004310:	e000ed04 	.word	0xe000ed04

08004314 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800431a:	4b13      	ldr	r3, [pc, #76]	@ (8004368 <vPortExitCritical+0x54>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10d      	bne.n	800433e <vPortExitCritical+0x2a>
        __asm volatile
 8004322:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004326:	b672      	cpsid	i
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	b662      	cpsie	i
 8004336:	607b      	str	r3, [r7, #4]
    }
 8004338:	bf00      	nop
 800433a:	bf00      	nop
 800433c:	e7fd      	b.n	800433a <vPortExitCritical+0x26>
    uxCriticalNesting--;
 800433e:	4b0a      	ldr	r3, [pc, #40]	@ (8004368 <vPortExitCritical+0x54>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3b01      	subs	r3, #1
 8004344:	4a08      	ldr	r2, [pc, #32]	@ (8004368 <vPortExitCritical+0x54>)
 8004346:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004348:	4b07      	ldr	r3, [pc, #28]	@ (8004368 <vPortExitCritical+0x54>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d105      	bne.n	800435c <vPortExitCritical+0x48>
 8004350:	2300      	movs	r3, #0
 8004352:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800435a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	20000010 	.word	0x20000010
 800436c:	00000000 	.word	0x00000000

08004370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004370:	f3ef 8009 	mrs	r0, PSP
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	4b15      	ldr	r3, [pc, #84]	@ (80043d0 <pxCurrentTCBConst>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	f01e 0f10 	tst.w	lr, #16
 8004380:	bf08      	it	eq
 8004382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800438a:	6010      	str	r0, [r2, #0]
 800438c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004390:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8004394:	b672      	cpsid	i
 8004396:	f380 8811 	msr	BASEPRI, r0
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	b662      	cpsie	i
 80043a4:	f7fe ff7e 	bl	80032a4 <vTaskSwitchContext>
 80043a8:	f04f 0000 	mov.w	r0, #0
 80043ac:	f380 8811 	msr	BASEPRI, r0
 80043b0:	bc09      	pop	{r0, r3}
 80043b2:	6819      	ldr	r1, [r3, #0]
 80043b4:	6808      	ldr	r0, [r1, #0]
 80043b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ba:	f01e 0f10 	tst.w	lr, #16
 80043be:	bf08      	it	eq
 80043c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80043c4:	f380 8809 	msr	PSP, r0
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop

080043d0 <pxCurrentTCBConst>:
 80043d0:	2000011c 	.word	0x2000011c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80043d4:	bf00      	nop
 80043d6:	bf00      	nop

080043d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
        __asm volatile
 80043de:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80043e2:	b672      	cpsid	i
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	b662      	cpsie	i
 80043f2:	607b      	str	r3, [r7, #4]
    }
 80043f4:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80043f6:	f7fe fe3b 	bl	8003070 <xTaskIncrementTick>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d003      	beq.n	8004408 <SysTick_Handler+0x30>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004400:	4b06      	ldr	r3, [pc, #24]	@ (800441c <SysTick_Handler+0x44>)
 8004402:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	2300      	movs	r3, #0
 800440a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	f383 8811 	msr	BASEPRI, r3
    }
 8004412:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004414:	bf00      	nop
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	e000ed04 	.word	0xe000ed04

08004420 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004424:	4b0b      	ldr	r3, [pc, #44]	@ (8004454 <vPortSetupTimerInterrupt+0x34>)
 8004426:	2200      	movs	r2, #0
 8004428:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800442a:	4b0b      	ldr	r3, [pc, #44]	@ (8004458 <vPortSetupTimerInterrupt+0x38>)
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004430:	4b0a      	ldr	r3, [pc, #40]	@ (800445c <vPortSetupTimerInterrupt+0x3c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a0a      	ldr	r2, [pc, #40]	@ (8004460 <vPortSetupTimerInterrupt+0x40>)
 8004436:	fba2 2303 	umull	r2, r3, r2, r3
 800443a:	099b      	lsrs	r3, r3, #6
 800443c:	4a09      	ldr	r2, [pc, #36]	@ (8004464 <vPortSetupTimerInterrupt+0x44>)
 800443e:	3b01      	subs	r3, #1
 8004440:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004442:	4b04      	ldr	r3, [pc, #16]	@ (8004454 <vPortSetupTimerInterrupt+0x34>)
 8004444:	2207      	movs	r2, #7
 8004446:	601a      	str	r2, [r3, #0]
}
 8004448:	bf00      	nop
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	e000e010 	.word	0xe000e010
 8004458:	e000e018 	.word	0xe000e018
 800445c:	20000000 	.word	0x20000000
 8004460:	10624dd3 	.word	0x10624dd3
 8004464:	e000e014 	.word	0xe000e014

08004468 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004468:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004478 <vPortEnableVFP+0x10>
 800446c:	6801      	ldr	r1, [r0, #0]
 800446e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004472:	6001      	str	r1, [r0, #0]
 8004474:	4770      	bx	lr
 8004476:	0000      	.short	0x0000
 8004478:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800447c:	bf00      	nop
 800447e:	bf00      	nop

08004480 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b08a      	sub	sp, #40	@ 0x28
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004488:	2300      	movs	r3, #0
 800448a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800448c:	f7fe fcc8 	bl	8002e20 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004490:	4b56      	ldr	r3, [pc, #344]	@ (80045ec <pvPortMalloc+0x16c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004498:	f000 f914 	bl	80046c4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d012      	beq.n	80044c8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80044a2:	2208      	movs	r2, #8
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	3308      	adds	r3, #8
 80044ae:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	43db      	mvns	r3, r3
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d804      	bhi.n	80044c4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	4413      	add	r3, r2
 80044c0:	607b      	str	r3, [r7, #4]
 80044c2:	e001      	b.n	80044c8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80044c4:	2300      	movs	r3, #0
 80044c6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	db73      	blt.n	80045b6 <pvPortMalloc+0x136>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d070      	beq.n	80045b6 <pvPortMalloc+0x136>
 80044d4:	4b46      	ldr	r3, [pc, #280]	@ (80045f0 <pvPortMalloc+0x170>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d86b      	bhi.n	80045b6 <pvPortMalloc+0x136>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80044de:	4b45      	ldr	r3, [pc, #276]	@ (80045f4 <pvPortMalloc+0x174>)
 80044e0:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80044e2:	4b44      	ldr	r3, [pc, #272]	@ (80045f4 <pvPortMalloc+0x174>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044e8:	e004      	b.n	80044f4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80044ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ec:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80044ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d903      	bls.n	8004506 <pvPortMalloc+0x86>
 80044fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f1      	bne.n	80044ea <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004506:	4b39      	ldr	r3, [pc, #228]	@ (80045ec <pvPortMalloc+0x16c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800450c:	429a      	cmp	r2, r3
 800450e:	d052      	beq.n	80045b6 <pvPortMalloc+0x136>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2208      	movs	r2, #8
 8004516:	4413      	add	r3, r2
 8004518:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800451a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	1ad2      	subs	r2, r2, r3
 800452a:	2308      	movs	r3, #8
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	429a      	cmp	r2, r3
 8004530:	d922      	bls.n	8004578 <pvPortMalloc+0xf8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4413      	add	r3, r2
 8004538:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00d      	beq.n	8004560 <pvPortMalloc+0xe0>
        __asm volatile
 8004544:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004548:	b672      	cpsid	i
 800454a:	f383 8811 	msr	BASEPRI, r3
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f3bf 8f4f 	dsb	sy
 8004556:	b662      	cpsie	i
 8004558:	613b      	str	r3, [r7, #16]
    }
 800455a:	bf00      	nop
 800455c:	bf00      	nop
 800455e:	e7fd      	b.n	800455c <pvPortMalloc+0xdc>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	1ad2      	subs	r2, r2, r3
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800456c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004572:	6978      	ldr	r0, [r7, #20]
 8004574:	f000 f902 	bl	800477c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004578:	4b1d      	ldr	r3, [pc, #116]	@ (80045f0 <pvPortMalloc+0x170>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	4a1b      	ldr	r2, [pc, #108]	@ (80045f0 <pvPortMalloc+0x170>)
 8004584:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004586:	4b1a      	ldr	r3, [pc, #104]	@ (80045f0 <pvPortMalloc+0x170>)
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	4b1b      	ldr	r3, [pc, #108]	@ (80045f8 <pvPortMalloc+0x178>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d203      	bcs.n	800459a <pvPortMalloc+0x11a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004592:	4b17      	ldr	r3, [pc, #92]	@ (80045f0 <pvPortMalloc+0x170>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a18      	ldr	r2, [pc, #96]	@ (80045f8 <pvPortMalloc+0x178>)
 8004598:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800459a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80045a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a4:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80045a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80045ac:	4b13      	ldr	r3, [pc, #76]	@ (80045fc <pvPortMalloc+0x17c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3301      	adds	r3, #1
 80045b2:	4a12      	ldr	r2, [pc, #72]	@ (80045fc <pvPortMalloc+0x17c>)
 80045b4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80045b6:	f7fe fc41 	bl	8002e3c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00d      	beq.n	80045e0 <pvPortMalloc+0x160>
        __asm volatile
 80045c4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80045c8:	b672      	cpsid	i
 80045ca:	f383 8811 	msr	BASEPRI, r3
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	b662      	cpsie	i
 80045d8:	60fb      	str	r3, [r7, #12]
    }
 80045da:	bf00      	nop
 80045dc:	bf00      	nop
 80045de:	e7fd      	b.n	80045dc <pvPortMalloc+0x15c>
    return pvReturn;
 80045e0:	69fb      	ldr	r3, [r7, #28]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3728      	adds	r7, #40	@ 0x28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	2000ba6c 	.word	0x2000ba6c
 80045f0:	2000ba70 	.word	0x2000ba70
 80045f4:	2000ba64 	.word	0x2000ba64
 80045f8:	2000ba74 	.word	0x2000ba74
 80045fc:	2000ba78 	.word	0x2000ba78

08004600 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d04f      	beq.n	80046b2 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004612:	2308      	movs	r3, #8
 8004614:	425b      	negs	r3, r3
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	4413      	add	r3, r2
 800461a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	db0d      	blt.n	8004644 <vPortFree+0x44>
        __asm volatile
 8004628:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800462c:	b672      	cpsid	i
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	b662      	cpsie	i
 800463c:	60fb      	str	r3, [r7, #12]
    }
 800463e:	bf00      	nop
 8004640:	bf00      	nop
 8004642:	e7fd      	b.n	8004640 <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00d      	beq.n	8004668 <vPortFree+0x68>
        __asm volatile
 800464c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004650:	b672      	cpsid	i
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	b662      	cpsie	i
 8004660:	60bb      	str	r3, [r7, #8]
    }
 8004662:	bf00      	nop
 8004664:	bf00      	nop
 8004666:	e7fd      	b.n	8004664 <vPortFree+0x64>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	0fdb      	lsrs	r3, r3, #31
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d01c      	beq.n	80046b2 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d118      	bne.n	80046b2 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800468c:	f7fe fbc8 	bl	8002e20 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	4b09      	ldr	r3, [pc, #36]	@ (80046bc <vPortFree+0xbc>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4413      	add	r3, r2
 800469a:	4a08      	ldr	r2, [pc, #32]	@ (80046bc <vPortFree+0xbc>)
 800469c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800469e:	6938      	ldr	r0, [r7, #16]
 80046a0:	f000 f86c 	bl	800477c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80046a4:	4b06      	ldr	r3, [pc, #24]	@ (80046c0 <vPortFree+0xc0>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3301      	adds	r3, #1
 80046aa:	4a05      	ldr	r2, [pc, #20]	@ (80046c0 <vPortFree+0xc0>)
 80046ac:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80046ae:	f7fe fbc5 	bl	8002e3c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80046b2:	bf00      	nop
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	2000ba70 	.word	0x2000ba70
 80046c0:	2000ba7c 	.word	0x2000ba7c

080046c4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80046ca:	f44f 4338 	mov.w	r3, #47104	@ 0xb800
 80046ce:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80046d0:	4b25      	ldr	r3, [pc, #148]	@ (8004768 <prvHeapInit+0xa4>)
 80046d2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00c      	beq.n	80046f8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	3307      	adds	r3, #7
 80046e2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0307 	bic.w	r3, r3, #7
 80046ea:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	4a1d      	ldr	r2, [pc, #116]	@ (8004768 <prvHeapInit+0xa4>)
 80046f4:	4413      	add	r3, r2
 80046f6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80046fc:	4a1b      	ldr	r2, [pc, #108]	@ (800476c <prvHeapInit+0xa8>)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004702:	4b1a      	ldr	r3, [pc, #104]	@ (800476c <prvHeapInit+0xa8>)
 8004704:	2200      	movs	r2, #0
 8004706:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	4413      	add	r3, r2
 800470e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004710:	2208      	movs	r2, #8
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	1a9b      	subs	r3, r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 0307 	bic.w	r3, r3, #7
 800471e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4a13      	ldr	r2, [pc, #76]	@ (8004770 <prvHeapInit+0xac>)
 8004724:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004726:	4b12      	ldr	r3, [pc, #72]	@ (8004770 <prvHeapInit+0xac>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2200      	movs	r2, #0
 800472c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800472e:	4b10      	ldr	r3, [pc, #64]	@ (8004770 <prvHeapInit+0xac>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	1ad2      	subs	r2, r2, r3
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004744:	4b0a      	ldr	r3, [pc, #40]	@ (8004770 <prvHeapInit+0xac>)
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	4a08      	ldr	r2, [pc, #32]	@ (8004774 <prvHeapInit+0xb0>)
 8004752:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	4a07      	ldr	r2, [pc, #28]	@ (8004778 <prvHeapInit+0xb4>)
 800475a:	6013      	str	r3, [r2, #0]
}
 800475c:	bf00      	nop
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	20000264 	.word	0x20000264
 800476c:	2000ba64 	.word	0x2000ba64
 8004770:	2000ba6c 	.word	0x2000ba6c
 8004774:	2000ba74 	.word	0x2000ba74
 8004778:	2000ba70 	.word	0x2000ba70

0800477c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004784:	4b28      	ldr	r3, [pc, #160]	@ (8004828 <prvInsertBlockIntoFreeList+0xac>)
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	e002      	b.n	8004790 <prvInsertBlockIntoFreeList+0x14>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	429a      	cmp	r2, r3
 8004798:	d8f7      	bhi.n	800478a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	4413      	add	r3, r2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d108      	bne.n	80047be <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	441a      	add	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	441a      	add	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d118      	bne.n	8004804 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	4b15      	ldr	r3, [pc, #84]	@ (800482c <prvInsertBlockIntoFreeList+0xb0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d00d      	beq.n	80047fa <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	441a      	add	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	e008      	b.n	800480c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80047fa:	4b0c      	ldr	r3, [pc, #48]	@ (800482c <prvInsertBlockIntoFreeList+0xb0>)
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	601a      	str	r2, [r3, #0]
 8004802:	e003      	b.n	800480c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	429a      	cmp	r2, r3
 8004812:	d002      	beq.n	800481a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800481a:	bf00      	nop
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	2000ba64 	.word	0x2000ba64
 800482c:	2000ba6c 	.word	0x2000ba6c

08004830 <std>:
 8004830:	2300      	movs	r3, #0
 8004832:	b510      	push	{r4, lr}
 8004834:	4604      	mov	r4, r0
 8004836:	e9c0 3300 	strd	r3, r3, [r0]
 800483a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800483e:	6083      	str	r3, [r0, #8]
 8004840:	8181      	strh	r1, [r0, #12]
 8004842:	6643      	str	r3, [r0, #100]	@ 0x64
 8004844:	81c2      	strh	r2, [r0, #14]
 8004846:	6183      	str	r3, [r0, #24]
 8004848:	4619      	mov	r1, r3
 800484a:	2208      	movs	r2, #8
 800484c:	305c      	adds	r0, #92	@ 0x5c
 800484e:	f000 f9e7 	bl	8004c20 <memset>
 8004852:	4b0d      	ldr	r3, [pc, #52]	@ (8004888 <std+0x58>)
 8004854:	6263      	str	r3, [r4, #36]	@ 0x24
 8004856:	4b0d      	ldr	r3, [pc, #52]	@ (800488c <std+0x5c>)
 8004858:	62a3      	str	r3, [r4, #40]	@ 0x28
 800485a:	4b0d      	ldr	r3, [pc, #52]	@ (8004890 <std+0x60>)
 800485c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800485e:	4b0d      	ldr	r3, [pc, #52]	@ (8004894 <std+0x64>)
 8004860:	6323      	str	r3, [r4, #48]	@ 0x30
 8004862:	4b0d      	ldr	r3, [pc, #52]	@ (8004898 <std+0x68>)
 8004864:	6224      	str	r4, [r4, #32]
 8004866:	429c      	cmp	r4, r3
 8004868:	d006      	beq.n	8004878 <std+0x48>
 800486a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800486e:	4294      	cmp	r4, r2
 8004870:	d002      	beq.n	8004878 <std+0x48>
 8004872:	33d0      	adds	r3, #208	@ 0xd0
 8004874:	429c      	cmp	r4, r3
 8004876:	d105      	bne.n	8004884 <std+0x54>
 8004878:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800487c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004880:	f000 ba40 	b.w	8004d04 <__retarget_lock_init_recursive>
 8004884:	bd10      	pop	{r4, pc}
 8004886:	bf00      	nop
 8004888:	08004a71 	.word	0x08004a71
 800488c:	08004a93 	.word	0x08004a93
 8004890:	08004acb 	.word	0x08004acb
 8004894:	08004aef 	.word	0x08004aef
 8004898:	2000ba80 	.word	0x2000ba80

0800489c <stdio_exit_handler>:
 800489c:	4a02      	ldr	r2, [pc, #8]	@ (80048a8 <stdio_exit_handler+0xc>)
 800489e:	4903      	ldr	r1, [pc, #12]	@ (80048ac <stdio_exit_handler+0x10>)
 80048a0:	4803      	ldr	r0, [pc, #12]	@ (80048b0 <stdio_exit_handler+0x14>)
 80048a2:	f000 b869 	b.w	8004978 <_fwalk_sglue>
 80048a6:	bf00      	nop
 80048a8:	20000014 	.word	0x20000014
 80048ac:	08005021 	.word	0x08005021
 80048b0:	20000024 	.word	0x20000024

080048b4 <cleanup_stdio>:
 80048b4:	6841      	ldr	r1, [r0, #4]
 80048b6:	4b0c      	ldr	r3, [pc, #48]	@ (80048e8 <cleanup_stdio+0x34>)
 80048b8:	4299      	cmp	r1, r3
 80048ba:	b510      	push	{r4, lr}
 80048bc:	4604      	mov	r4, r0
 80048be:	d001      	beq.n	80048c4 <cleanup_stdio+0x10>
 80048c0:	f000 fbae 	bl	8005020 <_fflush_r>
 80048c4:	68a1      	ldr	r1, [r4, #8]
 80048c6:	4b09      	ldr	r3, [pc, #36]	@ (80048ec <cleanup_stdio+0x38>)
 80048c8:	4299      	cmp	r1, r3
 80048ca:	d002      	beq.n	80048d2 <cleanup_stdio+0x1e>
 80048cc:	4620      	mov	r0, r4
 80048ce:	f000 fba7 	bl	8005020 <_fflush_r>
 80048d2:	68e1      	ldr	r1, [r4, #12]
 80048d4:	4b06      	ldr	r3, [pc, #24]	@ (80048f0 <cleanup_stdio+0x3c>)
 80048d6:	4299      	cmp	r1, r3
 80048d8:	d004      	beq.n	80048e4 <cleanup_stdio+0x30>
 80048da:	4620      	mov	r0, r4
 80048dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048e0:	f000 bb9e 	b.w	8005020 <_fflush_r>
 80048e4:	bd10      	pop	{r4, pc}
 80048e6:	bf00      	nop
 80048e8:	2000ba80 	.word	0x2000ba80
 80048ec:	2000bae8 	.word	0x2000bae8
 80048f0:	2000bb50 	.word	0x2000bb50

080048f4 <global_stdio_init.part.0>:
 80048f4:	b510      	push	{r4, lr}
 80048f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004924 <global_stdio_init.part.0+0x30>)
 80048f8:	4c0b      	ldr	r4, [pc, #44]	@ (8004928 <global_stdio_init.part.0+0x34>)
 80048fa:	4a0c      	ldr	r2, [pc, #48]	@ (800492c <global_stdio_init.part.0+0x38>)
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	4620      	mov	r0, r4
 8004900:	2200      	movs	r2, #0
 8004902:	2104      	movs	r1, #4
 8004904:	f7ff ff94 	bl	8004830 <std>
 8004908:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800490c:	2201      	movs	r2, #1
 800490e:	2109      	movs	r1, #9
 8004910:	f7ff ff8e 	bl	8004830 <std>
 8004914:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004918:	2202      	movs	r2, #2
 800491a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800491e:	2112      	movs	r1, #18
 8004920:	f7ff bf86 	b.w	8004830 <std>
 8004924:	2000bbb8 	.word	0x2000bbb8
 8004928:	2000ba80 	.word	0x2000ba80
 800492c:	0800489d 	.word	0x0800489d

08004930 <__sfp_lock_acquire>:
 8004930:	4801      	ldr	r0, [pc, #4]	@ (8004938 <__sfp_lock_acquire+0x8>)
 8004932:	f000 b9e8 	b.w	8004d06 <__retarget_lock_acquire_recursive>
 8004936:	bf00      	nop
 8004938:	2000bbc1 	.word	0x2000bbc1

0800493c <__sfp_lock_release>:
 800493c:	4801      	ldr	r0, [pc, #4]	@ (8004944 <__sfp_lock_release+0x8>)
 800493e:	f000 b9e3 	b.w	8004d08 <__retarget_lock_release_recursive>
 8004942:	bf00      	nop
 8004944:	2000bbc1 	.word	0x2000bbc1

08004948 <__sinit>:
 8004948:	b510      	push	{r4, lr}
 800494a:	4604      	mov	r4, r0
 800494c:	f7ff fff0 	bl	8004930 <__sfp_lock_acquire>
 8004950:	6a23      	ldr	r3, [r4, #32]
 8004952:	b11b      	cbz	r3, 800495c <__sinit+0x14>
 8004954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004958:	f7ff bff0 	b.w	800493c <__sfp_lock_release>
 800495c:	4b04      	ldr	r3, [pc, #16]	@ (8004970 <__sinit+0x28>)
 800495e:	6223      	str	r3, [r4, #32]
 8004960:	4b04      	ldr	r3, [pc, #16]	@ (8004974 <__sinit+0x2c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1f5      	bne.n	8004954 <__sinit+0xc>
 8004968:	f7ff ffc4 	bl	80048f4 <global_stdio_init.part.0>
 800496c:	e7f2      	b.n	8004954 <__sinit+0xc>
 800496e:	bf00      	nop
 8004970:	080048b5 	.word	0x080048b5
 8004974:	2000bbb8 	.word	0x2000bbb8

08004978 <_fwalk_sglue>:
 8004978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800497c:	4607      	mov	r7, r0
 800497e:	4688      	mov	r8, r1
 8004980:	4614      	mov	r4, r2
 8004982:	2600      	movs	r6, #0
 8004984:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004988:	f1b9 0901 	subs.w	r9, r9, #1
 800498c:	d505      	bpl.n	800499a <_fwalk_sglue+0x22>
 800498e:	6824      	ldr	r4, [r4, #0]
 8004990:	2c00      	cmp	r4, #0
 8004992:	d1f7      	bne.n	8004984 <_fwalk_sglue+0xc>
 8004994:	4630      	mov	r0, r6
 8004996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800499a:	89ab      	ldrh	r3, [r5, #12]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d907      	bls.n	80049b0 <_fwalk_sglue+0x38>
 80049a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049a4:	3301      	adds	r3, #1
 80049a6:	d003      	beq.n	80049b0 <_fwalk_sglue+0x38>
 80049a8:	4629      	mov	r1, r5
 80049aa:	4638      	mov	r0, r7
 80049ac:	47c0      	blx	r8
 80049ae:	4306      	orrs	r6, r0
 80049b0:	3568      	adds	r5, #104	@ 0x68
 80049b2:	e7e9      	b.n	8004988 <_fwalk_sglue+0x10>

080049b4 <_puts_r>:
 80049b4:	6a03      	ldr	r3, [r0, #32]
 80049b6:	b570      	push	{r4, r5, r6, lr}
 80049b8:	6884      	ldr	r4, [r0, #8]
 80049ba:	4605      	mov	r5, r0
 80049bc:	460e      	mov	r6, r1
 80049be:	b90b      	cbnz	r3, 80049c4 <_puts_r+0x10>
 80049c0:	f7ff ffc2 	bl	8004948 <__sinit>
 80049c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049c6:	07db      	lsls	r3, r3, #31
 80049c8:	d405      	bmi.n	80049d6 <_puts_r+0x22>
 80049ca:	89a3      	ldrh	r3, [r4, #12]
 80049cc:	0598      	lsls	r0, r3, #22
 80049ce:	d402      	bmi.n	80049d6 <_puts_r+0x22>
 80049d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049d2:	f000 f998 	bl	8004d06 <__retarget_lock_acquire_recursive>
 80049d6:	89a3      	ldrh	r3, [r4, #12]
 80049d8:	0719      	lsls	r1, r3, #28
 80049da:	d502      	bpl.n	80049e2 <_puts_r+0x2e>
 80049dc:	6923      	ldr	r3, [r4, #16]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d135      	bne.n	8004a4e <_puts_r+0x9a>
 80049e2:	4621      	mov	r1, r4
 80049e4:	4628      	mov	r0, r5
 80049e6:	f000 f8c5 	bl	8004b74 <__swsetup_r>
 80049ea:	b380      	cbz	r0, 8004a4e <_puts_r+0x9a>
 80049ec:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80049f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049f2:	07da      	lsls	r2, r3, #31
 80049f4:	d405      	bmi.n	8004a02 <_puts_r+0x4e>
 80049f6:	89a3      	ldrh	r3, [r4, #12]
 80049f8:	059b      	lsls	r3, r3, #22
 80049fa:	d402      	bmi.n	8004a02 <_puts_r+0x4e>
 80049fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049fe:	f000 f983 	bl	8004d08 <__retarget_lock_release_recursive>
 8004a02:	4628      	mov	r0, r5
 8004a04:	bd70      	pop	{r4, r5, r6, pc}
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	da04      	bge.n	8004a14 <_puts_r+0x60>
 8004a0a:	69a2      	ldr	r2, [r4, #24]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	dc17      	bgt.n	8004a40 <_puts_r+0x8c>
 8004a10:	290a      	cmp	r1, #10
 8004a12:	d015      	beq.n	8004a40 <_puts_r+0x8c>
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	1c5a      	adds	r2, r3, #1
 8004a18:	6022      	str	r2, [r4, #0]
 8004a1a:	7019      	strb	r1, [r3, #0]
 8004a1c:	68a3      	ldr	r3, [r4, #8]
 8004a1e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a22:	3b01      	subs	r3, #1
 8004a24:	60a3      	str	r3, [r4, #8]
 8004a26:	2900      	cmp	r1, #0
 8004a28:	d1ed      	bne.n	8004a06 <_puts_r+0x52>
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	da11      	bge.n	8004a52 <_puts_r+0x9e>
 8004a2e:	4622      	mov	r2, r4
 8004a30:	210a      	movs	r1, #10
 8004a32:	4628      	mov	r0, r5
 8004a34:	f000 f85f 	bl	8004af6 <__swbuf_r>
 8004a38:	3001      	adds	r0, #1
 8004a3a:	d0d7      	beq.n	80049ec <_puts_r+0x38>
 8004a3c:	250a      	movs	r5, #10
 8004a3e:	e7d7      	b.n	80049f0 <_puts_r+0x3c>
 8004a40:	4622      	mov	r2, r4
 8004a42:	4628      	mov	r0, r5
 8004a44:	f000 f857 	bl	8004af6 <__swbuf_r>
 8004a48:	3001      	adds	r0, #1
 8004a4a:	d1e7      	bne.n	8004a1c <_puts_r+0x68>
 8004a4c:	e7ce      	b.n	80049ec <_puts_r+0x38>
 8004a4e:	3e01      	subs	r6, #1
 8004a50:	e7e4      	b.n	8004a1c <_puts_r+0x68>
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	6022      	str	r2, [r4, #0]
 8004a58:	220a      	movs	r2, #10
 8004a5a:	701a      	strb	r2, [r3, #0]
 8004a5c:	e7ee      	b.n	8004a3c <_puts_r+0x88>
	...

08004a60 <puts>:
 8004a60:	4b02      	ldr	r3, [pc, #8]	@ (8004a6c <puts+0xc>)
 8004a62:	4601      	mov	r1, r0
 8004a64:	6818      	ldr	r0, [r3, #0]
 8004a66:	f7ff bfa5 	b.w	80049b4 <_puts_r>
 8004a6a:	bf00      	nop
 8004a6c:	20000020 	.word	0x20000020

08004a70 <__sread>:
 8004a70:	b510      	push	{r4, lr}
 8004a72:	460c      	mov	r4, r1
 8004a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a78:	f000 f8fc 	bl	8004c74 <_read_r>
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	bfab      	itete	ge
 8004a80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004a82:	89a3      	ldrhlt	r3, [r4, #12]
 8004a84:	181b      	addge	r3, r3, r0
 8004a86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004a8a:	bfac      	ite	ge
 8004a8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004a8e:	81a3      	strhlt	r3, [r4, #12]
 8004a90:	bd10      	pop	{r4, pc}

08004a92 <__swrite>:
 8004a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a96:	461f      	mov	r7, r3
 8004a98:	898b      	ldrh	r3, [r1, #12]
 8004a9a:	05db      	lsls	r3, r3, #23
 8004a9c:	4605      	mov	r5, r0
 8004a9e:	460c      	mov	r4, r1
 8004aa0:	4616      	mov	r6, r2
 8004aa2:	d505      	bpl.n	8004ab0 <__swrite+0x1e>
 8004aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f000 f8d0 	bl	8004c50 <_lseek_r>
 8004ab0:	89a3      	ldrh	r3, [r4, #12]
 8004ab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ab6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004aba:	81a3      	strh	r3, [r4, #12]
 8004abc:	4632      	mov	r2, r6
 8004abe:	463b      	mov	r3, r7
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ac6:	f000 b8e7 	b.w	8004c98 <_write_r>

08004aca <__sseek>:
 8004aca:	b510      	push	{r4, lr}
 8004acc:	460c      	mov	r4, r1
 8004ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ad2:	f000 f8bd 	bl	8004c50 <_lseek_r>
 8004ad6:	1c43      	adds	r3, r0, #1
 8004ad8:	89a3      	ldrh	r3, [r4, #12]
 8004ada:	bf15      	itete	ne
 8004adc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004ade:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004ae2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004ae6:	81a3      	strheq	r3, [r4, #12]
 8004ae8:	bf18      	it	ne
 8004aea:	81a3      	strhne	r3, [r4, #12]
 8004aec:	bd10      	pop	{r4, pc}

08004aee <__sclose>:
 8004aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af2:	f000 b89d 	b.w	8004c30 <_close_r>

08004af6 <__swbuf_r>:
 8004af6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af8:	460e      	mov	r6, r1
 8004afa:	4614      	mov	r4, r2
 8004afc:	4605      	mov	r5, r0
 8004afe:	b118      	cbz	r0, 8004b08 <__swbuf_r+0x12>
 8004b00:	6a03      	ldr	r3, [r0, #32]
 8004b02:	b90b      	cbnz	r3, 8004b08 <__swbuf_r+0x12>
 8004b04:	f7ff ff20 	bl	8004948 <__sinit>
 8004b08:	69a3      	ldr	r3, [r4, #24]
 8004b0a:	60a3      	str	r3, [r4, #8]
 8004b0c:	89a3      	ldrh	r3, [r4, #12]
 8004b0e:	071a      	lsls	r2, r3, #28
 8004b10:	d501      	bpl.n	8004b16 <__swbuf_r+0x20>
 8004b12:	6923      	ldr	r3, [r4, #16]
 8004b14:	b943      	cbnz	r3, 8004b28 <__swbuf_r+0x32>
 8004b16:	4621      	mov	r1, r4
 8004b18:	4628      	mov	r0, r5
 8004b1a:	f000 f82b 	bl	8004b74 <__swsetup_r>
 8004b1e:	b118      	cbz	r0, 8004b28 <__swbuf_r+0x32>
 8004b20:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004b24:	4638      	mov	r0, r7
 8004b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b28:	6823      	ldr	r3, [r4, #0]
 8004b2a:	6922      	ldr	r2, [r4, #16]
 8004b2c:	1a98      	subs	r0, r3, r2
 8004b2e:	6963      	ldr	r3, [r4, #20]
 8004b30:	b2f6      	uxtb	r6, r6
 8004b32:	4283      	cmp	r3, r0
 8004b34:	4637      	mov	r7, r6
 8004b36:	dc05      	bgt.n	8004b44 <__swbuf_r+0x4e>
 8004b38:	4621      	mov	r1, r4
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	f000 fa70 	bl	8005020 <_fflush_r>
 8004b40:	2800      	cmp	r0, #0
 8004b42:	d1ed      	bne.n	8004b20 <__swbuf_r+0x2a>
 8004b44:	68a3      	ldr	r3, [r4, #8]
 8004b46:	3b01      	subs	r3, #1
 8004b48:	60a3      	str	r3, [r4, #8]
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	1c5a      	adds	r2, r3, #1
 8004b4e:	6022      	str	r2, [r4, #0]
 8004b50:	701e      	strb	r6, [r3, #0]
 8004b52:	6962      	ldr	r2, [r4, #20]
 8004b54:	1c43      	adds	r3, r0, #1
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d004      	beq.n	8004b64 <__swbuf_r+0x6e>
 8004b5a:	89a3      	ldrh	r3, [r4, #12]
 8004b5c:	07db      	lsls	r3, r3, #31
 8004b5e:	d5e1      	bpl.n	8004b24 <__swbuf_r+0x2e>
 8004b60:	2e0a      	cmp	r6, #10
 8004b62:	d1df      	bne.n	8004b24 <__swbuf_r+0x2e>
 8004b64:	4621      	mov	r1, r4
 8004b66:	4628      	mov	r0, r5
 8004b68:	f000 fa5a 	bl	8005020 <_fflush_r>
 8004b6c:	2800      	cmp	r0, #0
 8004b6e:	d0d9      	beq.n	8004b24 <__swbuf_r+0x2e>
 8004b70:	e7d6      	b.n	8004b20 <__swbuf_r+0x2a>
	...

08004b74 <__swsetup_r>:
 8004b74:	b538      	push	{r3, r4, r5, lr}
 8004b76:	4b29      	ldr	r3, [pc, #164]	@ (8004c1c <__swsetup_r+0xa8>)
 8004b78:	4605      	mov	r5, r0
 8004b7a:	6818      	ldr	r0, [r3, #0]
 8004b7c:	460c      	mov	r4, r1
 8004b7e:	b118      	cbz	r0, 8004b88 <__swsetup_r+0x14>
 8004b80:	6a03      	ldr	r3, [r0, #32]
 8004b82:	b90b      	cbnz	r3, 8004b88 <__swsetup_r+0x14>
 8004b84:	f7ff fee0 	bl	8004948 <__sinit>
 8004b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b8c:	0719      	lsls	r1, r3, #28
 8004b8e:	d422      	bmi.n	8004bd6 <__swsetup_r+0x62>
 8004b90:	06da      	lsls	r2, r3, #27
 8004b92:	d407      	bmi.n	8004ba4 <__swsetup_r+0x30>
 8004b94:	2209      	movs	r2, #9
 8004b96:	602a      	str	r2, [r5, #0]
 8004b98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b9c:	81a3      	strh	r3, [r4, #12]
 8004b9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ba2:	e033      	b.n	8004c0c <__swsetup_r+0x98>
 8004ba4:	0758      	lsls	r0, r3, #29
 8004ba6:	d512      	bpl.n	8004bce <__swsetup_r+0x5a>
 8004ba8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004baa:	b141      	cbz	r1, 8004bbe <__swsetup_r+0x4a>
 8004bac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004bb0:	4299      	cmp	r1, r3
 8004bb2:	d002      	beq.n	8004bba <__swsetup_r+0x46>
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	f000 f8b7 	bl	8004d28 <_free_r>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8004bbe:	89a3      	ldrh	r3, [r4, #12]
 8004bc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004bc4:	81a3      	strh	r3, [r4, #12]
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	6063      	str	r3, [r4, #4]
 8004bca:	6923      	ldr	r3, [r4, #16]
 8004bcc:	6023      	str	r3, [r4, #0]
 8004bce:	89a3      	ldrh	r3, [r4, #12]
 8004bd0:	f043 0308 	orr.w	r3, r3, #8
 8004bd4:	81a3      	strh	r3, [r4, #12]
 8004bd6:	6923      	ldr	r3, [r4, #16]
 8004bd8:	b94b      	cbnz	r3, 8004bee <__swsetup_r+0x7a>
 8004bda:	89a3      	ldrh	r3, [r4, #12]
 8004bdc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004be0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004be4:	d003      	beq.n	8004bee <__swsetup_r+0x7a>
 8004be6:	4621      	mov	r1, r4
 8004be8:	4628      	mov	r0, r5
 8004bea:	f000 fa67 	bl	80050bc <__smakebuf_r>
 8004bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bf2:	f013 0201 	ands.w	r2, r3, #1
 8004bf6:	d00a      	beq.n	8004c0e <__swsetup_r+0x9a>
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	60a2      	str	r2, [r4, #8]
 8004bfc:	6962      	ldr	r2, [r4, #20]
 8004bfe:	4252      	negs	r2, r2
 8004c00:	61a2      	str	r2, [r4, #24]
 8004c02:	6922      	ldr	r2, [r4, #16]
 8004c04:	b942      	cbnz	r2, 8004c18 <__swsetup_r+0xa4>
 8004c06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004c0a:	d1c5      	bne.n	8004b98 <__swsetup_r+0x24>
 8004c0c:	bd38      	pop	{r3, r4, r5, pc}
 8004c0e:	0799      	lsls	r1, r3, #30
 8004c10:	bf58      	it	pl
 8004c12:	6962      	ldrpl	r2, [r4, #20]
 8004c14:	60a2      	str	r2, [r4, #8]
 8004c16:	e7f4      	b.n	8004c02 <__swsetup_r+0x8e>
 8004c18:	2000      	movs	r0, #0
 8004c1a:	e7f7      	b.n	8004c0c <__swsetup_r+0x98>
 8004c1c:	20000020 	.word	0x20000020

08004c20 <memset>:
 8004c20:	4402      	add	r2, r0
 8004c22:	4603      	mov	r3, r0
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d100      	bne.n	8004c2a <memset+0xa>
 8004c28:	4770      	bx	lr
 8004c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c2e:	e7f9      	b.n	8004c24 <memset+0x4>

08004c30 <_close_r>:
 8004c30:	b538      	push	{r3, r4, r5, lr}
 8004c32:	4d06      	ldr	r5, [pc, #24]	@ (8004c4c <_close_r+0x1c>)
 8004c34:	2300      	movs	r3, #0
 8004c36:	4604      	mov	r4, r0
 8004c38:	4608      	mov	r0, r1
 8004c3a:	602b      	str	r3, [r5, #0]
 8004c3c:	f7fb ff89 	bl	8000b52 <_close>
 8004c40:	1c43      	adds	r3, r0, #1
 8004c42:	d102      	bne.n	8004c4a <_close_r+0x1a>
 8004c44:	682b      	ldr	r3, [r5, #0]
 8004c46:	b103      	cbz	r3, 8004c4a <_close_r+0x1a>
 8004c48:	6023      	str	r3, [r4, #0]
 8004c4a:	bd38      	pop	{r3, r4, r5, pc}
 8004c4c:	2000bbbc 	.word	0x2000bbbc

08004c50 <_lseek_r>:
 8004c50:	b538      	push	{r3, r4, r5, lr}
 8004c52:	4d07      	ldr	r5, [pc, #28]	@ (8004c70 <_lseek_r+0x20>)
 8004c54:	4604      	mov	r4, r0
 8004c56:	4608      	mov	r0, r1
 8004c58:	4611      	mov	r1, r2
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	602a      	str	r2, [r5, #0]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f7fb ff9e 	bl	8000ba0 <_lseek>
 8004c64:	1c43      	adds	r3, r0, #1
 8004c66:	d102      	bne.n	8004c6e <_lseek_r+0x1e>
 8004c68:	682b      	ldr	r3, [r5, #0]
 8004c6a:	b103      	cbz	r3, 8004c6e <_lseek_r+0x1e>
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	bd38      	pop	{r3, r4, r5, pc}
 8004c70:	2000bbbc 	.word	0x2000bbbc

08004c74 <_read_r>:
 8004c74:	b538      	push	{r3, r4, r5, lr}
 8004c76:	4d07      	ldr	r5, [pc, #28]	@ (8004c94 <_read_r+0x20>)
 8004c78:	4604      	mov	r4, r0
 8004c7a:	4608      	mov	r0, r1
 8004c7c:	4611      	mov	r1, r2
 8004c7e:	2200      	movs	r2, #0
 8004c80:	602a      	str	r2, [r5, #0]
 8004c82:	461a      	mov	r2, r3
 8004c84:	f7fb ff2c 	bl	8000ae0 <_read>
 8004c88:	1c43      	adds	r3, r0, #1
 8004c8a:	d102      	bne.n	8004c92 <_read_r+0x1e>
 8004c8c:	682b      	ldr	r3, [r5, #0]
 8004c8e:	b103      	cbz	r3, 8004c92 <_read_r+0x1e>
 8004c90:	6023      	str	r3, [r4, #0]
 8004c92:	bd38      	pop	{r3, r4, r5, pc}
 8004c94:	2000bbbc 	.word	0x2000bbbc

08004c98 <_write_r>:
 8004c98:	b538      	push	{r3, r4, r5, lr}
 8004c9a:	4d07      	ldr	r5, [pc, #28]	@ (8004cb8 <_write_r+0x20>)
 8004c9c:	4604      	mov	r4, r0
 8004c9e:	4608      	mov	r0, r1
 8004ca0:	4611      	mov	r1, r2
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	602a      	str	r2, [r5, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	f7fb ff37 	bl	8000b1a <_write>
 8004cac:	1c43      	adds	r3, r0, #1
 8004cae:	d102      	bne.n	8004cb6 <_write_r+0x1e>
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	b103      	cbz	r3, 8004cb6 <_write_r+0x1e>
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	bd38      	pop	{r3, r4, r5, pc}
 8004cb8:	2000bbbc 	.word	0x2000bbbc

08004cbc <__libc_init_array>:
 8004cbc:	b570      	push	{r4, r5, r6, lr}
 8004cbe:	4d0d      	ldr	r5, [pc, #52]	@ (8004cf4 <__libc_init_array+0x38>)
 8004cc0:	4c0d      	ldr	r4, [pc, #52]	@ (8004cf8 <__libc_init_array+0x3c>)
 8004cc2:	1b64      	subs	r4, r4, r5
 8004cc4:	10a4      	asrs	r4, r4, #2
 8004cc6:	2600      	movs	r6, #0
 8004cc8:	42a6      	cmp	r6, r4
 8004cca:	d109      	bne.n	8004ce0 <__libc_init_array+0x24>
 8004ccc:	4d0b      	ldr	r5, [pc, #44]	@ (8004cfc <__libc_init_array+0x40>)
 8004cce:	4c0c      	ldr	r4, [pc, #48]	@ (8004d00 <__libc_init_array+0x44>)
 8004cd0:	f000 fa70 	bl	80051b4 <_init>
 8004cd4:	1b64      	subs	r4, r4, r5
 8004cd6:	10a4      	asrs	r4, r4, #2
 8004cd8:	2600      	movs	r6, #0
 8004cda:	42a6      	cmp	r6, r4
 8004cdc:	d105      	bne.n	8004cea <__libc_init_array+0x2e>
 8004cde:	bd70      	pop	{r4, r5, r6, pc}
 8004ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ce4:	4798      	blx	r3
 8004ce6:	3601      	adds	r6, #1
 8004ce8:	e7ee      	b.n	8004cc8 <__libc_init_array+0xc>
 8004cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cee:	4798      	blx	r3
 8004cf0:	3601      	adds	r6, #1
 8004cf2:	e7f2      	b.n	8004cda <__libc_init_array+0x1e>
 8004cf4:	08005254 	.word	0x08005254
 8004cf8:	08005254 	.word	0x08005254
 8004cfc:	08005254 	.word	0x08005254
 8004d00:	08005258 	.word	0x08005258

08004d04 <__retarget_lock_init_recursive>:
 8004d04:	4770      	bx	lr

08004d06 <__retarget_lock_acquire_recursive>:
 8004d06:	4770      	bx	lr

08004d08 <__retarget_lock_release_recursive>:
 8004d08:	4770      	bx	lr

08004d0a <memcpy>:
 8004d0a:	440a      	add	r2, r1
 8004d0c:	4291      	cmp	r1, r2
 8004d0e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004d12:	d100      	bne.n	8004d16 <memcpy+0xc>
 8004d14:	4770      	bx	lr
 8004d16:	b510      	push	{r4, lr}
 8004d18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d20:	4291      	cmp	r1, r2
 8004d22:	d1f9      	bne.n	8004d18 <memcpy+0xe>
 8004d24:	bd10      	pop	{r4, pc}
	...

08004d28 <_free_r>:
 8004d28:	b538      	push	{r3, r4, r5, lr}
 8004d2a:	4605      	mov	r5, r0
 8004d2c:	2900      	cmp	r1, #0
 8004d2e:	d041      	beq.n	8004db4 <_free_r+0x8c>
 8004d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d34:	1f0c      	subs	r4, r1, #4
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	bfb8      	it	lt
 8004d3a:	18e4      	addlt	r4, r4, r3
 8004d3c:	f000 f8e0 	bl	8004f00 <__malloc_lock>
 8004d40:	4a1d      	ldr	r2, [pc, #116]	@ (8004db8 <_free_r+0x90>)
 8004d42:	6813      	ldr	r3, [r2, #0]
 8004d44:	b933      	cbnz	r3, 8004d54 <_free_r+0x2c>
 8004d46:	6063      	str	r3, [r4, #4]
 8004d48:	6014      	str	r4, [r2, #0]
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d50:	f000 b8dc 	b.w	8004f0c <__malloc_unlock>
 8004d54:	42a3      	cmp	r3, r4
 8004d56:	d908      	bls.n	8004d6a <_free_r+0x42>
 8004d58:	6820      	ldr	r0, [r4, #0]
 8004d5a:	1821      	adds	r1, r4, r0
 8004d5c:	428b      	cmp	r3, r1
 8004d5e:	bf01      	itttt	eq
 8004d60:	6819      	ldreq	r1, [r3, #0]
 8004d62:	685b      	ldreq	r3, [r3, #4]
 8004d64:	1809      	addeq	r1, r1, r0
 8004d66:	6021      	streq	r1, [r4, #0]
 8004d68:	e7ed      	b.n	8004d46 <_free_r+0x1e>
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	b10b      	cbz	r3, 8004d74 <_free_r+0x4c>
 8004d70:	42a3      	cmp	r3, r4
 8004d72:	d9fa      	bls.n	8004d6a <_free_r+0x42>
 8004d74:	6811      	ldr	r1, [r2, #0]
 8004d76:	1850      	adds	r0, r2, r1
 8004d78:	42a0      	cmp	r0, r4
 8004d7a:	d10b      	bne.n	8004d94 <_free_r+0x6c>
 8004d7c:	6820      	ldr	r0, [r4, #0]
 8004d7e:	4401      	add	r1, r0
 8004d80:	1850      	adds	r0, r2, r1
 8004d82:	4283      	cmp	r3, r0
 8004d84:	6011      	str	r1, [r2, #0]
 8004d86:	d1e0      	bne.n	8004d4a <_free_r+0x22>
 8004d88:	6818      	ldr	r0, [r3, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	6053      	str	r3, [r2, #4]
 8004d8e:	4408      	add	r0, r1
 8004d90:	6010      	str	r0, [r2, #0]
 8004d92:	e7da      	b.n	8004d4a <_free_r+0x22>
 8004d94:	d902      	bls.n	8004d9c <_free_r+0x74>
 8004d96:	230c      	movs	r3, #12
 8004d98:	602b      	str	r3, [r5, #0]
 8004d9a:	e7d6      	b.n	8004d4a <_free_r+0x22>
 8004d9c:	6820      	ldr	r0, [r4, #0]
 8004d9e:	1821      	adds	r1, r4, r0
 8004da0:	428b      	cmp	r3, r1
 8004da2:	bf04      	itt	eq
 8004da4:	6819      	ldreq	r1, [r3, #0]
 8004da6:	685b      	ldreq	r3, [r3, #4]
 8004da8:	6063      	str	r3, [r4, #4]
 8004daa:	bf04      	itt	eq
 8004dac:	1809      	addeq	r1, r1, r0
 8004dae:	6021      	streq	r1, [r4, #0]
 8004db0:	6054      	str	r4, [r2, #4]
 8004db2:	e7ca      	b.n	8004d4a <_free_r+0x22>
 8004db4:	bd38      	pop	{r3, r4, r5, pc}
 8004db6:	bf00      	nop
 8004db8:	2000bbc8 	.word	0x2000bbc8

08004dbc <sbrk_aligned>:
 8004dbc:	b570      	push	{r4, r5, r6, lr}
 8004dbe:	4e0f      	ldr	r6, [pc, #60]	@ (8004dfc <sbrk_aligned+0x40>)
 8004dc0:	460c      	mov	r4, r1
 8004dc2:	6831      	ldr	r1, [r6, #0]
 8004dc4:	4605      	mov	r5, r0
 8004dc6:	b911      	cbnz	r1, 8004dce <sbrk_aligned+0x12>
 8004dc8:	f000 f9d6 	bl	8005178 <_sbrk_r>
 8004dcc:	6030      	str	r0, [r6, #0]
 8004dce:	4621      	mov	r1, r4
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	f000 f9d1 	bl	8005178 <_sbrk_r>
 8004dd6:	1c43      	adds	r3, r0, #1
 8004dd8:	d103      	bne.n	8004de2 <sbrk_aligned+0x26>
 8004dda:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004dde:	4620      	mov	r0, r4
 8004de0:	bd70      	pop	{r4, r5, r6, pc}
 8004de2:	1cc4      	adds	r4, r0, #3
 8004de4:	f024 0403 	bic.w	r4, r4, #3
 8004de8:	42a0      	cmp	r0, r4
 8004dea:	d0f8      	beq.n	8004dde <sbrk_aligned+0x22>
 8004dec:	1a21      	subs	r1, r4, r0
 8004dee:	4628      	mov	r0, r5
 8004df0:	f000 f9c2 	bl	8005178 <_sbrk_r>
 8004df4:	3001      	adds	r0, #1
 8004df6:	d1f2      	bne.n	8004dde <sbrk_aligned+0x22>
 8004df8:	e7ef      	b.n	8004dda <sbrk_aligned+0x1e>
 8004dfa:	bf00      	nop
 8004dfc:	2000bbc4 	.word	0x2000bbc4

08004e00 <_malloc_r>:
 8004e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e04:	1ccd      	adds	r5, r1, #3
 8004e06:	f025 0503 	bic.w	r5, r5, #3
 8004e0a:	3508      	adds	r5, #8
 8004e0c:	2d0c      	cmp	r5, #12
 8004e0e:	bf38      	it	cc
 8004e10:	250c      	movcc	r5, #12
 8004e12:	2d00      	cmp	r5, #0
 8004e14:	4606      	mov	r6, r0
 8004e16:	db01      	blt.n	8004e1c <_malloc_r+0x1c>
 8004e18:	42a9      	cmp	r1, r5
 8004e1a:	d904      	bls.n	8004e26 <_malloc_r+0x26>
 8004e1c:	230c      	movs	r3, #12
 8004e1e:	6033      	str	r3, [r6, #0]
 8004e20:	2000      	movs	r0, #0
 8004e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004efc <_malloc_r+0xfc>
 8004e2a:	f000 f869 	bl	8004f00 <__malloc_lock>
 8004e2e:	f8d8 3000 	ldr.w	r3, [r8]
 8004e32:	461c      	mov	r4, r3
 8004e34:	bb44      	cbnz	r4, 8004e88 <_malloc_r+0x88>
 8004e36:	4629      	mov	r1, r5
 8004e38:	4630      	mov	r0, r6
 8004e3a:	f7ff ffbf 	bl	8004dbc <sbrk_aligned>
 8004e3e:	1c43      	adds	r3, r0, #1
 8004e40:	4604      	mov	r4, r0
 8004e42:	d158      	bne.n	8004ef6 <_malloc_r+0xf6>
 8004e44:	f8d8 4000 	ldr.w	r4, [r8]
 8004e48:	4627      	mov	r7, r4
 8004e4a:	2f00      	cmp	r7, #0
 8004e4c:	d143      	bne.n	8004ed6 <_malloc_r+0xd6>
 8004e4e:	2c00      	cmp	r4, #0
 8004e50:	d04b      	beq.n	8004eea <_malloc_r+0xea>
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	4639      	mov	r1, r7
 8004e56:	4630      	mov	r0, r6
 8004e58:	eb04 0903 	add.w	r9, r4, r3
 8004e5c:	f000 f98c 	bl	8005178 <_sbrk_r>
 8004e60:	4581      	cmp	r9, r0
 8004e62:	d142      	bne.n	8004eea <_malloc_r+0xea>
 8004e64:	6821      	ldr	r1, [r4, #0]
 8004e66:	1a6d      	subs	r5, r5, r1
 8004e68:	4629      	mov	r1, r5
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	f7ff ffa6 	bl	8004dbc <sbrk_aligned>
 8004e70:	3001      	adds	r0, #1
 8004e72:	d03a      	beq.n	8004eea <_malloc_r+0xea>
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	442b      	add	r3, r5
 8004e78:	6023      	str	r3, [r4, #0]
 8004e7a:	f8d8 3000 	ldr.w	r3, [r8]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	bb62      	cbnz	r2, 8004edc <_malloc_r+0xdc>
 8004e82:	f8c8 7000 	str.w	r7, [r8]
 8004e86:	e00f      	b.n	8004ea8 <_malloc_r+0xa8>
 8004e88:	6822      	ldr	r2, [r4, #0]
 8004e8a:	1b52      	subs	r2, r2, r5
 8004e8c:	d420      	bmi.n	8004ed0 <_malloc_r+0xd0>
 8004e8e:	2a0b      	cmp	r2, #11
 8004e90:	d917      	bls.n	8004ec2 <_malloc_r+0xc2>
 8004e92:	1961      	adds	r1, r4, r5
 8004e94:	42a3      	cmp	r3, r4
 8004e96:	6025      	str	r5, [r4, #0]
 8004e98:	bf18      	it	ne
 8004e9a:	6059      	strne	r1, [r3, #4]
 8004e9c:	6863      	ldr	r3, [r4, #4]
 8004e9e:	bf08      	it	eq
 8004ea0:	f8c8 1000 	streq.w	r1, [r8]
 8004ea4:	5162      	str	r2, [r4, r5]
 8004ea6:	604b      	str	r3, [r1, #4]
 8004ea8:	4630      	mov	r0, r6
 8004eaa:	f000 f82f 	bl	8004f0c <__malloc_unlock>
 8004eae:	f104 000b 	add.w	r0, r4, #11
 8004eb2:	1d23      	adds	r3, r4, #4
 8004eb4:	f020 0007 	bic.w	r0, r0, #7
 8004eb8:	1ac2      	subs	r2, r0, r3
 8004eba:	bf1c      	itt	ne
 8004ebc:	1a1b      	subne	r3, r3, r0
 8004ebe:	50a3      	strne	r3, [r4, r2]
 8004ec0:	e7af      	b.n	8004e22 <_malloc_r+0x22>
 8004ec2:	6862      	ldr	r2, [r4, #4]
 8004ec4:	42a3      	cmp	r3, r4
 8004ec6:	bf0c      	ite	eq
 8004ec8:	f8c8 2000 	streq.w	r2, [r8]
 8004ecc:	605a      	strne	r2, [r3, #4]
 8004ece:	e7eb      	b.n	8004ea8 <_malloc_r+0xa8>
 8004ed0:	4623      	mov	r3, r4
 8004ed2:	6864      	ldr	r4, [r4, #4]
 8004ed4:	e7ae      	b.n	8004e34 <_malloc_r+0x34>
 8004ed6:	463c      	mov	r4, r7
 8004ed8:	687f      	ldr	r7, [r7, #4]
 8004eda:	e7b6      	b.n	8004e4a <_malloc_r+0x4a>
 8004edc:	461a      	mov	r2, r3
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	42a3      	cmp	r3, r4
 8004ee2:	d1fb      	bne.n	8004edc <_malloc_r+0xdc>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	6053      	str	r3, [r2, #4]
 8004ee8:	e7de      	b.n	8004ea8 <_malloc_r+0xa8>
 8004eea:	230c      	movs	r3, #12
 8004eec:	6033      	str	r3, [r6, #0]
 8004eee:	4630      	mov	r0, r6
 8004ef0:	f000 f80c 	bl	8004f0c <__malloc_unlock>
 8004ef4:	e794      	b.n	8004e20 <_malloc_r+0x20>
 8004ef6:	6005      	str	r5, [r0, #0]
 8004ef8:	e7d6      	b.n	8004ea8 <_malloc_r+0xa8>
 8004efa:	bf00      	nop
 8004efc:	2000bbc8 	.word	0x2000bbc8

08004f00 <__malloc_lock>:
 8004f00:	4801      	ldr	r0, [pc, #4]	@ (8004f08 <__malloc_lock+0x8>)
 8004f02:	f7ff bf00 	b.w	8004d06 <__retarget_lock_acquire_recursive>
 8004f06:	bf00      	nop
 8004f08:	2000bbc0 	.word	0x2000bbc0

08004f0c <__malloc_unlock>:
 8004f0c:	4801      	ldr	r0, [pc, #4]	@ (8004f14 <__malloc_unlock+0x8>)
 8004f0e:	f7ff befb 	b.w	8004d08 <__retarget_lock_release_recursive>
 8004f12:	bf00      	nop
 8004f14:	2000bbc0 	.word	0x2000bbc0

08004f18 <__sflush_r>:
 8004f18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f20:	0716      	lsls	r6, r2, #28
 8004f22:	4605      	mov	r5, r0
 8004f24:	460c      	mov	r4, r1
 8004f26:	d454      	bmi.n	8004fd2 <__sflush_r+0xba>
 8004f28:	684b      	ldr	r3, [r1, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	dc02      	bgt.n	8004f34 <__sflush_r+0x1c>
 8004f2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	dd48      	ble.n	8004fc6 <__sflush_r+0xae>
 8004f34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f36:	2e00      	cmp	r6, #0
 8004f38:	d045      	beq.n	8004fc6 <__sflush_r+0xae>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004f40:	682f      	ldr	r7, [r5, #0]
 8004f42:	6a21      	ldr	r1, [r4, #32]
 8004f44:	602b      	str	r3, [r5, #0]
 8004f46:	d030      	beq.n	8004faa <__sflush_r+0x92>
 8004f48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004f4a:	89a3      	ldrh	r3, [r4, #12]
 8004f4c:	0759      	lsls	r1, r3, #29
 8004f4e:	d505      	bpl.n	8004f5c <__sflush_r+0x44>
 8004f50:	6863      	ldr	r3, [r4, #4]
 8004f52:	1ad2      	subs	r2, r2, r3
 8004f54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004f56:	b10b      	cbz	r3, 8004f5c <__sflush_r+0x44>
 8004f58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f5a:	1ad2      	subs	r2, r2, r3
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004f60:	6a21      	ldr	r1, [r4, #32]
 8004f62:	4628      	mov	r0, r5
 8004f64:	47b0      	blx	r6
 8004f66:	1c43      	adds	r3, r0, #1
 8004f68:	89a3      	ldrh	r3, [r4, #12]
 8004f6a:	d106      	bne.n	8004f7a <__sflush_r+0x62>
 8004f6c:	6829      	ldr	r1, [r5, #0]
 8004f6e:	291d      	cmp	r1, #29
 8004f70:	d82b      	bhi.n	8004fca <__sflush_r+0xb2>
 8004f72:	4a2a      	ldr	r2, [pc, #168]	@ (800501c <__sflush_r+0x104>)
 8004f74:	410a      	asrs	r2, r1
 8004f76:	07d6      	lsls	r6, r2, #31
 8004f78:	d427      	bmi.n	8004fca <__sflush_r+0xb2>
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	6062      	str	r2, [r4, #4]
 8004f7e:	04d9      	lsls	r1, r3, #19
 8004f80:	6922      	ldr	r2, [r4, #16]
 8004f82:	6022      	str	r2, [r4, #0]
 8004f84:	d504      	bpl.n	8004f90 <__sflush_r+0x78>
 8004f86:	1c42      	adds	r2, r0, #1
 8004f88:	d101      	bne.n	8004f8e <__sflush_r+0x76>
 8004f8a:	682b      	ldr	r3, [r5, #0]
 8004f8c:	b903      	cbnz	r3, 8004f90 <__sflush_r+0x78>
 8004f8e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004f90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f92:	602f      	str	r7, [r5, #0]
 8004f94:	b1b9      	cbz	r1, 8004fc6 <__sflush_r+0xae>
 8004f96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f9a:	4299      	cmp	r1, r3
 8004f9c:	d002      	beq.n	8004fa4 <__sflush_r+0x8c>
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	f7ff fec2 	bl	8004d28 <_free_r>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	6363      	str	r3, [r4, #52]	@ 0x34
 8004fa8:	e00d      	b.n	8004fc6 <__sflush_r+0xae>
 8004faa:	2301      	movs	r3, #1
 8004fac:	4628      	mov	r0, r5
 8004fae:	47b0      	blx	r6
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	1c50      	adds	r0, r2, #1
 8004fb4:	d1c9      	bne.n	8004f4a <__sflush_r+0x32>
 8004fb6:	682b      	ldr	r3, [r5, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0c6      	beq.n	8004f4a <__sflush_r+0x32>
 8004fbc:	2b1d      	cmp	r3, #29
 8004fbe:	d001      	beq.n	8004fc4 <__sflush_r+0xac>
 8004fc0:	2b16      	cmp	r3, #22
 8004fc2:	d11e      	bne.n	8005002 <__sflush_r+0xea>
 8004fc4:	602f      	str	r7, [r5, #0]
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	e022      	b.n	8005010 <__sflush_r+0xf8>
 8004fca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fce:	b21b      	sxth	r3, r3
 8004fd0:	e01b      	b.n	800500a <__sflush_r+0xf2>
 8004fd2:	690f      	ldr	r7, [r1, #16]
 8004fd4:	2f00      	cmp	r7, #0
 8004fd6:	d0f6      	beq.n	8004fc6 <__sflush_r+0xae>
 8004fd8:	0793      	lsls	r3, r2, #30
 8004fda:	680e      	ldr	r6, [r1, #0]
 8004fdc:	bf08      	it	eq
 8004fde:	694b      	ldreq	r3, [r1, #20]
 8004fe0:	600f      	str	r7, [r1, #0]
 8004fe2:	bf18      	it	ne
 8004fe4:	2300      	movne	r3, #0
 8004fe6:	eba6 0807 	sub.w	r8, r6, r7
 8004fea:	608b      	str	r3, [r1, #8]
 8004fec:	f1b8 0f00 	cmp.w	r8, #0
 8004ff0:	dde9      	ble.n	8004fc6 <__sflush_r+0xae>
 8004ff2:	6a21      	ldr	r1, [r4, #32]
 8004ff4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004ff6:	4643      	mov	r3, r8
 8004ff8:	463a      	mov	r2, r7
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	47b0      	blx	r6
 8004ffe:	2800      	cmp	r0, #0
 8005000:	dc08      	bgt.n	8005014 <__sflush_r+0xfc>
 8005002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800500a:	81a3      	strh	r3, [r4, #12]
 800500c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005014:	4407      	add	r7, r0
 8005016:	eba8 0800 	sub.w	r8, r8, r0
 800501a:	e7e7      	b.n	8004fec <__sflush_r+0xd4>
 800501c:	dfbffffe 	.word	0xdfbffffe

08005020 <_fflush_r>:
 8005020:	b538      	push	{r3, r4, r5, lr}
 8005022:	690b      	ldr	r3, [r1, #16]
 8005024:	4605      	mov	r5, r0
 8005026:	460c      	mov	r4, r1
 8005028:	b913      	cbnz	r3, 8005030 <_fflush_r+0x10>
 800502a:	2500      	movs	r5, #0
 800502c:	4628      	mov	r0, r5
 800502e:	bd38      	pop	{r3, r4, r5, pc}
 8005030:	b118      	cbz	r0, 800503a <_fflush_r+0x1a>
 8005032:	6a03      	ldr	r3, [r0, #32]
 8005034:	b90b      	cbnz	r3, 800503a <_fflush_r+0x1a>
 8005036:	f7ff fc87 	bl	8004948 <__sinit>
 800503a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0f3      	beq.n	800502a <_fflush_r+0xa>
 8005042:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005044:	07d0      	lsls	r0, r2, #31
 8005046:	d404      	bmi.n	8005052 <_fflush_r+0x32>
 8005048:	0599      	lsls	r1, r3, #22
 800504a:	d402      	bmi.n	8005052 <_fflush_r+0x32>
 800504c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800504e:	f7ff fe5a 	bl	8004d06 <__retarget_lock_acquire_recursive>
 8005052:	4628      	mov	r0, r5
 8005054:	4621      	mov	r1, r4
 8005056:	f7ff ff5f 	bl	8004f18 <__sflush_r>
 800505a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800505c:	07da      	lsls	r2, r3, #31
 800505e:	4605      	mov	r5, r0
 8005060:	d4e4      	bmi.n	800502c <_fflush_r+0xc>
 8005062:	89a3      	ldrh	r3, [r4, #12]
 8005064:	059b      	lsls	r3, r3, #22
 8005066:	d4e1      	bmi.n	800502c <_fflush_r+0xc>
 8005068:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800506a:	f7ff fe4d 	bl	8004d08 <__retarget_lock_release_recursive>
 800506e:	e7dd      	b.n	800502c <_fflush_r+0xc>

08005070 <__swhatbuf_r>:
 8005070:	b570      	push	{r4, r5, r6, lr}
 8005072:	460c      	mov	r4, r1
 8005074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005078:	2900      	cmp	r1, #0
 800507a:	b096      	sub	sp, #88	@ 0x58
 800507c:	4615      	mov	r5, r2
 800507e:	461e      	mov	r6, r3
 8005080:	da0d      	bge.n	800509e <__swhatbuf_r+0x2e>
 8005082:	89a3      	ldrh	r3, [r4, #12]
 8005084:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005088:	f04f 0100 	mov.w	r1, #0
 800508c:	bf14      	ite	ne
 800508e:	2340      	movne	r3, #64	@ 0x40
 8005090:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005094:	2000      	movs	r0, #0
 8005096:	6031      	str	r1, [r6, #0]
 8005098:	602b      	str	r3, [r5, #0]
 800509a:	b016      	add	sp, #88	@ 0x58
 800509c:	bd70      	pop	{r4, r5, r6, pc}
 800509e:	466a      	mov	r2, sp
 80050a0:	f000 f848 	bl	8005134 <_fstat_r>
 80050a4:	2800      	cmp	r0, #0
 80050a6:	dbec      	blt.n	8005082 <__swhatbuf_r+0x12>
 80050a8:	9901      	ldr	r1, [sp, #4]
 80050aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80050ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80050b2:	4259      	negs	r1, r3
 80050b4:	4159      	adcs	r1, r3
 80050b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050ba:	e7eb      	b.n	8005094 <__swhatbuf_r+0x24>

080050bc <__smakebuf_r>:
 80050bc:	898b      	ldrh	r3, [r1, #12]
 80050be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050c0:	079d      	lsls	r5, r3, #30
 80050c2:	4606      	mov	r6, r0
 80050c4:	460c      	mov	r4, r1
 80050c6:	d507      	bpl.n	80050d8 <__smakebuf_r+0x1c>
 80050c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80050cc:	6023      	str	r3, [r4, #0]
 80050ce:	6123      	str	r3, [r4, #16]
 80050d0:	2301      	movs	r3, #1
 80050d2:	6163      	str	r3, [r4, #20]
 80050d4:	b003      	add	sp, #12
 80050d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050d8:	ab01      	add	r3, sp, #4
 80050da:	466a      	mov	r2, sp
 80050dc:	f7ff ffc8 	bl	8005070 <__swhatbuf_r>
 80050e0:	9f00      	ldr	r7, [sp, #0]
 80050e2:	4605      	mov	r5, r0
 80050e4:	4639      	mov	r1, r7
 80050e6:	4630      	mov	r0, r6
 80050e8:	f7ff fe8a 	bl	8004e00 <_malloc_r>
 80050ec:	b948      	cbnz	r0, 8005102 <__smakebuf_r+0x46>
 80050ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050f2:	059a      	lsls	r2, r3, #22
 80050f4:	d4ee      	bmi.n	80050d4 <__smakebuf_r+0x18>
 80050f6:	f023 0303 	bic.w	r3, r3, #3
 80050fa:	f043 0302 	orr.w	r3, r3, #2
 80050fe:	81a3      	strh	r3, [r4, #12]
 8005100:	e7e2      	b.n	80050c8 <__smakebuf_r+0xc>
 8005102:	89a3      	ldrh	r3, [r4, #12]
 8005104:	6020      	str	r0, [r4, #0]
 8005106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800510a:	81a3      	strh	r3, [r4, #12]
 800510c:	9b01      	ldr	r3, [sp, #4]
 800510e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005112:	b15b      	cbz	r3, 800512c <__smakebuf_r+0x70>
 8005114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005118:	4630      	mov	r0, r6
 800511a:	f000 f81d 	bl	8005158 <_isatty_r>
 800511e:	b128      	cbz	r0, 800512c <__smakebuf_r+0x70>
 8005120:	89a3      	ldrh	r3, [r4, #12]
 8005122:	f023 0303 	bic.w	r3, r3, #3
 8005126:	f043 0301 	orr.w	r3, r3, #1
 800512a:	81a3      	strh	r3, [r4, #12]
 800512c:	89a3      	ldrh	r3, [r4, #12]
 800512e:	431d      	orrs	r5, r3
 8005130:	81a5      	strh	r5, [r4, #12]
 8005132:	e7cf      	b.n	80050d4 <__smakebuf_r+0x18>

08005134 <_fstat_r>:
 8005134:	b538      	push	{r3, r4, r5, lr}
 8005136:	4d07      	ldr	r5, [pc, #28]	@ (8005154 <_fstat_r+0x20>)
 8005138:	2300      	movs	r3, #0
 800513a:	4604      	mov	r4, r0
 800513c:	4608      	mov	r0, r1
 800513e:	4611      	mov	r1, r2
 8005140:	602b      	str	r3, [r5, #0]
 8005142:	f7fb fd12 	bl	8000b6a <_fstat>
 8005146:	1c43      	adds	r3, r0, #1
 8005148:	d102      	bne.n	8005150 <_fstat_r+0x1c>
 800514a:	682b      	ldr	r3, [r5, #0]
 800514c:	b103      	cbz	r3, 8005150 <_fstat_r+0x1c>
 800514e:	6023      	str	r3, [r4, #0]
 8005150:	bd38      	pop	{r3, r4, r5, pc}
 8005152:	bf00      	nop
 8005154:	2000bbbc 	.word	0x2000bbbc

08005158 <_isatty_r>:
 8005158:	b538      	push	{r3, r4, r5, lr}
 800515a:	4d06      	ldr	r5, [pc, #24]	@ (8005174 <_isatty_r+0x1c>)
 800515c:	2300      	movs	r3, #0
 800515e:	4604      	mov	r4, r0
 8005160:	4608      	mov	r0, r1
 8005162:	602b      	str	r3, [r5, #0]
 8005164:	f7fb fd11 	bl	8000b8a <_isatty>
 8005168:	1c43      	adds	r3, r0, #1
 800516a:	d102      	bne.n	8005172 <_isatty_r+0x1a>
 800516c:	682b      	ldr	r3, [r5, #0]
 800516e:	b103      	cbz	r3, 8005172 <_isatty_r+0x1a>
 8005170:	6023      	str	r3, [r4, #0]
 8005172:	bd38      	pop	{r3, r4, r5, pc}
 8005174:	2000bbbc 	.word	0x2000bbbc

08005178 <_sbrk_r>:
 8005178:	b538      	push	{r3, r4, r5, lr}
 800517a:	4d06      	ldr	r5, [pc, #24]	@ (8005194 <_sbrk_r+0x1c>)
 800517c:	2300      	movs	r3, #0
 800517e:	4604      	mov	r4, r0
 8005180:	4608      	mov	r0, r1
 8005182:	602b      	str	r3, [r5, #0]
 8005184:	f000 f808 	bl	8005198 <_sbrk>
 8005188:	1c43      	adds	r3, r0, #1
 800518a:	d102      	bne.n	8005192 <_sbrk_r+0x1a>
 800518c:	682b      	ldr	r3, [r5, #0]
 800518e:	b103      	cbz	r3, 8005192 <_sbrk_r+0x1a>
 8005190:	6023      	str	r3, [r4, #0]
 8005192:	bd38      	pop	{r3, r4, r5, pc}
 8005194:	2000bbbc 	.word	0x2000bbbc

08005198 <_sbrk>:
 8005198:	4a04      	ldr	r2, [pc, #16]	@ (80051ac <_sbrk+0x14>)
 800519a:	6811      	ldr	r1, [r2, #0]
 800519c:	4603      	mov	r3, r0
 800519e:	b909      	cbnz	r1, 80051a4 <_sbrk+0xc>
 80051a0:	4903      	ldr	r1, [pc, #12]	@ (80051b0 <_sbrk+0x18>)
 80051a2:	6011      	str	r1, [r2, #0]
 80051a4:	6810      	ldr	r0, [r2, #0]
 80051a6:	4403      	add	r3, r0
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	4770      	bx	lr
 80051ac:	2000bbcc 	.word	0x2000bbcc
 80051b0:	2000bbd0 	.word	0x2000bbd0

080051b4 <_init>:
 80051b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b6:	bf00      	nop
 80051b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ba:	bc08      	pop	{r3}
 80051bc:	469e      	mov	lr, r3
 80051be:	4770      	bx	lr

080051c0 <_fini>:
 80051c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c2:	bf00      	nop
 80051c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051c6:	bc08      	pop	{r3}
 80051c8:	469e      	mov	lr, r3
 80051ca:	4770      	bx	lr
